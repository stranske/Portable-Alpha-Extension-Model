 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/Portable_Alpha_Vectors.ipynb b/Portable_Alpha_Vectors.ipynb
index 3a9f2c6b2a5d0dd33a487a1cb58d619cae94d56e..d037ae1790958454b2f8e1294dc50ece20752ebb 100644
--- a/Portable_Alpha_Vectors.ipynb
+++ b/Portable_Alpha_Vectors.ipynb
@@ -6573,54 +6573,50 @@
     "\n",
     "        for g, (ext_pct, act_pct) in enumerate(grid_pairs):\n",
     "                E_pct = ext_pct - act_pct\n",
     "                A_pct = act_pct\n",
     "                Z_frac = 1.0 - ext_pct\n",
     "                E_mm = E_pct * total_fund_capital\n",
     "                A_mm = A_pct * total_fund_capital\n",
     "                Z_mm = Z_frac * total_fund_capital\n",
     "\n",
     "                # slice once; broadcasting \u2192 (n_sim, 12)\n",
     "                f_int_vec  = f_internal[g]\n",
     "                f_ext_vec  = f_ext_pa[g]\n",
     "                f_act_vec  = f_act_ext[g]\n",
     "\n",
     "                f_int_matrix    = np.broadcast_to(f_int_vec,  (N_SIMULATIONS, N_MONTHS))\n",
     "                f_ext_pa_matrix = np.broadcast_to(f_ext_vec,    (N_SIMULATIONS, N_MONTHS))\n",
     "                f_act_ext_matrix= np.broadcast_to(f_act_vec,   (N_SIMULATIONS, N_MONTHS))\n",
     "\n",
     "                sims = mc_paths  # reuse the pre\u2011computed universe\n",
     "                r_beta = sims[:, :, 0]   # (n_sim, n_months)\n",
     "                r_H    = sims[:, :, 1]\n",
     "                r_E    = sims[:, :, 2]\n",
     "                r_M    = sims[:, :, 3] \n",
     "\n",
     "                # -------- Vectorised over all simulations --------\n",
-    "                total_cap = params['total_fund_capital']\n",
-    "                Z_frac = params['internal_pa_capital']  / total_cap   # internal PA sleeve (Z)\n",
-    "                E_pct  = params['external_pa_capital']  / total_cap   # external PA bucket (X)\n",
-    "                A_pct  = params['active_ext_capital']   / total_cap   # active \u03b1-extension (Y)    \n",
     "                R_base   = (r_beta - f_int_matrix)   * Z_frac + r_H * Z_frac\n",
     "                R_extpa  = (r_beta - f_ext_pa_matrix)* E_pct  + r_M * E_pct\n",
     "                R_actext = (r_beta - f_act_ext_matrix)* A_pct + r_E * A_pct\n",
     "\n",
     "                results = {\n",
     "                    \"Base\":       np.prod(1 + R_base  , axis=1) - 1,\n",
     "                    \"ExternalPA\": np.prod(1 + R_extpa , axis=1) - 1,\n",
     "                    \"ActiveExt\":  np.prod(1 + R_actext, axis=1) - 1,\n",
     "                }\n",
     "\n",
     "                dates_sim = pd.date_range(\n",
     "                    start=idx_series.index[-1] + pd.DateOffset(months=1),\n",
     "                    periods=N_MONTHS, freq=\"ME\"\n",
     "                )\n",
     "\n",
     "                # Keep first simulation\u2019s path for raw-return sheets\n",
     "                raw_returns = {\n",
     "                    \"Base\":       pd.DataFrame({\"Base\":       R_base[0]},   index=dates_sim),\n",
     "                    \"ExternalPA\": pd.DataFrame({\"ExternalPA\": R_extpa[0]},  index=dates_sim),\n",
     "                    \"ActiveExt\":  pd.DataFrame({\"ActiveExt\":  R_actext[0]}, index=dates_sim),\n",
     "                }\n",
     "\n",
     "                df_yearly = pd.DataFrame(results)\n",
     "                summary_rows = []\n",
     "                for cfg, arr in df_yearly.items():\n",
 
EOF
)