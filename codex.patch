 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..87620ac7e74efee566c6ee9d2ed7281ebafb4788
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+.ipynb_checkpoints/
diff --git a/.ipynb_checkpoints/PortAlphaRefactorInst-checkpoint.ipynb b/.ipynb_checkpoints/PortAlphaRefactorInst-checkpoint.ipynb
deleted file mode 100644
index 363fcab7ed6e9634e198cf5555ceb88932c9a245..0000000000000000000000000000000000000000
--- a/.ipynb_checkpoints/PortAlphaRefactorInst-checkpoint.ipynb
+++ /dev/null
@@ -1,6 +0,0 @@
-{
- "cells": [],
- "metadata": {},
- "nbformat": 4,
- "nbformat_minor": 5
-}
diff --git a/.ipynb_checkpoints/Portable_Alpha_Cleaning-checkpoint.ipynb b/.ipynb_checkpoints/Portable_Alpha_Cleaning-checkpoint.ipynb
deleted file mode 100644
index 674b1edc424764b17f52f7802441aad9fa920fa4..0000000000000000000000000000000000000000
--- a/.ipynb_checkpoints/Portable_Alpha_Cleaning-checkpoint.ipynb
+++ /dev/null
@@ -1,2091 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "markdown",
-   "id": "094e50b2-1387-44d0-b1ca-c10c0db9289e",
-   "metadata": {},
-   "source": [
-    "**_🚨 IMPORTANT: BEFORE RUNNING THE PROGRAM, SAVE THIS SHEET AS A CSV FILE! 🚨_**\n",
-    "\n",
-    "import pandas as pd\n",
-    "\n",
-    "rows = [\n",
-    "    (\"Parameter\", \"Value\", \"Notes\"),  # Header row\n",
-    "    (\"Analysis mode\", \"\", \"Choose one: capital, returns, alpha_shares, vol_mult\"),\n",
-    "    # Capital mode\n",
-    "    (\"Max external combined (%)\", \"\", \"capital mode: max % for (External PA + Active Ext)\"),\n",
-    "    (\"External step size (%)\", \"\", \"capital mode: increment for external %\"),\n",
-    "    # Fixed capital (for returns / alpha_shares / vol_mult)\n",
-    "    (\"External PA capital (mm)\", \"\", \"returns/alpha_shares/vol_mult modes: allocation in mm\"),\n",
-    "    (\"Active Extension capital (mm)\", \"\", \"\"),\n",
-    "    (\"Internal PA capital (mm)\", \"\", \"\"),\n",
-    "    # Returns mode ranges (min/max/step)\n",
-    "    (\"In-House return min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"In-House return max (%)\", \"\", \"\"),\n",
-    "    (\"In-House return step (%)\", \"\", \"\"),\n",
-    "    (\"In-House vol min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"In-House vol max (%)\", \"\", \"\"),\n",
-    "    (\"In-House vol step (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension return min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"Alpha-Extension return max (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension return step (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension vol min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"Alpha-Extension vol max (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension vol step (%)\", \"\", \"\"),\n",
-    "    (\"External return min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"External return max (%)\", \"\", \"\"),\n",
-    "    (\"External return step (%)\", \"\", \"\"),\n",
-    "    (\"External vol min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"External vol max (%)\", \"\", \"\"),\n",
-    "    (\"External vol step (%)\", \"\", \"\"),\n",
-    "    # Alpha_Shares mode ranges\n",
-    "    (\"External PA α fraction min (%)\", \"\", \"alpha_shares mode\"),\n",
-    "    (\"External PA α fraction max (%)\", \"\", \"\"),\n",
-    "    (\"External PA α fraction step (%)\", \"\", \"\"),\n",
-    "    (\"Active share min (%)\", \"\", \"alpha_shares mode\"),\n",
-    "    (\"Active share max (%)\", \"\", \"\"),\n",
-    "    (\"Active share step (%)\", \"\", \"\"),\n",
-    "    # Vol_Mult mode ranges\n",
-    "    (\"SD multiple min\", \"\", \"vol_mult mode\"),\n",
-    "    (\"SD multiple max\", \"\", \"\"),\n",
-    "    (\"SD multiple step\", \"\", \"\"),\n",
-    "    # Financing & overrides\n",
-    "    (\"Annual financing mean (%)\", \"\", \"global financing\"),\n",
-    "    (\"Annual financing vol (%)\", \"\", \"\"),\n",
-    "    (\"Monthly spike probability\", \"\", \"\"),\n",
-    "    (\"Spike size (σ × multiplier)\", \"\", \"\"),\n",
-    "    (\"Internal financing mean (%)\", \"\", \"internal override\"),\n",
-    "    (\"Internal financing vol (%)\", \"\", \"\"),\n",
-    "    (\"Internal monthly spike probability\", \"\", \"\"),\n",
-    "    (\"Internal spike size (σ × multiplier)\", \"\", \"\"),\n",
-    "    (\"External PA financing mean (%)\", \"\", \"ext PA override\"),\n",
-    "    (\"External PA financing vol (%)\", \"\", \"\"),\n",
-    "    (\"External PA monthly spike probability\", \"\", \"\"),\n",
-    "    (\"External PA spike size (σ × multiplier)\", \"\", \"\"),\n",
-    "    (\"Active Extension financing mean (%)\", \"\", \"active ext override\"),\n",
-    "    (\"Active Extension financing vol (%)\", \"\", \"\"),\n",
-    "    (\"Active Extension monthly spike probability\", \"\", \"\"),\n",
-    "    (\"Active Extension spike size (σ × multiplier)\", \"\", \"\"),\n",
-    "    # Alpha stream fallbacks\n",
-    "    (\"In-House annual return (%)\", \"\", \"fallback if no range\"),\n",
-    "    (\"In-House annual vol (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension annual return (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension annual vol (%)\", \"\", \"\"),\n",
-    "    (\"External annual return (%)\", \"\", \"\"),\n",
-    "    (\"External annual vol (%)\", \"\", \"\"),\n",
-    "    # Correlations\n",
-    "    (\"Corr index–In-House\", \"\", \"\"),\n",
-    "    (\"Corr index–Alpha-Extension\", \"\", \"\"),\n",
-    "    (\"Corr index–External\", \"\", \"\"),\n",
-    "    (\"Corr In-House–Alpha-Extension\", \"\", \"\"),\n",
-    "    (\"Corr In-House–External\", \"\", \"\"),\n",
-    "    (\"Corr Alpha-Extension–External\", \"\", \"\"),\n",
-    "    # Buffer multiple & total capital\n",
-    "    (\"Buffer multiple\", \"\", \"cash‐buffer multiple\"),\n",
-    "    (\"Total fund capital (mm)\", \"\", \"total fund size in mm\")\n",
-    "]\n",
-    "\n",
-    "# Build DataFrame and save\n",
-    "df_template = pd.DataFrame(rows, columns=[\"Parameter\", \"Value\", \"Notes\"])\n",
-    "file_path = \"/mnt/data/parameters_template.xlsx\"\n",
-    "df_template.to_excel(file_path, index=False)\n",
-    "print(f\"Created template: {file_path}\")\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 1,
-   "id": "d761e9b0-f4cd-4591-896c-cafb9ba79b96",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# portable_alpha_model.py\n",
-    "\n",
-    "import sys\n",
-    "import csv\n",
-    "import numpy as np\n",
-    "import pandas as pd\n",
-    "from pathlib import Path\n",
-    "import tkinter as tk\n",
-    "from tkinter import filedialog\n",
-    "import openpyxl\n",
-    "import matplotlib.pyplot as plt\n",
-    "from mpl_toolkits.mplot3d import Axes3D  # noqa: F401\n",
-    "import openpyxl\n",
-    "\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 1. MAPPING: User-friendly labels → Internal variable names\n",
-    "# =============================================================================\n",
-    "\n",
-    "LABEL_MAP = {\n",
-    "    \"Analysis mode\":                           \"analysis_mode\",\n",
-    "    # Capital mode inputs\n",
-    "    \"Max external combined (%)\":               \"max_external_combined_percent\",\n",
-    "    \"External step size (%)\":                  \"external_step_size_percent\",\n",
-    "    # Fixed-capital (for non-capital modes)\n",
-    "    \"External PA capital (mm)\":                \"external_pa_capital\",\n",
-    "    \"Active Extension capital (mm)\":           \"active_ext_capital\",\n",
-    "    \"Internal PA capital (mm)\":                \"internal_pa_capital\",\n",
-    "    # Returns mode ranges\n",
-    "    \"In-House return min (%)\":                 \"mu_H_min\",\n",
-    "    \"In-House return max (%)\":                 \"mu_H_max\",\n",
-    "    \"In-House return step (%)\":                \"mu_H_step\",\n",
-    "    \"In-House vol min (%)\":                    \"sigma_H_min\",\n",
-    "    \"In-House vol max (%)\":                    \"sigma_H_max\",\n",
-    "    \"In-House vol step (%)\":                   \"sigma_H_step\",\n",
-    "    \"Alpha-Extension return min (%)\":          \"mu_E_min\",\n",
-    "    \"Alpha-Extension return max (%)\":          \"mu_E_max\",\n",
-    "    \"Alpha-Extension return step (%)\":         \"mu_E_step\",\n",
-    "    \"Alpha-Extension vol min (%)\":             \"sigma_E_min\",\n",
-    "    \"Alpha-Extension vol max (%)\":             \"sigma_E_max\",\n",
-    "    \"Alpha-Extension vol step (%)\":            \"sigma_E_step\",\n",
-    "    \"External return min (%)\":                 \"mu_M_min\",\n",
-    "    \"External return max (%)\":                 \"mu_M_max\",\n",
-    "    \"External return step (%)\":                \"mu_M_step\",\n",
-    "    \"External vol min (%)\":                    \"sigma_M_min\",\n",
-    "    \"External vol max (%)\":                    \"sigma_M_max\",\n",
-    "    \"External vol step (%)\":                   \"sigma_M_step\",\n",
-    "    # Alpha_Shares mode ranges\n",
-    "    \"External PA α fraction min (%)\":          \"external_pa_alpha_frac_min\",\n",
-    "    \"External PA α fraction max (%)\":          \"external_pa_alpha_frac_max\",\n",
-    "    \"External PA α fraction step (%)\":         \"external_pa_alpha_frac_step\",\n",
-    "    \"Active share min (%)\":                    \"active_share_min\",\n",
-    "    \"Active share max (%)\":                    \"active_share_max\",\n",
-    "    \"Active share step (%)\":                   \"active_share_step\",\n",
-    "    # Vol_Mult mode range\n",
-    "    \"SD multiple min\":                         \"sd_of_vol_mult_min\",\n",
-    "    \"SD multiple max\":                         \"sd_of_vol_mult_max\",\n",
-    "    \"SD multiple step\":                        \"sd_of_vol_mult_step\",\n",
-    "    # Financing & bucket overrides\n",
-    "    \"Annual financing mean (%)\":               \"financing_mean_annual\",\n",
-    "    \"Annual financing vol (%)\":                \"financing_vol_annual\",\n",
-    "    \"Monthly spike probability\":               \"spike_prob\",\n",
-    "    \"Spike size (σ × multiplier)\":             \"spike_factor\",\n",
-    "    \"Internal financing mean (%)\":             \"internal_financing_mean_annual\",\n",
-    "    \"Internal financing vol (%)\":              \"internal_financing_vol_annual\",\n",
-    "    \"Internal monthly spike probability\":      \"internal_spike_prob\",\n",
-    "    \"Internal spike size (σ × multiplier)\":    \"internal_spike_factor\",\n",
-    "    \"External PA financing mean (%)\":          \"ext_pa_financing_mean_annual\",\n",
-    "    \"External PA financing vol (%)\":           \"ext_pa_financing_vol_annual\",\n",
-    "    \"External PA monthly spike probability\":   \"ext_pa_spike_prob\",\n",
-    "    \"External PA spike size (σ × multiplier)\": \"ext_pa_spike_factor\",\n",
-    "    \"Active Extension financing mean (%)\":     \"act_ext_financing_mean_annual\",\n",
-    "    \"Active Extension financing vol (%)\":      \"act_ext_financing_vol_annual\",\n",
-    "    \"Active Extension monthly spike probability\":\"act_ext_spike_prob\",\n",
-    "    \"Active Extension spike size (σ × multiplier)\":\"act_ext_spike_factor\",\n",
-    "    # Fallback alpha stream defaults\n",
-    "    \"In-House annual return (%)\":              \"mu_H\",\n",
-    "    \"In-House annual vol (%)\":                 \"sigma_H\",\n",
-    "    \"Alpha-Extension annual return (%)\":       \"mu_E\",\n",
-    "    \"Alpha-Extension annual vol (%)\":          \"sigma_E\",\n",
-    "    \"External annual return (%)\":              \"mu_M\",\n",
-    "    \"External annual vol (%)\":                 \"sigma_M\",\n",
-    "    # Correlations\n",
-    "    \"Corr index–In-House\":                     \"rho_idx_H\",\n",
-    "    \"Corr index–Alpha-Extension\":              \"rho_idx_E\",\n",
-    "    \"Corr index–External\":                     \"rho_idx_M\",\n",
-    "    \"Corr In-House–Alpha-Extension\":           \"rho_H_E\",\n",
-    "    \"Corr In-House–External\":                  \"rho_H_M\",\n",
-    "    \"Corr Alpha-Extension–External\":            \"rho_E_M\",\n",
-    "    # Other risk controls\n",
-    "    \"Buffer multiple\":                         \"buffer_multiple\",\n",
-    "    \"Total fund capital (mm)\":                 \"total_fund_capital\",\n",
-    "    # Visualization toggles\n",
-    "    \"Plot heatmap\":                            \"plot_heatmap\",\n",
-    "    \"Plot line\":                               \"plot_line\",\n",
-    "    \"Plot boxplot\":                            \"plot_boxplot\",\n",
-    "    \"Plot scatter\":                            \"plot_scatter\",\n",
-    "    \"Plot time series\":                        \"plot_time_series\",\n",
-    "    \"Plot histogram\":                          \"plot_histogram\",\n",
-    "    \"Plot surface\":                            \"plot_surface\",\n",
-    "}"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 2,
-   "id": "97eb2b0f-f62a-4164-baff-cd1dbc0872d1",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# =============================================================================\n",
-    "# 2. FILE‐PICKER FOR CSV SELECTION\n",
-    "# =============================================================================\n",
-    "\n",
-    "def select_csv_file():\n",
-    "    \"\"\"\n",
-    "    Pop up a file‐picker dialog so the user can choose a CSV file.\n",
-    "    Returns a pathlib.Path to the selected file.\n",
-    "    Raises FileNotFoundError if the user cancels.\n",
-    "    \"\"\"\n",
-    "    root = tk.Tk()\n",
-    "    root.withdraw()\n",
-    "    file_path = filedialog.askopenfilename(\n",
-    "        title=\"Select CSV File\",\n",
-    "        filetypes=[(\"CSV files\", \"*.csv\"), (\"All files\", \"*.*\")]\n",
-    "    )\n",
-    "    root.destroy()\n",
-    "    if not file_path:\n",
-    "        raise FileNotFoundError(\"No file selected.\")\n",
-    "    return Path(file_path)\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 3. LOAD PARAMETERS USING MAPPING\n",
-    "# =============================================================================\n",
-    "\n",
-    "def load_parameters(csv_filepath, label_map):\n",
-    "    \"\"\"\n",
-    "    Read a CSV that may have leading instruction rows, then a header row \"Parameter,Value\".\n",
-    "    Skip all rows until the header, then parse friendly labels → internal names via label_map.\n",
-    "    Returns a dict {internal_var_name: parsed_value}.\n",
-    "    \"\"\"\n",
-    "    params = {}\n",
-    "    lines = Path(csv_filepath).read_text(encoding=\"utf-8\").splitlines()\n",
-    "    header_idx = None\n",
-    "    for i, line in enumerate(lines):\n",
-    "        if line.strip().startswith(\"Parameter,\"):\n",
-    "            header_idx = i\n",
-    "            break\n",
-    "\n",
-    "    if header_idx is None:\n",
-    "        raise ValueError(f\"No header row starting with 'Parameter,' found in {csv_filepath}\")\n",
-    "\n",
-    "    header_and_data = lines[header_idx:]\n",
-    "    reader = csv.DictReader(header_and_data)\n",
-    "\n",
-    "    for row in reader:\n",
-    "        friendly_key = row.get(\"Parameter\", \"\").strip()\n",
-    "        if not friendly_key or friendly_key not in label_map:\n",
-    "            continue\n",
-    "\n",
-    "        internal_key = label_map[friendly_key]\n",
-    "        raw_val = row.get(\"Value\", \"\").strip()\n",
-    "\n",
-    "        # If semicolon is present, parse as a list (legacy fallback)\n",
-    "        if \";\" in raw_val:\n",
-    "            parts = [p.strip() for p in raw_val.split(\";\") if p.strip() != \"\"]\n",
-    "            parsed_list = []\n",
-    "            for p in parts:\n",
-    "                try:\n",
-    "                    if \".\" in p:\n",
-    "                        parsed_list.append(float(p))\n",
-    "                    else:\n",
-    "                        parsed_list.append(int(p))\n",
-    "                except ValueError:\n",
-    "                    parsed_list.append(p)\n",
-    "            params[internal_key] = parsed_list\n",
-    "        else:\n",
-    "            # Try int → float → string\n",
-    "            try:\n",
-    "                params[internal_key] = int(raw_val)\n",
-    "            except ValueError:\n",
-    "                try:\n",
-    "                    params[internal_key] = float(raw_val)\n",
-    "                except ValueError:\n",
-    "                    # Could be blank string; store as-is\n",
-    "                    params[internal_key] = raw_val\n",
-    "\n",
-    "    return params\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 4. UTILITY: “SAFE GET” FOR NUMERIC PARAMETERS\n",
-    "# =============================================================================\n",
-    "\n",
-    "def get_num(raw_params, key, default):\n",
-    "    \"\"\"\n",
-    "    Return raw_params[key] if it's already int or float; otherwise default.\n",
-    "    \"\"\"\n",
-    "    v = raw_params.get(key, None)\n",
-    "    if isinstance(v, (int, float)):\n",
-    "        return v\n",
-    "    return default"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "id": "d094bd11-1e45-4870-92ff-6a9b3bb9b2fd",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# =============================================================================\n",
-    "# 5. HELPER FUNCTIONS TO BUILD RANGES OR FALLBACK TO MIDPOINT\n",
-    "# =============================================================================\n",
-    "\n",
-    "def build_range(key_base, default_midpoint):\n",
-    "    \"\"\"\n",
-    "    If raw_params contains key_base_min & key_base_max (and optionally key_base_step),\n",
-    "    return a list of decimals from min→max (in steps).\n",
-    "    Otherwise, if key_base_list exists (legacy semicolon list), return that.\n",
-    "    Else, return [default_midpoint].\n",
-    "    We divide by 100 because these are “percent” inputs.\n",
-    "    \"\"\"\n",
-    "    k_min  = get_num(raw_params, f\"{key_base}_min\", None)\n",
-    "    k_max  = get_num(raw_params, f\"{key_base}_max\", None)\n",
-    "    k_step = get_num(raw_params, f\"{key_base}_step\", None)\n",
-    "\n",
-    "    if (k_min is not None) and (k_max is not None):\n",
-    "        step = k_step if (k_step is not None) else (k_max - k_min)\n",
-    "        if step <= 0:\n",
-    "            raise RuntimeError(f\"Step for '{key_base}' must be positive.\")\n",
-    "        start = k_min / 100.0\n",
-    "        stop  = k_max / 100.0\n",
-    "        stepd = step / 100.0\n",
-    "        arr = np.arange(start, stop + 1e-9, stepd)\n",
-    "        return list(arr)\n",
-    "\n",
-    "    # Legacy semicolon‐list fallback\n",
-    "    flat_list = raw_params.get(f\"{key_base}_list\", None)\n",
-    "    if isinstance(flat_list, list):\n",
-    "        return flat_list\n",
-    "\n",
-    "    return [default_midpoint]\n",
-    "\n",
-    "def build_range_int(key_base, default_midpoint):\n",
-    "    \"\"\"\n",
-    "    Like build_range but for integer inputs (e.g. SD multiple).\n",
-    "    If key_base_min & key_base_max exist, return list(range(min, max+1, step)).\n",
-    "    Else if key_base_list exists, return it. Else [default_midpoint].\n",
-    "    \"\"\"\n",
-    "    k_min  = get_num(raw_params, f\"{key_base}_min\", None)\n",
-    "    k_max  = get_num(raw_params, f\"{key_base}_max\", None)\n",
-    "    k_step = get_num(raw_params, f\"{key_base}_step\", None)\n",
-    "\n",
-    "    if (k_min is not None) and (k_max is not None):\n",
-    "        step = k_step if (k_step is not None) else (k_max - k_min)\n",
-    "        if step <= 0:\n",
-    "            raise RuntimeError(f\"Step for '{key_base}' must be positive.\")\n",
-    "        return list(range(k_min, k_max + 1, step))\n",
-    "\n",
-    "    flat_list = raw_params.get(f\"{key_base}_list\", None)\n",
-    "    if isinstance(flat_list, list):\n",
-    "        return flat_list\n",
-    "\n",
-    "    return [default_midpoint]\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 6. HELPER TO LOAD INDEX RETURNS\n",
-    "# =============================================================================\n",
-    "\n",
-    "def load_index_returns(csv_path):\n",
-    "    \"\"\"\n",
-    "    Load a CSV of monthly index returns into a pandas Series.\n",
-    "    Expects columns: \"Date\" and either \"Monthly_TR\" or \"Return\".\n",
-    "    Returns a pd.Series indexed by Date (datetime).\n",
-    "    \"\"\"\n",
-    "    csv_path = Path(csv_path)\n",
-    "    if not csv_path.exists() or not csv_path.is_file():\n",
-    "        raise FileNotFoundError(f\"Index CSV not found at {csv_path}\")\n",
-    "    df = pd.read_csv(csv_path, parse_dates=[\"Date\"])\n",
-    "    if \"Date\" not in df.columns:\n",
-    "        raise ValueError(f\"'Date' column is missing from {csv_path}\")\n",
-    "    if \"Monthly_TR\" in df.columns:\n",
-    "        col = \"Monthly_TR\"\n",
-    "    elif \"Return\" in df.columns:\n",
-    "        col = \"Return\"\n",
-    "    else:\n",
-    "        raise ValueError(f\"CSV must contain 'Monthly_TR' or 'Return'; found: {df.columns.tolist()}\")\n",
-    "\n",
-    "    df = df.sort_values(\"Date\").reset_index(drop=True)\n",
-    "    df.set_index(\"Date\", inplace=True)\n",
-    "    series = df[col].dropna().copy()\n",
-    "    series.index = pd.to_datetime(series.index)\n",
-    "    return series\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 7. SIMULATION + UTILITY FUNCTIONS\n",
-    "# =============================================================================\n",
-    "\n",
-    "def simulate_financing(T, financing_mean, financing_sigma, spike_prob, spike_factor):\n",
-    "    \"\"\"\n",
-    "    Simulate a series of financing spreads f_t for T months,\n",
-    "    using a Normal + occasional jump model.\n",
-    "    \"\"\"\n",
-    "    f = np.zeros(T)\n",
-    "    for t in range(T):\n",
-    "        base = financing_mean + np.random.normal(0, financing_sigma)\n",
-    "        jump = 0.0\n",
-    "        if np.random.rand() < spike_prob:\n",
-    "            jump = spike_factor * financing_sigma\n",
-    "        f[t] = max(base + jump, 0.0)\n",
-    "    return f\n",
-    "\n",
-    "def build_cov_matrix(rho_idx_H, rho_idx_E, rho_idx_M,\n",
-    "                     rho_H_E, rho_H_M, rho_E_M,\n",
-    "                     idx_sigma, sigma_H, sigma_E, sigma_M):\n",
-    "    \"\"\"\n",
-    "    Build the 4×4 covariance matrix for (Index, H, E, M).\n",
-    "    \"\"\"\n",
-    "    sds = np.array([idx_sigma, sigma_H, sigma_E, sigma_M])\n",
-    "    rho = np.array([\n",
-    "        [1.0,       rho_idx_H, rho_idx_E, rho_idx_M],\n",
-    "        [rho_idx_H, 1.0,       rho_H_E,   rho_H_M],\n",
-    "        [rho_idx_E, rho_H_E,   1.0,       rho_E_M],\n",
-    "        [rho_idx_M, rho_H_M,   rho_E_M,   1.0    ]\n",
-    "    ])\n",
-    "    return np.outer(sds, sds) * rho\n",
-    "\n",
-    "def simulate_alpha_streams(T, cov, mu_idx, mu_H, mu_E, mu_M):\n",
-    "    \"\"\"\n",
-    "    Simulate T joint observations of (Index_return, H, E, M)\n",
-    "    from a multivariate Normal with given means and covariance.\n",
-    "    Returns shape (T, 4).\n",
-    "    \"\"\"\n",
-    "    means = np.array([mu_idx, mu_H, mu_E, mu_M])\n",
-    "    return np.random.multivariate_normal(means, cov, size=T)\n",
-    "\n",
-    "def export_to_excel(inputs_dict, summary_df, raw_returns_dict, filename=\"Outputs.xlsx\"):\n",
-    "    \"\"\"\n",
-    "    Write inputs, summary, and raw returns into an Excel workbook.\n",
-    "    \"\"\"\n",
-    "    with pd.ExcelWriter(filename, engine=\"openpyxl\") as writer:\n",
-    "        # 1) Inputs sheet\n",
-    "        df_inputs = pd.DataFrame.from_dict(inputs_dict, orient=\"index\", columns=[\"Value\"])\n",
-    "        df_inputs.index.name = \"Parameter\"\n",
-    "        df_inputs.reset_index(inplace=True)\n",
-    "        df_inputs.to_excel(writer, sheet_name=\"Inputs\", index=False)\n",
-    "\n",
-    "        # 2) Summary sheet\n",
-    "        summary_df.to_excel(writer, sheet_name=\"Summary\", index=False)\n",
-    "\n",
-    "        # 3) Raw Returns sheets\n",
-    "        for sheet_name, df in raw_returns_dict.items():\n",
-    "            safe_name = sheet_name if len(sheet_name) <= 31 else sheet_name[:31]\n",
-    "            df.to_excel(writer, sheet_name=safe_name, index=True)\n",
-    "\n",
-    "    print(f\"Exported results to {filename}\")\n",
-    "\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "id": "31baeb9e-27d9-440e-89d0-a0defac70c65",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "2025-06-11 05:31:40.041 python[51612:4056983] The class 'NSOpenPanel' overrides the method identifier.  This method is implemented by class 'NSWindow'\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Parameters CSV selected: /Users/teacher/Library/CloudStorage/Dropbox/Learning/Code/Portable Alpha-Extension Model/parameters.csv\n",
-      "Please select the INDEX CSV (monthly total returns).\n",
-      "Index CSV selected: /Users/teacher/Library/CloudStorage/Dropbox/Learning/Code/Portable Alpha-Extension Model/sp500tr_fred_divyield.csv\n",
-      "Loaded 663 months from the raw index CSV.\n",
-      "Using idx_series from 1970-01-01 to 2025-03-01 (n=663)\n",
-      "Analysis-window: μ_idx = 0.0096, σ_idx = 0.0458\n"
-     ]
-    }
-   ],
-   "source": [
-    "# =============================================================================\n",
-    "# 8. MAIN EXECUTION\n",
-    "# =============================================================================\n",
-    "\n",
-    "if __name__ == \"__main__\":\n",
-    "    # 8.1) Prompt user to select the parameters CSV\n",
-    "    try:\n",
-    "        params_csv_path = select_csv_file()\n",
-    "        print(f\"Parameters CSV selected: {params_csv_path}\")\n",
-    "    except FileNotFoundError:\n",
-    "        raise RuntimeError(\"No parameter CSV selected; exiting.\")\n",
-    "\n",
-    "    # 8.2) Load raw parameters\n",
-    "    raw_params = load_parameters(params_csv_path, LABEL_MAP)\n",
-    "\n",
-    "    # 8.3) “Safe get” for numeric scalars and defaults\n",
-    "    total_fund_capital = get_num(raw_params, \"total_fund_capital\", 1000)\n",
-    "\n",
-    "    financing_mean_annual = get_num(raw_params, \"financing_mean_annual\", 0.005)\n",
-    "    financing_vol_annual  = get_num(raw_params, \"financing_vol_annual\", 0.001)\n",
-    "    spike_prob            = get_num(raw_params, \"spike_prob\", 0.02)\n",
-    "    spike_factor          = get_num(raw_params, \"spike_factor\", 2.25)\n",
-    "\n",
-    "    internal_financing_mean_annual = get_num(raw_params, \"internal_financing_mean_annual\", financing_mean_annual)\n",
-    "    internal_financing_vol_annual  = get_num(raw_params, \"internal_financing_vol_annual\",  financing_vol_annual)\n",
-    "    internal_spike_prob            = get_num(raw_params, \"internal_spike_prob\",            spike_prob)\n",
-    "    internal_spike_factor          = get_num(raw_params, \"internal_spike_factor\",          spike_factor)\n",
-    "\n",
-    "    ext_pa_financing_mean_annual = get_num(raw_params, \"ext_pa_financing_mean_annual\", financing_mean_annual)\n",
-    "    ext_pa_financing_vol_annual  = get_num(raw_params, \"ext_pa_financing_vol_annual\",  financing_vol_annual)\n",
-    "    ext_pa_spike_prob            = get_num(raw_params, \"ext_pa_spike_prob\",            spike_prob)\n",
-    "    ext_pa_spike_factor          = get_num(raw_params, \"ext_pa_spike_factor\",          spike_factor)\n",
-    "\n",
-    "    act_ext_financing_mean_annual = get_num(raw_params, \"act_ext_financing_mean_annual\", financing_mean_annual)\n",
-    "    act_ext_financing_vol_annual  = get_num(raw_params, \"act_ext_financing_vol_annual\",  financing_vol_annual)\n",
-    "    act_ext_spike_prob            = get_num(raw_params, \"act_ext_spike_prob\",            spike_prob)\n",
-    "    act_ext_spike_factor          = get_num(raw_params, \"act_ext_spike_factor\",          spike_factor)\n",
-    "\n",
-    "    mu_H    = get_num(raw_params, \"mu_H\",    0.04)\n",
-    "    sigma_H = get_num(raw_params, \"sigma_H\", 0.01)\n",
-    "    mu_E    = get_num(raw_params, \"mu_E\",    0.05)\n",
-    "    sigma_E = get_num(raw_params, \"sigma_E\", 0.02)\n",
-    "    mu_M    = get_num(raw_params, \"mu_M\",    0.03)\n",
-    "    sigma_M = get_num(raw_params, \"sigma_M\", 0.02)\n",
-    "\n",
-    "    rho_idx_H = get_num(raw_params, \"rho_idx_H\", 0.05)\n",
-    "    rho_idx_E = get_num(raw_params, \"rho_idx_E\", 0.00)\n",
-    "    rho_idx_M = get_num(raw_params, \"rho_idx_M\", 0.00)\n",
-    "    rho_H_E   = get_num(raw_params, \"rho_H_E\",   0.10)\n",
-    "    rho_H_M   = get_num(raw_params, \"rho_H_M\",   0.10)\n",
-    "    rho_E_M   = get_num(raw_params, \"rho_E_M\",   0.00)\n",
-    "\n",
-    "    buffer_multiple = get_num(raw_params, \"buffer_multiple\", 3.0)\n",
-    "\n",
-    "    default_mu_H    = mu_H / 12\n",
-    "    default_sigma_H = sigma_H / 12\n",
-    "    default_mu_E    = mu_E / 12\n",
-    "    default_sigma_E = sigma_E / 12\n",
-    "    default_mu_M    = mu_M / 12\n",
-    "    default_sigma_M = sigma_M / 12\n",
-    "\n",
-    "    default_ext_alpha_frac = get_num(raw_params, \"external_pa_alpha_frac\", 50) / 100.0\n",
-    "    default_act_share      = get_num(raw_params, \"active_share\",            50) / 100.0\n",
-    "\n",
-    "    default_sd_mult = get_num(raw_params, \"sd_of_vol_mult\", 3)\n",
-    "\n",
-    "    financing_mean  = financing_mean_annual / 12\n",
-    "    financing_sigma = financing_vol_annual / 12\n",
-    "\n",
-    "    # 8.4) Extract visualization flags (each “Plot X” row)\n",
-    "    plot_heatmap_flag     = bool(str(raw_params.get(\"plot_heatmap\", \"\")).strip())\n",
-    "    plot_line_flag        = bool(str(raw_params.get(\"plot_line\", \"\")).strip())\n",
-    "    plot_boxplot_flag     = bool(str(raw_params.get(\"plot_boxplot\", \"\")).strip())\n",
-    "    plot_scatter_flag     = bool(str(raw_params.get(\"plot_scatter\", \"\")).strip())\n",
-    "    plot_time_series_flag = bool(str(raw_params.get(\"plot_time_series\", \"\")).strip())\n",
-    "    plot_histogram_flag   = bool(str(raw_params.get(\"plot_histogram\", \"\")).strip())\n",
-    "    plot_surface_flag     = bool(str(raw_params.get(\"plot_surface\", \"\")).strip())\n",
-    "\n",
-    "    # 8.5) Determine analysis_mode\n",
-    "    analysis_mode = str(raw_params.get(\"analysis_mode\", \"\")).strip().lower()\n",
-    "    valid_modes = {\"capital\", \"returns\", \"alpha_shares\", \"vol_mult\"}\n",
-    "    if analysis_mode not in valid_modes:\n",
-    "        raise RuntimeError(f\"Analysis mode must be one of {valid_modes}, but got '{analysis_mode}'\")\n",
-    "\n",
-    "    # 8.6) Prompt user to select the INDEX CSV\n",
-    "    print(\"Please select the INDEX CSV (monthly total returns).\")\n",
-    "    try:\n",
-    "        INDEX_CSV_PATH = select_csv_file()\n",
-    "        print(f\"Index CSV selected: {INDEX_CSV_PATH}\")\n",
-    "    except FileNotFoundError:\n",
-    "        raise RuntimeError(\"Index CSV was not selected; exiting.\")\n",
-    "\n",
-    "    # 8.7) Load idx_series and compute reference stats\n",
-    "    try:\n",
-    "        idx_series = load_index_returns(INDEX_CSV_PATH)\n",
-    "        print(f\"Loaded {len(idx_series)} months from the raw index CSV.\")\n",
-    "    except Exception as e:\n",
-    "        raise RuntimeError(f\"Failed to load index returns: {e}\")\n",
-    "\n",
-    "    mu_idx   = idx_series.mean()\n",
-    "    idx_sigma = idx_series.std(ddof=1)\n",
-    "    print(f\"Using idx_series from {idx_series.index.min().date()} to {idx_series.index.max().date()} (n={len(idx_series)})\")\n",
-    "    print(f\"Analysis-window: μ_idx = {mu_idx:.4f}, σ_idx = {idx_sigma:.4f}\")\n",
-    "\n",
-    "    # 8.8) Convert bucket financing overrides to monthly decimals\n",
-    "    internal_financing_mean  = internal_financing_mean_annual / 12\n",
-    "    internal_financing_sigma = internal_financing_vol_annual / 12\n",
-    "\n",
-    "    ext_pa_financing_mean  = ext_pa_financing_mean_annual / 12\n",
-    "    ext_pa_financing_sigma = ext_pa_financing_vol_annual / 12\n",
-    "\n",
-    "    act_ext_financing_mean  = act_ext_financing_mean_annual / 12\n",
-    "    act_ext_financing_sigma = act_ext_financing_vol_annual / 12\n",
-    "\n",
-    "    # -------------------------------------------------------------------\n",
-    "    # 8.9) Branch on analysis_mode\n",
-    "    # -------------------------------------------------------------------\n",
-    "\n",
-    "    if analysis_mode == \"capital\":\n",
-    "        # --------------------------------------\n",
-    "        # 8.9.a) Capital mode: Sweep ext_pct→act_pct\n",
-    "        # --------------------------------------\n",
-    "        max_ext_pct  = get_num(raw_params, \"max_external_combined_percent\", 50) / 100.0\n",
-    "        ext_step_pct = get_num(raw_params, \"external_step_size_percent\",   1) / 100.0\n",
-    "\n",
-    "        # Other “sweepable” params collapse to midpoint\n",
-    "        mu_H_list    = [default_mu_H]\n",
-    "        sigma_H_list = [default_sigma_H]\n",
-    "        mu_E_list    = [default_mu_E]\n",
-    "        sigma_E_list = [default_sigma_E]\n",
-    "        mu_M_list    = [default_mu_M]\n",
-    "        sigma_M_list = [default_sigma_M]\n",
-    "\n",
-    "        ext_alpha_list = [default_ext_alpha_frac]\n",
-    "        act_share_list = [default_act_share]\n",
-    "        sd_list        = [default_sd_mult]\n",
-    "\n",
-    "        all_summaries = []\n",
-    "        all_raw_returns = {}\n",
-    "\n",
-    "        ext_range = np.arange(0.0, max_ext_pct + 1e-9, ext_step_pct)\n",
-    "        for ext_pct in ext_range:\n",
-    "            act_range = np.arange(0.0, ext_pct + 1e-9, ext_step_pct)\n",
-    "            for act_pct in act_range:\n",
-    "                E_pct = ext_pct - act_pct\n",
-    "                A_pct = act_pct\n",
-    "                Z_frac = 1.0 - ext_pct\n",
-    "                E_mm = E_pct * total_fund_capital\n",
-    "                A_mm = A_pct * total_fund_capital\n",
-    "                Z_mm = Z_frac * total_fund_capital\n",
-    "\n",
-    "                # 1-year financing paths\n",
-    "                f_internal = simulate_financing(\n",
-    "                    12,\n",
-    "                    internal_financing_mean, internal_financing_sigma,\n",
-    "                    internal_spike_prob, internal_spike_factor\n",
-    "                )\n",
-    "                f_ext_pa = simulate_financing(\n",
-    "                    12,\n",
-    "                    ext_pa_financing_mean, ext_pa_financing_sigma,\n",
-    "                    ext_pa_spike_prob, ext_pa_spike_factor\n",
-    "                )\n",
-    "                f_act_ext = simulate_financing(\n",
-    "                    12,\n",
-    "                    act_ext_financing_mean, act_ext_financing_sigma,\n",
-    "                    act_ext_spike_prob, act_ext_spike_factor\n",
-    "                )\n",
-    "\n",
-    "                cov_mat = build_cov_matrix(\n",
-    "                    rho_idx_H, rho_idx_E, rho_idx_M,\n",
-    "                    rho_H_E, rho_H_M, rho_E_M,\n",
-    "                    idx_sigma, default_sigma_H, default_sigma_E, default_sigma_M\n",
-    "                )\n",
-    "\n",
-    "                N_SIMULATIONS = get_num(raw_params, \"N_SIMULATIONS\", 5000)\n",
-    "                N_MONTHS      = get_num(raw_params, \"N_MONTHS\",    12)\n",
-    "\n",
-    "                sims = np.random.multivariate_normal(\n",
-    "                    [mu_idx, default_mu_H, default_mu_E, default_mu_M],\n",
-    "                    cov_mat,\n",
-    "                    size=(N_SIMULATIONS, N_MONTHS)\n",
-    "                )\n",
-    "\n",
-    "                f_int_matrix    = np.tile(f_internal, (N_SIMULATIONS, 1))\n",
-    "                f_ext_pa_matrix = np.tile(f_ext_pa,    (N_SIMULATIONS, 1))\n",
-    "                f_act_ext_matrix= np.tile(f_act_ext,   (N_SIMULATIONS, 1))\n",
-    "\n",
-    "                results = {\n",
-    "                    \"Base\":       np.zeros(N_SIMULATIONS),\n",
-    "                    \"ExternalPA\": np.zeros(N_SIMULATIONS),\n",
-    "                    \"ActiveExt\":  np.zeros(N_SIMULATIONS)\n",
-    "                }\n",
-    "                dates_sim = pd.date_range(\n",
-    "                    start=idx_series.index[-1] + pd.DateOffset(months=1),\n",
-    "                    periods=N_MONTHS, freq=\"ME\"\n",
-    "                )\n",
-    "                raw_returns = {\n",
-    "                    \"Base\":       pd.DataFrame(index=dates_sim),\n",
-    "                    \"ExternalPA\": pd.DataFrame(index=dates_sim),\n",
-    "                    \"ActiveExt\":  pd.DataFrame(index=dates_sim),\n",
-    "                }\n",
-    "\n",
-    "                for sim_i in range(N_SIMULATIONS):\n",
-    "                    r_beta = sims[sim_i, :, 0]\n",
-    "                    r_H    = sims[sim_i, :, 1]\n",
-    "                    r_E    = sims[sim_i, :, 2]\n",
-    "                    r_M    = sims[sim_i, :, 3]\n",
-    "\n",
-    "                    # Base (internal)\n",
-    "                    R_base = (r_beta - f_int_matrix[sim_i]) * Z_frac + r_H * Z_frac\n",
-    "                    results[\"Base\"][sim_i] = np.prod(1 + R_base) - 1\n",
-    "\n",
-    "                    # External PA\n",
-    "                    R_extpa = (r_beta - f_ext_pa_matrix[sim_i]) * E_pct + r_M * E_pct\n",
-    "                    results[\"ExternalPA\"][sim_i] = np.prod(1 + R_extpa) - 1\n",
-    "\n",
-    "                    # Active Extension\n",
-    "                    R_actext = (r_beta - f_act_ext_matrix[sim_i]) * A_pct + r_E * A_pct\n",
-    "                    results[\"ActiveExt\"][sim_i] = np.prod(1 + R_actext) - 1\n",
-    "\n",
-    "                    if sim_i == 0:\n",
-    "                        raw_returns[\"Base\"]       = pd.DataFrame({\"Base\": R_base}, index=dates_sim)\n",
-    "                        raw_returns[\"ExternalPA\"] = pd.DataFrame({\"ExternalPA\": R_extpa}, index=dates_sim)\n",
-    "                        raw_returns[\"ActiveExt\"]  = pd.DataFrame({\"ActiveExt\": R_actext}, index=dates_sim)\n",
-    "\n",
-    "                df_yearly = pd.DataFrame(results)\n",
-    "                summary_rows = []\n",
-    "                for cfg, arr in df_yearly.items():\n",
-    "                    ann_ret = np.mean(arr)\n",
-    "                    ann_vol = np.std(arr, ddof=1)\n",
-    "                    var_95  = np.percentile(arr, 5)\n",
-    "                    te      = np.nan\n",
-    "\n",
-    "                    mr_series = raw_returns[cfg].iloc[:, 0]\n",
-    "                    threshold = -buffer_multiple * idx_sigma\n",
-    "                    breach_pct = np.mean(mr_series < threshold) * 100\n",
-    "\n",
-    "                    summary_rows.append({\n",
-    "                        \"Config\":            cfg,\n",
-    "                        \"Ext %\":             ext_pct * 100.0,\n",
-    "                        \"Act %\":             act_pct * 100.0,\n",
-    "                        \"Internal PA (mm)\":  Z_mm,\n",
-    "                        \"Annual Return\":     ann_ret,\n",
-    "                        \"Annual Vol\":        ann_vol,\n",
-    "                        \"VaR 95\":            var_95,\n",
-    "                        \"TE (est.)\":         te,\n",
-    "                        \"Breach %\":          breach_pct\n",
-    "                    })\n",
-    "\n",
-    "                summary_df = pd.DataFrame(summary_rows)\n",
-    "                all_summaries.append(summary_df)\n",
-    "\n",
-    "                for key, df_r in raw_returns.items():\n",
-    "                    sheet_key = f\"{key}_E{int(ext_pct*100)}_A{int(act_pct*100)}\"\n",
-    "                    all_raw_returns[sheet_key] = df_r\n",
-    "\n",
-    "        final_summary = pd.concat(all_summaries, ignore_index=True)\n",
-    "\n",
-    "        inputs_dict = {\n",
-    "            \"Analysis mode\":               \"capital\",\n",
-    "            \"Total fund capital (mm)\":     total_fund_capital,\n",
-    "            \"Max external combined (%)\":   get_num(raw_params, \"max_external_combined_percent\", \"\"),\n",
-    "            \"External step size (%)\":      get_num(raw_params, \"external_step_size_percent\", \"\"),\n",
-    "            \"Annual financing mean (%)\":   financing_mean_annual,\n",
-    "            \"Annual financing vol (%)\":    financing_vol_annual,\n",
-    "            \"Monthly spike probability\":   spike_prob,\n",
-    "            \"Spike size (σ × multiplier)\": spike_factor,\n",
-    "            \"Buffer multiple\":             buffer_multiple\n",
-    "        }\n",
-    "\n",
-    "        export_to_excel(inputs_dict, final_summary, all_raw_returns)\n",
-    "\n",
-    "        # Convert numeric summary columns to human-friendly format\n",
-    "        display_df = final_summary.copy()\n",
-    "        display_df = display_df.rename(columns={\n",
-    "            \"Annual Return\": \"Annual Return (%)\",\n",
-    "            \"Annual Vol\":    \"Annual Volatility (%)\",\n",
-    "            \"VaR 95\":        \"95%-VaR (%)\",\n",
-    "            \"TE (est.)\":     \"Tracking Error (%)\",\n",
-    "            \"Breach %\":      \"Breach Probability (%)\"\n",
-    "        })\n",
-    "        # Format percentages\n",
-    "        for col in [\"Annual Return (%)\", \"Annual Volatility (%)\", \"95%-VaR (%)\", \"Tracking Error (%)\", \"Breach Probability (%)\"]:\n",
-    "            display_df[col] = display_df[col].map(\"{:.1f}%\".format)\n",
-    "\n",
-    "        pd.set_option(\"display.max_rows\", None)\n",
-    "        print(\"\\n=== Summary Table (Capital Mode) ===\\n\")\n",
-    "        print(display_df.to_string(index=False))\n",
-    "        print()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "9cf4f1dc-f8cc-4df1-9294-db2f40b1a76b",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "\n",
-    "\n",
-    "        # ─── PLOTTING DISPATCH ────────────────────────────────────────────────────\n",
-    "        # Helper to pivot decimals to percentages for axes\n",
-    "        def perc(x): return x * 100.0\n",
-    "\n",
-    "        if plot_heatmap_flag:\n",
-    "            # Heatmap of Annual Return vs Ext % & Act %\n",
-    "            pivot = final_summary.pivot(index=\"Act %\", columns=\"Ext %\", values=\"Annual Return\")\n",
-    "            X = np.array(sorted(final_summary[\"Ext %\"].unique()))\n",
-    "            Y = np.array(sorted(final_summary[\"Act %\"].unique()))\n",
-    "            Z = pivot.values\n",
-    "            fig, ax = plt.subplots(figsize=(6,5))\n",
-    "            hm = ax.imshow(\n",
-    "                Z,\n",
-    "                origin=\"lower\",\n",
-    "                aspect=\"auto\",\n",
-    "                cmap=\"viridis\",\n",
-    "                extent=[X.min(), X.max(), Y.min(), Y.max()]\n",
-    "            )\n",
-    "            ax.set_xlabel(\"Ext %\")\n",
-    "            ax.set_ylabel(\"Act %\")\n",
-    "            ax.set_title(\"Heatmap: Annual Return vs Ext% & Act%\")\n",
-    "            fig.colorbar(hm, ax=ax, label=\"Annual Return (decimal)\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_line_flag:\n",
-    "            # Line plot: Annual Return vs Ext % for each Act % slice\n",
-    "            fig, ax = plt.subplots(figsize=(6,4))\n",
-    "            for act_level in sorted(final_summary[\"Act %\"].unique()):\n",
-    "                sub = final_summary[final_summary[\"Act %\"] == act_level]\n",
-    "                x_vals = sub[\"Ext %\"].values\n",
-    "                y_vals = sub[\"Annual Return\"].values * 100.0\n",
-    "                ax.plot(x_vals, y_vals, marker=\"o\", label=f\"Act % = {act_level:.1f}\")\n",
-    "            ax.set_xlabel(\"Ext %\")\n",
-    "            ax.set_ylabel(\"Annual Return (%)\")\n",
-    "            ax.set_title(\"Line: Return vs Ext % by Active %\")\n",
-    "            ax.legend()\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_boxplot_flag:\n",
-    "            # Boxplot of first-simulation Monthly Returns vs Ext % at Act% = 0%\n",
-    "            sim_list = []\n",
-    "            for sheet_key, df_r in all_raw_returns.items():\n",
-    "                parts = sheet_key.split(\"_\")\n",
-    "                cfg   = parts[0]\n",
-    "                try:\n",
-    "                    ext_pct = float(parts[1].replace(\"E\",\"\")) / 100.0\n",
-    "                    act_pct = float(parts[2].replace(\"A\",\"\")) / 100.0\n",
-    "                except:\n",
-    "                    continue\n",
-    "                for val in df_r.iloc[:, 0].values:\n",
-    "                    sim_list.append({\n",
-    "                        \"Config\":       cfg,\n",
-    "                        \"Ext %\":        ext_pct * 100.0,\n",
-    "                        \"Act %\":        act_pct * 100.0,\n",
-    "                        \"Monthly return\": val * 100.0\n",
-    "                    })\n",
-    "            sim_df = pd.DataFrame(sim_list)\n",
-    "            subset = sim_df[sim_df[\"Act %\"] == 0.0]\n",
-    "            groups = [g[\"Monthly return\"].values for _, g in subset.groupby(\"Ext %\")]\n",
-    "            labels = sorted(subset[\"Ext %\"].unique())\n",
-    "            fig, ax = plt.subplots(figsize=(6,4))\n",
-    "            ax.boxplot(groups, labels=[f\"{l:.0f}\" for l in labels])\n",
-    "            ax.set_xlabel(\"Ext %\")\n",
-    "            ax.set_ylabel(\"Monthly Return (%)\")\n",
-    "            ax.set_title(\"Boxplot: Monthly Return by Ext % (Act%=0%)\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_scatter_flag:\n",
-    "            fig, ax = plt.subplots(figsize=(5,4))\n",
-    "            te_vals     = final_summary[\"Tracking Error (%)\"].astype(float) * 100.0\n",
-    "            breach_vals = final_summary[\"Breach %\"].astype(float)\n",
-    "            ax.scatter(te_vals, breach_vals, alpha=0.6)\n",
-    "            ax.set_xlabel(\"Tracking Error (%)\")\n",
-    "            ax.set_ylabel(\"Breach Probability (%)\")\n",
-    "            ax.set_title(\"Scatter: TE vs Breach Probability\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_time_series_flag:\n",
-    "            threshold = -buffer_multiple * idx_sigma\n",
-    "            for sample_key in all_raw_returns.keys():\n",
-    "                if sample_key.startswith(\"Base_\"):\n",
-    "                    df_path = all_raw_returns[sample_key]\n",
-    "                    fig, ax = plt.subplots(figsize=(6,3))\n",
-    "                    ax.plot(df_path.index, df_path.iloc[:, 0], label=sample_key)\n",
-    "                    ax.axhline(y=threshold, color=\"red\", linestyle=\"--\", label=\"Threshold\")\n",
-    "                    ax.set_title(f\"Time Series (first-sim) for {sample_key}\")\n",
-    "                    ax.set_xlabel(\"Month\")\n",
-    "                    ax.set_ylabel(\"Monthly return\")\n",
-    "                    ax.legend()\n",
-    "                    plt.tight_layout()\n",
-    "                    plt.show()\n",
-    "                    break  # only show one example\n",
-    "\n",
-    "        if plot_histogram_flag:\n",
-    "            # Pick a representative ExternalPA_E25_A25 if exists\n",
-    "            target = None\n",
-    "            for key in all_raw_returns:\n",
-    "                if key.startswith(\"ExternalPA_E25_A25\"):\n",
-    "                    target = key\n",
-    "                    break\n",
-    "            if target:\n",
-    "                data = all_raw_returns[target].iloc[:, 0].values * 100.0\n",
-    "                fig, ax = plt.subplots(figsize=(5,4))\n",
-    "                ax.hist(data, bins=30, alpha=0.7)\n",
-    "                ax.set_xlabel(\"Monthly Return (%)\")\n",
-    "                ax.set_ylabel(\"Frequency\")\n",
-    "                ax.set_title(f\"Histogram: {target}\")\n",
-    "                plt.tight_layout()\n",
-    "                plt.show()\n",
-    "\n",
-    "        if plot_surface_flag:\n",
-    "            xv = sorted(final_summary[\"Ext %\"].unique())\n",
-    "            yv = sorted(final_summary[\"Act %\"].unique())\n",
-    "            Z = final_summary.pivot(index=\"Act %\", columns=\"Ext %\", values=\"Breach %\").values\n",
-    "            X, Y = np.meshgrid(np.array(xv), np.array(yv))\n",
-    "            fig = plt.figure(figsize=(6,5))\n",
-    "            ax3 = fig.add_subplot(111, projection=\"3d\")\n",
-    "            surf = ax3.plot_surface(X, Y, Z, cmap=\"viridis\", edgecolor=\"none\")\n",
-    "            ax3.set_xlabel(\"Ext %\")\n",
-    "            ax3.set_ylabel(\"Act %\")\n",
-    "            ax3.set_zlabel(\"Breach %\")\n",
-    "            ax3.set_title(\"Surface: Breach vs Ext & Act\")\n",
-    "            fig.colorbar(surf, shrink=0.5, aspect=5, label=\"Breach %\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "    elif analysis_mode == \"returns\":\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "        # 8.9.b) Returns mode: Sweep over μ_H, σ_H, μ_E, σ_E, μ_M, σ_M. Other params fixed at midpoint.\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "\n",
-    "        E_mm = get_num(raw_params, \"external_pa_capital\", None)\n",
-    "        A_mm = get_num(raw_params, \"active_ext_capital\",  None)\n",
-    "        Z_mm = get_num(raw_params, \"internal_pa_capital\", None)\n",
-    "        if any(v is None for v in [E_mm, A_mm, Z_mm]):\n",
-    "            raise RuntimeError(\n",
-    "                \"In 'returns' mode, please supply: External PA capital (mm), \"\n",
-    "                \"Active Extension capital (mm), Internal PA capital (mm).\"\n",
-    "            )\n",
-    "\n",
-    "        mu_H_list    = build_range(\"mu_H\",    default_midpoint=default_mu_H)\n",
-    "        sigma_H_list = build_range(\"sigma_H\", default_midpoint=default_sigma_H)\n",
-    "        mu_E_list    = build_range(\"mu_E\",    default_midpoint=default_mu_E)\n",
-    "        sigma_E_list = build_range(\"sigma_E\", default_midpoint=default_sigma_E)\n",
-    "        mu_M_list    = build_range(\"mu_M\",    default_midpoint=default_mu_M)\n",
-    "        sigma_M_list = build_range(\"sigma_M\", default_midpoint=default_sigma_M)\n",
-    "\n",
-    "        ext_alpha_list = [default_ext_alpha_frac]\n",
-    "        act_share_list = [default_act_share]\n",
-    "        sd_list        = [default_sd_mult]\n",
-    "\n",
-    "        all_summaries = []\n",
-    "        all_raw_returns = {}\n",
-    "\n",
-    "        for muH in mu_H_list:\n",
-    "            for sH in sigma_H_list:\n",
-    "                for muE in mu_E_list:\n",
-    "                    for sE in sigma_E_list:\n",
-    "                        for muM_ in mu_M_list:\n",
-    "                            for sM in sigma_M_list:\n",
-    "                                f_internal = simulate_financing(\n",
-    "                                    12,\n",
-    "                                    internal_financing_mean_annual/12,\n",
-    "                                    internal_financing_vol_annual/12,\n",
-    "                                    internal_spike_prob,\n",
-    "                                    internal_spike_factor\n",
-    "                                )\n",
-    "                                f_ext_pa = simulate_financing(\n",
-    "                                    12,\n",
-    "                                    ext_pa_financing_mean_annual/12,\n",
-    "                                    ext_pa_financing_vol_annual/12,\n",
-    "                                    ext_pa_spike_prob,\n",
-    "                                    ext_pa_spike_factor\n",
-    "                                )\n",
-    "                                f_act_ext = simulate_financing(\n",
-    "                                    12,\n",
-    "                                    act_ext_financing_mean_annual/12,\n",
-    "                                    act_ext_financing_vol_annual/12,\n",
-    "                                    act_ext_spike_prob,\n",
-    "                                    act_ext_spike_factor\n",
-    "                                )\n",
-    "\n",
-    "                                cov_mat = build_cov_matrix(\n",
-    "                                    rho_idx_H, rho_idx_E, rho_idx_M,\n",
-    "                                    rho_H_E, rho_H_M, rho_E_M,\n",
-    "                                    idx_sigma, sH, sE, sM\n",
-    "                                )\n",
-    "\n",
-    "                                N_SIMULATIONS = get_num(raw_params, \"N_SIMULATIONS\", 5000)\n",
-    "                                N_MONTHS      = get_num(raw_params, \"N_MONTHS\",    12)\n",
-    "\n",
-    "                                sims = np.random.multivariate_normal(\n",
-    "                                    [mu_idx, muH, muE, muM_],\n",
-    "                                    cov_mat,\n",
-    "                                    size=(N_SIMULATIONS, N_MONTHS)\n",
-    "                                )\n",
-    "\n",
-    "                                f_int_matrix    = np.tile(f_internal, (N_SIMULATIONS, 1))\n",
-    "                                f_ext_pa_matrix = np.tile(f_ext_pa,    (N_SIMULATIONS, 1))\n",
-    "                                f_act_ext_matrix= np.tile(f_act_ext,   (N_SIMULATIONS, 1))\n",
-    "\n",
-    "                                results = {\n",
-    "                                    \"Base\":       np.zeros(N_SIMULATIONS),\n",
-    "                                    \"ExternalPA\": np.zeros(N_SIMULATIONS),\n",
-    "                                    \"ActiveExt\":  np.zeros(N_SIMULATIONS)\n",
-    "                                }\n",
-    "                                dates_sim = pd.date_range(\n",
-    "                                    start=idx_series.index[-1] + pd.DateOffset(months=1),\n",
-    "                                    periods=N_MONTHS, freq=\"ME\"\n",
-    "                                )\n",
-    "                                raw_returns = {\n",
-    "                                    \"Base\":       pd.DataFrame(index=dates_sim),\n",
-    "                                    \"ExternalPA\": pd.DataFrame(index=dates_sim),\n",
-    "                                    \"ActiveExt\":  pd.DataFrame(index=dates_sim),\n",
-    "                                }\n",
-    "\n",
-    "                                for sim_i in range(N_SIMULATIONS):\n",
-    "                                    r_beta = sims[sim_i, :, 0]\n",
-    "                                    r_H    = sims[sim_i, :, 1]\n",
-    "                                    r_E    = sims[sim_i, :, 2]\n",
-    "                                    r_M    = sims[sim_i, :, 3]\n",
-    "\n",
-    "                                    R_base   = (r_beta - f_int_matrix[sim_i]) + r_H\n",
-    "                                    R_extpa  = (r_beta - f_ext_pa_matrix[sim_i]) + r_M\n",
-    "                                    R_actext = (r_beta - f_act_ext_matrix[sim_i]) + r_E\n",
-    "\n",
-    "                                    results[\"Base\"][sim_i]       = np.prod(1 + R_base) - 1\n",
-    "                                    results[\"ExternalPA\"][sim_i] = np.prod(1 + R_extpa) - 1\n",
-    "                                    results[\"ActiveExt\"][sim_i]  = np.prod(1 + R_actext) - 1\n",
-    "\n",
-    "                                    if sim_i == 0:\n",
-    "                                        raw_returns[\"Base\"]       = pd.DataFrame({\"Base\": R_base}, index=dates_sim)\n",
-    "                                        raw_returns[\"ExternalPA\"] = pd.DataFrame({\"ExternalPA\": R_extpa}, index=dates_sim)\n",
-    "                                        raw_returns[\"ActiveExt\"]  = pd.DataFrame({\"ActiveExt\": R_actext}, index=dates_sim)\n",
-    "\n",
-    "                                df_yearly = pd.DataFrame(results)\n",
-    "                                summary_rows = []\n",
-    "                                for cfg, arr in df_yearly.items():\n",
-    "                                    ann_ret = np.mean(arr)\n",
-    "                                    ann_vol = np.std(arr, ddof=1)\n",
-    "                                    var_95  = np.percentile(arr, 5)\n",
-    "                                    te      = np.nan\n",
-    "\n",
-    "                                    mr_series = raw_returns[cfg].iloc[:, 0]\n",
-    "                                    threshold = -buffer_multiple * idx_sigma\n",
-    "                                    breach_pct = np.mean(mr_series < threshold) * 100\n",
-    "\n",
-    "                                    summary_rows.append({\n",
-    "                                        \"Config\":            cfg,\n",
-    "                                        \"μ_H (%)\":           muH * 100.0,\n",
-    "                                        \"σ_H (%)\":           sH * 100.0,\n",
-    "                                        \"μ_E (%)\":           muE * 100.0,\n",
-    "                                        \"σ_E (%)\":           sE * 100.0,\n",
-    "                                        \"μ_M (%)\":           muM_ * 100.0,\n",
-    "                                        \"σ_M (%)\":           sM * 100.0,\n",
-    "                                        \"Internal PA (mm)\":  Z_mm,\n",
-    "                                        \"External PA (mm)\":  E_mm,\n",
-    "                                        \"Active Ext (mm)\":   A_mm,\n",
-    "                                        \"Annual Return\":     ann_ret,\n",
-    "                                        \"Annual Vol\":        ann_vol,\n",
-    "                                        \"VaR 95\":            var_95,\n",
-    "                                        \"TE (est.)\":         te,\n",
-    "                                        \"Breach %\":          breach_pct\n",
-    "                                    })\n",
-    "\n",
-    "                                summary_df = pd.DataFrame(summary_rows)\n",
-    "                                all_summaries.append(summary_df)\n",
-    "\n",
-    "                                for key, df_r in raw_returns.items():\n",
-    "                                    sheet_key = (\n",
-    "                                        f\"{key}_H{int(muH*100)}\"\n",
-    "                                        f\"_sH{int(sH*100)}\"\n",
-    "                                        f\"_E{int(muE*100)}\"\n",
-    "                                        f\"_sE{int(sE*100)}\"\n",
-    "                                        f\"_M{int(muM_*100)}\"\n",
-    "                                        f\"_sM{int(sM*100)}\"\n",
-    "                                    )\n",
-    "                                    all_raw_returns[sheet_key] = df_r\n",
-    "\n",
-    "        final_summary = pd.concat(all_summaries, ignore_index=True)\n",
-    "\n",
-    "        inputs_dict = {\n",
-    "            \"Analysis mode\":                    \"returns\",\n",
-    "            \"In-House return min (%)\":          get_num(raw_params, \"mu_H_min\",    \"\"),\n",
-    "            \"In-House return max (%)\":          get_num(raw_params, \"mu_H_max\",    \"\"),\n",
-    "            \"In-House return step (%)\":         get_num(raw_params, \"mu_H_step\",   \"\"),\n",
-    "            \"In-House vol min (%)\":             get_num(raw_params, \"sigma_H_min\", \"\"),\n",
-    "            \"In-House vol max (%)\":             get_num(raw_params, \"sigma_H_max\", \"\"),\n",
-    "            \"In-House vol step (%)\":            get_num(raw_params, \"sigma_H_step\",\"\"),\n",
-    "            \"Alpha-Extension return min (%)\":   get_num(raw_params, \"mu_E_min\",    \"\"),\n",
-    "            \"Alpha-Extension return max (%)\":   get_num(raw_params, \"mu_E_max\",    \"\"),\n",
-    "            \"Alpha-Extension return step (%)\":  get_num(raw_params, \"mu_E_step\",   \"\"),\n",
-    "            \"Alpha-Extension vol min (%)\":      get_num(raw_params, \"sigma_E_min\", \"\"),\n",
-    "            \"Alpha-Extension vol max (%)\":      get_num(raw_params, \"sigma_E_max\", \"\"),\n",
-    "            \"Alpha-Extension vol step (%)\":     get_num(raw_params, \"sigma_E_step\",\"\"),\n",
-    "            \"External return min (%)\":          get_num(raw_params, \"mu_M_min\",    \"\"),\n",
-    "            \"External return max (%)\":          get_num(raw_params, \"mu_M_max\",    \"\"),\n",
-    "            \"External return step (%)\":         get_num(raw_params, \"mu_M_step\",   \"\"),\n",
-    "            \"External vol min (%)\":             get_num(raw_params, \"sigma_M_min\", \"\"),\n",
-    "            \"External vol max (%)\":             get_num(raw_params, \"sigma_M_max\", \"\"),\n",
-    "            \"External vol step (%)\":            get_num(raw_params, \"sigma_M_step\",\"\"),\n",
-    "            \"External PA capital (mm)\":         E_mm,\n",
-    "            \"Active Extension capital (mm)\":    A_mm,\n",
-    "            \"Internal PA capital (mm)\":         Z_mm,\n",
-    "            \"Buffer multiple\":                  buffer_multiple\n",
-    "        }\n",
-    "\n",
-    "        export_to_excel(inputs_dict, final_summary, all_raw_returns)\n",
-    "\n",
-    "        display_df = final_summary.copy()\n",
-    "        display_df = display_df.rename(columns={\n",
-    "            \"Annual Return\": \"Annual Return (%)\",\n",
-    "            \"Annual Vol\":    \"Annual Volatility (%)\",\n",
-    "            \"VaR 95\":        \"95%-VaR (%)\",\n",
-    "            \"TE (est.)\":     \"Tracking Error (%)\",\n",
-    "            \"Breach %\":      \"Breach Probability (%)\"\n",
-    "        })\n",
-    "        for col in [\"Annual Return (%)\", \"Annual Volatility (%)\", \"95%-VaR (%)\", \"Tracking Error (%)\", \"Breach Probability (%)\"]:\n",
-    "            display_df[col] = display_df[col].map(\"{:.1f}%\".format)\n",
-    "\n",
-    "        pd.set_option(\"display.max_rows\", None)\n",
-    "        print(\"\\n=== Summary Table (Returns Mode) ===\\n\")\n",
-    "        print(display_df.to_string(index=False))\n",
-    "        print()\n",
-    "\n",
-    "        # ─── PLOTTING DISPATCH ────────────────────────────────────────────────────\n",
-    "\n",
-    "        if plot_heatmap_flag:\n",
-    "            # Heatmap: pick two parameters to visualize, e.g. μ_H vs σ_H → Annual Return\n",
-    "            pivot = final_summary.pivot(index=\"σ_H (%)\", columns=\"μ_H (%)\", values=\"Annual Return\")\n",
-    "            X = np.array(sorted(final_summary[\"μ_H (%)\"].unique()))\n",
-    "            Y = np.array(sorted(final_summary[\"σ_H (%)\"].unique()))\n",
-    "            Z = pivot.values\n",
-    "            fig, ax = plt.subplots(figsize=(6,5))\n",
-    "            hm = ax.imshow(\n",
-    "                Z,\n",
-    "                origin=\"lower\",\n",
-    "                aspect=\"auto\",\n",
-    "                cmap=\"viridis\",\n",
-    "                extent=[X.min(), X.max(), Y.min(), Y.max()]\n",
-    "            )\n",
-    "            ax.set_xlabel(\"μ_H (%)\")\n",
-    "            ax.set_ylabel(\"σ_H (%)\")\n",
-    "            ax.set_title(\"Heatmap: Annual Return vs μ_H & σ_H\")\n",
-    "            fig.colorbar(hm, ax=ax, label=\"Annual Return (decimal)\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_line_flag:\n",
-    "            # Line: sweep μ_H for fixed σ_H (take first σ_H level)\n",
-    "            first_sigma = sorted(final_summary[\"σ_H (%)\"].unique())[0]\n",
-    "            sub = final_summary[final_summary[\"σ_H (%)\"] == first_sigma]\n",
-    "            x_vals = sub[\"μ_H (%)\"].values\n",
-    "            y_vals = sub[\"Annual Return\"].values * 100.0\n",
-    "            fig, ax = plt.subplots(figsize=(6,4))\n",
-    "            ax.plot(x_vals, y_vals, marker=\"o\")\n",
-    "            ax.set_xlabel(\"μ_H (%)\")\n",
-    "            ax.set_ylabel(\"Annual Return (%)\")\n",
-    "            ax.set_title(f\"Line: μ_H vs Return (σ_H={first_sigma:.1f}%)\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_boxplot_flag:\n",
-    "            # Boxplot of monthly returns for one parameter combination, e.g. first in grid\n",
-    "            sample_key = list(all_raw_returns.keys())[0]\n",
-    "            data = all_raw_returns[sample_key].iloc[:, 0].values * 100.0\n",
-    "            fig, ax = plt.subplots(figsize=(5,4))\n",
-    "            ax.boxplot(data, labels=[sample_key])\n",
-    "            ax.set_ylabel(\"Monthly Return (%)\")\n",
-    "            ax.set_title(f\"Boxplot: {sample_key}\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_scatter_flag:\n",
-    "            fig, ax = plt.subplots(figsize=(5,4))\n",
-    "            te_vals     = final_summary[\"Tracking Error (%)\"].astype(float) * 100.0\n",
-    "            breach_vals = final_summary[\"Breach %\"].astype(float)\n",
-    "            ax.scatter(te_vals, breach_vals, alpha=0.6)\n",
-    "            ax.set_xlabel(\"Tracking Error (%)\")\n",
-    "            ax.set_ylabel(\"Breach Probability (%)\")\n",
-    "            ax.set_title(\"Scatter: TE vs Breach Probability\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_time_series_flag:\n",
-    "            threshold = -buffer_multiple * idx_sigma\n",
-    "            sample_key = list(all_raw_returns.keys())[0]\n",
-    "            df_path = all_raw_returns[sample_key]\n",
-    "            fig, ax = plt.subplots(figsize=(6,3))\n",
-    "            ax.plot(df_path.index, df_path.iloc[:, 0], label=sample_key)\n",
-    "            ax.axhline(y=threshold, color=\"red\", linestyle=\"--\", label=\"Threshold\")\n",
-    "            ax.set_title(f\"Time Series (first-sim) for {sample_key}\")\n",
-    "            ax.set_xlabel(\"Month\")\n",
-    "            ax.set_ylabel(\"Monthly return\")\n",
-    "            ax.legend()\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_histogram_flag:\n",
-    "            sample_key = list(all_raw_returns.keys())[0]\n",
-    "            data = all_raw_returns[sample_key].iloc[:, 0].values * 100.0\n",
-    "            fig, ax = plt.subplots(figsize=(5,4))\n",
-    "            ax.hist(data, bins=30, alpha=0.7)\n",
-    "            ax.set_xlabel(\"Monthly Return (%)\")\n",
-    "            ax.set_ylabel(\"Frequency\")\n",
-    "            ax.set_title(f\"Histogram: {sample_key}\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_surface_flag:\n",
-    "            xv = sorted(final_summary[\"μ_H (%)\"].unique())\n",
-    "            yv = sorted(final_summary[\"σ_H (%)\"].unique())\n",
-    "            Z = final_summary.pivot(index=\"σ_H (%)\", columns=\"μ_H (%)\", values=\"Breach %\").values\n",
-    "            X, Y = np.meshgrid(np.array(xv), np.array(yv))\n",
-    "            fig = plt.figure(figsize=(6,5))\n",
-    "            ax3 = fig.add_subplot(111, projection=\"3d\")\n",
-    "            surf = ax3.plot_surface(X, Y, Z, cmap=\"viridis\", edgecolor=\"none\")\n",
-    "            ax3.set_xlabel(\"μ_H (%)\")\n",
-    "            ax3.set_ylabel(\"σ_H (%)\")\n",
-    "            ax3.set_zlabel(\"Breach %\")\n",
-    "            ax3.set_title(\"Surface: Breach vs μ_H & σ_H\")\n",
-    "            fig.colorbar(surf, shrink=0.5, aspect=5, label=\"Breach %\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "    elif analysis_mode == \"alpha_shares\":\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "        # 8.9.c) Alpha_Shares mode: Sweep over external_pa_alpha_frac, active_share. Others fixed.\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "\n",
-    "        E_mm = get_num(raw_params, \"external_pa_capital\", None)\n",
-    "        A_mm = get_num(raw_params, \"active_ext_capital\",  None)\n",
-    "        Z_mm = get_num(raw_params, \"internal_pa_capital\", None)\n",
-    "        if any(v is None for v in [E_mm, A_mm, Z_mm]):\n",
-    "            raise RuntimeError(\n",
-    "                \"In 'alpha_shares' mode, supply: External PA capital (mm), \"\n",
-    "                \"Active Extension capital (mm), Internal PA capital (mm).\"\n",
-    "            )\n",
-    "\n",
-    "        external_pa_alpha_frac_list = build_range(\"external_pa_alpha_frac\", default_midpoint=default_ext_alpha_frac)\n",
-    "        active_share_list           = build_range(\"active_share\",            default_midpoint=default_act_share)\n",
-    "\n",
-    "        mu_H_list    = [default_mu_H]\n",
-    "        sigma_H_list = [default_sigma_H]\n",
-    "        mu_E_list    = [default_mu_E]\n",
-    "        sigma_E_list = [default_sigma_E]\n",
-    "        mu_M_list    = [default_mu_M]\n",
-    "        sigma_M_list = [default_sigma_M]\n",
-    "        sd_list      = [default_sd_mult]\n",
-    "\n",
-    "        all_summaries = []\n",
-    "        all_raw_returns = {}\n",
-    "\n",
-    "        for ext_alpha in external_pa_alpha_frac_list:\n",
-    "            for act_share in active_share_list:\n",
-    "                f_internal = simulate_financing(\n",
-    "                    12,\n",
-    "                    internal_financing_mean_annual/12,\n",
-    "                    internal_financing_vol_annual/12,\n",
-    "                    internal_spike_prob,\n",
-    "                    internal_spike_factor\n",
-    "                )\n",
-    "                f_ext_pa = simulate_financing(\n",
-    "                    12,\n",
-    "                    ext_pa_financing_mean_annual/12,\n",
-    "                    ext_pa_financing_vol_annual/12,\n",
-    "                    ext_pa_spike_prob,\n",
-    "                    ext_pa_spike_factor\n",
-    "                )\n",
-    "                f_act_ext = simulate_financing(\n",
-    "                    12,\n",
-    "                    act_ext_financing_mean_annual/12,\n",
-    "                    act_ext_financing_vol_annual/12,\n",
-    "                    act_ext_spike_prob,\n",
-    "                    act_ext_spike_factor\n",
-    "                )\n",
-    "\n",
-    "                cov_mat = build_cov_matrix(\n",
-    "                    rho_idx_H, rho_idx_E, rho_idx_M,\n",
-    "                    rho_H_E, rho_H_M, rho_E_M,\n",
-    "                    idx_sigma, default_sigma_H, default_sigma_E, default_sigma_M\n",
-    "                )\n",
-    "\n",
-    "                N_SIMULATIONS = get_num(raw_params, \"N_SIMULATIONS\", 5000)\n",
-    "                N_MONTHS      = get_num(raw_params, \"N_MONTHS\",    12)\n",
-    "\n",
-    "                sims = np.random.multivariate_normal(\n",
-    "                    [mu_idx, default_mu_H, default_mu_E, default_mu_M],\n",
-    "                    cov_mat,\n",
-    "                    size=(N_SIMULATIONS, N_MONTHS)\n",
-    "                )\n",
-    "\n",
-    "                f_int_matrix    = np.tile(f_internal, (N_SIMULATIONS, 1))\n",
-    "                f_ext_pa_matrix = np.tile(f_ext_pa,    (N_SIMULATIONS, 1))\n",
-    "                f_act_ext_matrix= np.tile(f_act_ext,   (N_SIMULATIONS, 1))\n",
-    "\n",
-    "                results = {\n",
-    "                    \"Base\":       np.zeros(N_SIMULATIONS),\n",
-    "                    \"ExternalPA\": np.zeros(N_SIMULATIONS),\n",
-    "                    \"ActiveExt\":  np.zeros(N_SIMULATIONS)\n",
-    "                }\n",
-    "                dates_sim = pd.date_range(\n",
-    "                    start=idx_series.index[-1] + pd.DateOffset(months=1),\n",
-    "                    periods=N_MONTHS, freq=\"ME\"\n",
-    "                )\n",
-    "                raw_returns = {\n",
-    "                    \"Base\":       pd.DataFrame(index=dates_sim),\n",
-    "                    \"ExternalPA\": pd.DataFrame(index=dates_sim),\n",
-    "                    \"ActiveExt\":  pd.DataFrame(index=dates_sim),\n",
-    "                }\n",
-    "\n",
-    "                for sim_i in range(N_SIMULATIONS):\n",
-    "                    r_beta = sims[sim_i, :, 0]\n",
-    "                    r_H    = sims[sim_i, :, 1]\n",
-    "                    r_E    = sims[sim_i, :, 2]\n",
-    "                    r_M    = sims[sim_i, :, 3]\n",
-    "\n",
-    "                    R_base   = (r_beta - f_int_matrix[sim_i]) + r_H\n",
-    "                    R_extpa  = (r_beta - f_ext_pa_matrix[sim_i]) * ext_alpha + r_M * ext_alpha\n",
-    "                    R_actext = (r_beta - f_act_ext_matrix[sim_i]) * act_share + r_E * act_share\n",
-    "\n",
-    "                    results[\"Base\"][sim_i]       = np.prod(1 + R_base) - 1\n",
-    "                    results[\"ExternalPA\"][sim_i] = np.prod(1 + R_extpa) - 1\n",
-    "                    results[\"ActiveExt\"][sim_i]  = np.prod(1 + R_actext) - 1\n",
-    "\n",
-    "                    if sim_i == 0:\n",
-    "                        raw_returns[\"Base\"]       = pd.DataFrame({\"Base\": R_base}, index=dates_sim)\n",
-    "                        raw_returns[\"ExternalPA\"] = pd.DataFrame({\"ExternalPA\": R_extpa}, index=dates_sim)\n",
-    "                        raw_returns[\"ActiveExt\"]  = pd.DataFrame({\"ActiveExt\": R_actext}, index=dates_sim)\n",
-    "\n",
-    "                df_yearly = pd.DataFrame(results)\n",
-    "                summary_rows = []\n",
-    "                for cfg, arr in df_yearly.items():\n",
-    "                    ann_ret = np.mean(arr)\n",
-    "                    ann_vol = np.std(arr, ddof=1)\n",
-    "                    var_95  = np.percentile(arr, 5)\n",
-    "                    te      = np.nan\n",
-    "\n",
-    "                    mr_series = raw_returns[cfg].iloc[:, 0]\n",
-    "                    threshold = -buffer_multiple * idx_sigma\n",
-    "                    breach_pct = np.mean(mr_series < threshold) * 100\n",
-    "\n",
-    "                    summary_rows.append({\n",
-    "                        \"Config\":            cfg,\n",
-    "                        \"External PA α (%)\": ext_alpha * 100.0,\n",
-    "                        \"Active share (%)\":  act_share * 100.0,\n",
-    "                        \"Internal PA (mm)\":  Z_mm,\n",
-    "                        \"External PA (mm)\":  E_mm,\n",
-    "                        \"Active Ext (mm)\":   A_mm,\n",
-    "                        \"Annual Return\":     ann_ret,\n",
-    "                        \"Annual Vol\":        ann_vol,\n",
-    "                        \"VaR 95\":            var_95,\n",
-    "                        \"TE (est.)\":         te,\n",
-    "                        \"Breach %\":          breach_pct\n",
-    "                    })\n",
-    "\n",
-    "                summary_df = pd.DataFrame(summary_rows)\n",
-    "                all_summaries.append(summary_df)\n",
-    "\n",
-    "                for key, df_r in raw_returns.items():\n",
-    "                    sheet_key = f\"{key}_α{int(ext_alpha*100)}_act{int(act_share*100)}\"\n",
-    "                    all_raw_returns[sheet_key] = df_r\n",
-    "\n",
-    "        final_summary = pd.concat(all_summaries, ignore_index=True)\n",
-    "\n",
-    "        inputs_dict = {\n",
-    "            \"Analysis mode\":                  \"alpha_shares\",\n",
-    "            \"External PA α fraction min (%)\": get_num(raw_params, \"external_pa_alpha_frac_min\", \"\"),\n",
-    "            \"External PA α fraction max (%)\": get_num(raw_params, \"external_pa_alpha_frac_max\", \"\"),\n",
-    "            \"External PA α fraction step (%)\":get_num(raw_params, \"external_pa_alpha_frac_step\", \"\"),\n",
-    "            \"Active share min (%)\":          get_num(raw_params, \"active_share_min\", \"\"),\n",
-    "            \"Active share max (%)\":          get_num(raw_params, \"active_share_max\", \"\"),\n",
-    "            \"Active share step (%)\":         get_num(raw_params, \"active_share_step\", \"\"),\n",
-    "            \"External PA capital (mm)\":      E_mm,\n",
-    "            \"Active Extension capital (mm)\": A_mm,\n",
-    "            \"Internal PA capital (mm)\":      Z_mm,\n",
-    "            \"Buffer multiple\":               buffer_multiple\n",
-    "        }\n",
-    "\n",
-    "        export_to_excel(inputs_dict, final_summary, all_raw_returns)\n",
-    "\n",
-    "        display_df = final_summary.copy()\n",
-    "        display_df = display_df.rename(columns={\n",
-    "            \"Annual Return\": \"Annual Return (%)\",\n",
-    "            \"Annual Vol\":    \"Annual Volatility (%)\",\n",
-    "            \"VaR 95\":        \"95%-VaR (%)\",\n",
-    "            \"TE (est.)\":     \"Tracking Error (%)\",\n",
-    "            \"Breach %\":      \"Breach Probability (%)\"\n",
-    "        })\n",
-    "        for col in [\"Annual Return (%)\", \"Annual Volatility (%)\", \"95%-VaR (%)\", \"Tracking Error (%)\", \"Breach Probability (%)\"]:\n",
-    "            display_df[col] = display_df[col].map(\"{:.1f}%\".format)\n",
-    "\n",
-    "        pd.set_option(\"display.max_rows\", None)\n",
-    "        print(\"\\n=== Summary Table (Alpha_Shares Mode) ===\\n\")\n",
-    "        print(display_df.to_string(index=False))\n",
-    "        print()\n",
-    "\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "ac9a590c-9b6b-4643-9cdd-33df412c3afe",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def export_everything_to_excel(\n",
-    "    inputs_dict: dict,\n",
-    "    summary_df: pd.DataFrame,\n",
-    "    raw_returns_dict: dict,\n",
-    "    index_csv_path: Path,\n",
-    "    python_code_path: Path,\n",
-    "    documentation_path: Path,\n",
-    "    output_filename: str = \"Everything.xlsx\"\n",
-    "):\n",
-    "    \"\"\"\n",
-    "    Write a single Excel workbook with multiple tabs:\n",
-    "      1) Inputs         → inputs_dict + a row for index_csv_path\n",
-    "      2) Summary        → summary_df\n",
-    "      3+) Raw Returns   → one sheet per key in raw_returns_dict\n",
-    "      n-1) Code        → full contents of python_code_path (one line/cell)\n",
-    "      n  ) Documentation → full contents of documentation_path (one line/cell)\n",
-    "\n",
-    "    - inputs_dict:      { parameter_name: value }\n",
-    "    - summary_df:       pandas DataFrame of human‐friendly summary (no index)\n",
-    "    - raw_returns_dict: { sheet_name: DataFrame } (each DataFrame indexed by Date)\n",
-    "    - index_csv_path:   Path to the index CSV file (we’ll dump that path into the Inputs tab)\n",
-    "    - python_code_path: Path to “portable_alpha_model.py”\n",
-    "    - documentation_path: Path to “model_documentation.md”\n",
-    "    - output_filename:  Name of the final Excel file to write\n",
-    "    \"\"\"\n",
-    "    # 1) Build a DataFrame for Inputs, inserting “Index CSV (full path)” at the top\n",
-    "    df_inputs = pd.DataFrame.from_dict(inputs_dict, orient=\"index\", columns=[\"Value\"])\n",
-    "    df_inputs.index.name = \"Parameter\"\n",
-    "    df_inputs.reset_index(inplace=True)\n",
-    "\n",
-    "    # Insert the index‐CSV row at the very top\n",
-    "    df_inputs.loc[-1] = [\"Index CSV (full path)\", str(index_csv_path)]\n",
-    "    df_inputs.index = df_inputs.index + 1\n",
-    "    df_inputs.sort_index(inplace=True)\n",
-    "\n",
-    "    # 2) Prepare to write everything into one Excel file\n",
-    "    with pd.ExcelWriter(output_filename, engine=\"openpyxl\") as writer:\n",
-    "        # --- Inputs tab ---\n",
-    "        df_inputs.to_excel(writer, sheet_name=\"Inputs\", index=False)\n",
-    "\n",
-    "        # --- Summary tab ---\n",
-    "        summary_df.to_excel(writer, sheet_name=\"Summary\", index=False)\n",
-    "\n",
-    "        # --- Raw Returns tabs ---\n",
-    "        # Excel limits sheet names to 31 characters; truncate if needed.\n",
-    "        for sheet_name, df_rr in raw_returns_dict.items():\n",
-    "            safe_name = sheet_name if len(sheet_name) <= 31 else sheet_name[:28] + \"...\"\n",
-    "            df_rr.to_excel(writer, sheet_name=safe_name, index=True)\n",
-    "\n",
-    "        # --- Code tab ---\n",
-    "        # Read the .py file line by line and dump into “Code” sheet, column A\n",
-    "        code_lines = Path(python_code_path).read_text(encoding=\"utf-8\").splitlines()\n",
-    "        wb = writer.book\n",
-    "        ws_code = wb.create_sheet(title=\"Code\")\n",
-    "        for row_idx, line in enumerate(code_lines, start=1):\n",
-    "            ws_code.cell(row=row_idx, column=1, value=line)\n",
-    "        # Widen column A so code is readable\n",
-    "        ws_code.column_dimensions[\"A\"].width = 100\n",
-    "        ws_code.sheet_view.showGridLines = False\n",
-    "\n",
-    "        # --- Documentation tab ---\n",
-    "        # Read the Markdown (or plain‐text) file and dump into “Documentation” sheet\n",
-    "        doc_lines = Path(documentation_path).read_text(encoding=\"utf-8\").splitlines()\n",
-    "        ws_doc = wb.create_sheet(title=\"Documentation\")\n",
-    "        for row_idx, line in enumerate(doc_lines, start=1):\n",
-    "            ws_doc.cell(row=row_idx, column=1, value=line)\n",
-    "        ws_doc.column_dimensions[\"A\"].width = 80\n",
-    "        ws_doc.sheet_view.showGridLines = False\n",
-    "\n",
-    "    print(f\"All tabs exported to {output_filename}.\")\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "0c1c9d5b-ff4f-4d5a-b810-e41fcea8aad3",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "        "
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
-   "id": "a3fd85fb-a02f-47f8-8d1b-e65f6b198013",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "\n"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "024d190f-8426-4d2b-9199-401b979a673f",
-   "metadata": {},
-   "source": []
-  },
-  {
-   "cell_type": "markdown",
-   "id": "2dad59d4-1066-41fc-ac4b-63b3e0ae41ff",
-   "metadata": {},
-   "source": [
-    "# ─── PLOTTING DISPATCH ────────────────────────────────────────────────────\n",
-    "\n",
-    "        if plot_heatmap_flag:\n",
-    "            pivot = final_summary.pivot(index=\"SD mult\", columns=\"Config\", values=\"Annual Return\")\n",
-    "            # Example: heatmap of SD mult vs Config (Base, ExternalPA, ActiveExt) → annual return\n",
-    "            X = np.arange(len(pivot.columns))\n",
-    "            Y = pivot.index.values\n",
-    "            Z = pivot.values\n",
-    "            fig, ax = plt.subplots(figsize=(6,5))\n",
-    "            hm = ax.imshow(\n",
-    "                Z,\n",
-    "                origin=\"lower\",\n",
-    "                aspect=\"auto\",\n",
-    "                cmap=\"viridis\",\n",
-    "                extent=[0, len(X)-1, Y.min(), Y.max()]\n",
-    "            )\n",
-    "            ax.set_xticks(X)\n",
-    "            ax.set_xticklabels(pivot.columns, rotation=45, ha=\"right\")\n",
-    "            ax.set_ylabel(\"SD mult\")\n",
-    "            ax.set_title(\"Heatmap: Annual Return vs Config & SD mult\")\n",
-    "            fig.colorbar(hm, ax=ax, label=\"Annual Return (decimal)\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_line_flag:\n",
-    "            # Line: For each Config, plot Annual Return vs SD mult\n",
-    "            fig, ax = plt.subplots(figsize=(6,4))\n",
-    "            for cfg in final_summary[\"Config\"].unique():\n",
-    "                sub = final_summary[final_summary[\"Config\"] == cfg]\n",
-    "                x_vals = sub[\"SD mult\"].values\n",
-    "                y_vals = sub[\"Annual Return\"].values * 100.0\n",
-    "                ax.plot(x_vals, y_vals, marker=\"o\", label=cfg)\n",
-    "            ax.set_xlabel(\"SD mult\")\n",
-    "            ax.set_ylabel(\"Annual Return (%)\")\n",
-    "            ax.set_title(\"Line: Return vs SD mult by Config\")\n",
-    "            ax.legend()\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_boxplot_flag:\n",
-    "            sample_key = list(all_raw_returns.keys())[0]\n",
-    "            data = all_raw_returns[sample_key].iloc[:, 0].values * 100.0\n",
-    "            fig, ax = plt.subplots(figsize=(5,4))\n",
-    "            ax.boxplot(data, labels=[sample_key])\n",
-    "            ax.set_ylabel(\"Monthly Return (%)\")\n",
-    "            ax.set_title(f\"Boxplot: {sample_key}\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_scatter_flag:\n",
-    "            fig, ax = plt.subplots(figsize=(5,4))\n",
-    "            te_vals     = final_summary[\"Tracking Error (%)\"].astype(float) * 100.0\n",
-    "            breach_vals = final_summary[\"Breach %\"].astype(float)\n",
-    "            ax.scatter(te_vals, breach_vals, alpha=0.6)\n",
-    "            ax.set_xlabel(\"Tracking Error (%)\")\n",
-    "            ax.set_ylabel(\"Breach Probability (%)\")\n",
-    "            ax.set_title(\"Scatter: TE vs Breach Probability\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_time_series_flag:\n",
-    "            threshold = -buffer_multiple * idx_sigma\n",
-    "            sample_key = list(all_raw_returns.keys())[0]\n",
-    "            df_path = all_raw_returns[sample_key]\n",
-    "            fig, ax = plt.subplots(figsize=(6,3))\n",
-    "            ax.plot(df_path.index, df_path.iloc[:, 0], label=sample_key)\n",
-    "            ax.axhline(y=threshold, color=\"red\", linestyle=\"--\", label=\"Threshold\")\n",
-    "            ax.set_title(f\"Time Series (first-sim) for {sample_key}\")\n",
-    "            ax.set_xlabel(\"Month\")\n",
-    "            ax.set_ylabel(\"Monthly return\")\n",
-    "            ax.legend()\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_histogram_flag:\n",
-    "            sample_key = list(all_raw_returns.keys())[0]\n",
-    "            data = all_raw_returns[sample_key].iloc[:, 0].values * 100.0\n",
-    "            fig, ax = plt.subplots(figsize=(5,4))\n",
-    "            ax.hist(data, bins=30, alpha=0.7)\n",
-    "            ax.set_xlabel(\"Monthly Return (%)\")\n",
-    "            ax.set_ylabel(\"Frequency\")\n",
-    "            ax.set_title(f\"Histogram: {sample_key}\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_surface_flag:\n",
-    "            xv = sorted(final_summary[\"SD mult\"].unique())\n",
-    "            configs = final_summary[\"Config\"].unique()\n",
-    "            Z = final_summary.pivot(index=\"SD mult\", columns=\"Config\", values=\"Breach %\").values\n",
-    "            X, Y = np.meshgrid(np.array(range(len(configs))), np.array(xv))\n",
-    "            fig = plt.figure(figsize=(6,5))\n",
-    "            ax3 = fig.add_subplot(111, projection=\"3d\")\n",
-    "            surf = ax3.plot_surface(X, Y, Z, cmap=\"viridis\", edgecolor=\"none\")\n",
-    "            ax3.set_xticks(range(len(configs)))\n",
-    "            ax3.set_xticklabels(configs, rotation=45, ha=\"right\")\n",
-    "            ax3.set_ylabel(\"SD mult\")\n",
-    "            ax3.set_zlabel(\"Breach %\")\n",
-    "            ax3.set_title(\"Surface: Breach vs Config & SD mult\")\n",
-    "            fig.colorbar(surf, shrink=0.5, aspect=5, label=\"Breach %\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "    else:\n",
-    "        raise RuntimeError(f\"Unexpected analysis mode: '{analysis_mode}'\")"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "828a3d69-ce6a-4a9c-b617-12b9c328b119",
-   "metadata": {},
-   "source": [
-    "# Portable Alpha + Active Extension Model Specification\n",
-    "\n",
-    "Below is a comprehensive description of the updated portable‐alpha + active‐extension model, ready to paste into a Markdown cell. Every section is clearly labeled, and all equations use LaTeX delimiters.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 1. Purpose and High-Level Overview\n",
-    "\n",
-    "**Goal:**  \n",
-    "Construct a Monte Carlo framework that allocates a fixed pool of capital (e.g. \\$1 b) across three “sleeves” (Internal, External Portable-Alpha, and Active Extension), simulates joint returns on Index, In-House α, Extension α, and External PA α, and then reports portfolio metrics (annual return, volatility, VaR, tracking error, breach probability).\n",
-    "\n",
-    "Key innovations vs. a simpler portable-alpha model:  \n",
-    "1. **Separate “reference period”** used to compute index volatility σₙ, which in turn determines the cash/margin needed to synthetically hold 1:1 index exposure.  \n",
-    "2. **Three explicit buckets** whose dollar-amounts sum to \\$ 1 b, avoiding any double-counting of β + α exposures.  \n",
-    "3. **Active Extension bucket** that can be “150/50” or “170/70” long/short, specified by an “Active share (%)” input. By default, we assume 150/50 (i.e. Active share = 50 %) unless the user overrides.\n",
-    "\n",
-    "Everything ultimately flows into a set of formulas—one per bucket—that map monthly draws of\n",
-    "\\[\n",
-    "(r_{\\beta},\\,r_{H},\\,r_{E},\\,r_{M}) \n",
-    "\\quad\\text{and}\\quad\n",
-    "f_t\n",
-    "\\]\n",
-    "into portfolio returns.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 2. Core Assumptions and Variables\n",
-    "\n",
-    "1. **Index (β) returns**  \n",
-    "   - We load a historical time series of monthly total returns on the S&P 500 TR (or whichever index) from a CSV.  \n",
-    "   - We partition that series into:  \n",
-    "     1. A **reference window** (e.g. 2010 – 2014) used to compute “reference volatility” σₙ.  \n",
-    "     2. An **analysis window** (e.g. 2015 – 2020) used to compute the actual mean (μₙ) and volatility (σₙ) that drive our Monte Carlo draws.\n",
-    "\n",
-    "2. **Three α-streams** (simulated jointly with β)  \n",
-    "   - **In-House α** \\($r_H$\\):  \n",
-    "     - Mean = μ_H/12  \n",
-    "     - Vol = σ_H / √12  \n",
-    "     - Correlation ρ_{β,H} with β.  \n",
-    "   - **Extension α** \\($r_E$\\):  \n",
-    "     - Mean = μ_E/12  \n",
-    "     - Vol = σ_E / √12  \n",
-    "     - Correlation ρ_{β,E} with β.  \n",
-    "   - **External PA α** \\($r_M$\\):  \n",
-    "     - Mean = μ_M/12  \n",
-    "     - Vol = σ_M / √12  \n",
-    "     - Correlation ρ_{β,M} with β.\n",
-    "\n",
-    "3. **Financing spread** \\($f_t$\\)  \n",
-    "   - A month-by-month random draw around a drift (financing_mean/12) with vol (financing_vol/12) and occasional jumps of size (spike_factor × (financing_vol/12)), happening with probability spike_prob.  \n",
-    "   - In each month, any bucket that holds \\((r_{\\beta} − f_t)\\) is charged that financing cost.\n",
-    "\n",
-    "4. **Total fund capital** (in millions, default = 1000)  \n",
-    "   - We allocate exactly \\$ 1 b across three buckets (plus any residual “cash-leftover” after margin).\n",
-    "\n",
-    "5. **Standard-deviation multiple** (sd_of_vol_mult, default = 3)  \n",
-    "   - “To hold \\$ 1 b of index exposure, you must keep aside cash = σₙ × (sd_of_vol_mult) × \\$ 1 b.”  \n",
-    "   - That cash is the **internal beta-backing** or “margin cash,” needed for futures/swaps.\n",
-    "\n",
-    "6. **Three capital buckets** (all in \\$ mm, must sum to 1000)  \n",
-    "   1. **External PA capital** \\($X$\\)  \n",
-    "      - Manager takes \\$ X m; buys \\$ X m of index (β) and \\((external_pa_alpha_frac × X m)\\) of α.  \n",
-    "      - Default α fraction = 50 % (\\(\\theta_{\\mathrm{ExtPA}}=0.50\\)).  \n",
-    "   2. **Active Extension capital** \\($Y$\\)  \n",
-    "      - Manager runs a long/short portfolio with **Active share** \\(S\\).  \n",
-    "      - By default, “150/50” means \\(S=0.50\\) (i.e. 150 % long, 50 % short → net 100 %).  \n",
-    "   3. **Internal PA capital** \\($Z$\\)  \n",
-    "      - Runs in-house α; the remainder of internal cash (beyond margin) is used here.\n",
-    "\n",
-    "7. **Internal beta backing** \\($W$\\) (computed, not user-entered)  \n",
-    "   \\[\n",
-    "     W = \\sigma_{\\text{ref}} \\times (\\mathrm{sd\\_of\\_vol\\_mult}) \\times 1000 \\quad (\\text{\\$ mm}).\n",
-    "   \\]\n",
-    "   - That cash sits in reserve to back a \\$ 1 b index position via futures/swaps.  \n",
-    "   - Because the external PA and active-extension managers each hold index exposure “inside” their \\$ X m or \\$ Y m, **you do not hold margin for that portion**. You only hold \\(W\\) for the total \\$ 1 b.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 3. Capital-Allocation Equations\n",
-    "\n",
-    "1. **Check**:  \n",
-    "   \\[\n",
-    "     X + Y + Z \\;=\\; 1000 \\quad(\\text{\\$ mm}),\n",
-    "   \\]  \n",
-    "   where  \n",
-    "   - \\(X = \\text{external\\_pa\\_capital},\\)  \n",
-    "   - \\(Y = \\text{active\\_ext\\_capital},\\)  \n",
-    "   - \\(Z = \\text{internal\\_pa\\_capital}.\\)\n",
-    "\n",
-    "2. **Margin (internal beta backing)**:  \n",
-    "   \\[\n",
-    "     W = \\sigma_{\\text{ref}} \\times (\\mathrm{sd\\_of\\_vol\\_mult}) \\times 1000 \\quad (\\text{\\$ mm}).\n",
-    "   \\]\n",
-    "\n",
-    "3. **Internal cash leftover (runs In-House PA)**:  \n",
-    "   \\[\n",
-    "     \\text{internal\\_cash\\_leftover} \n",
-    "     = 1000 - W - Z \\quad (\\text{\\$ mm}).\n",
-    "   \\]\n",
-    "\n",
-    "   - If \\(W + Z > 1000\\), the capital structure is infeasible (you cannot hold margin + in-house PA + external buckets all on \\$ 1 b).\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 4. Return Equations\n",
-    "\n",
-    "We simulate, for each month \\(t\\):\n",
-    "\n",
-    "\\[\n",
-    "(r_{\\beta,t},\\,r_{H,t},\\,r_{E,t},\\,r_{M,t}) \n",
-    "\\;\\sim\\;\\text{MVN}\\bigl([\\mu_{\\beta},\\,\\mu_H,\\,\\mu_E,\\,\\mu_M],\\,\\Sigma\\bigr),\n",
-    "\\]\n",
-    "with\n",
-    "- \\(\\mu_{\\beta} = \\mu_{\\text{idx}}\\) (monthly mean from analysis window),  \n",
-    "- \\(\\mu_H = \\frac{\\mu_H^{(\\text{annual})}}{12}\\),  \n",
-    "- \\(\\mu_E = \\frac{\\mu_E^{(\\text{annual})}}{12}\\),  \n",
-    "- \\(\\mu_M = \\frac{\\mu_M^{(\\text{annual})}}{12}\\).  \n",
-    "\n",
-    "Covariance \\(\\Sigma\\) built from:  \n",
-    "- \\(\\sigma_{\\beta} = \\sigma_{\\text{ref}}\\) (monthly vol from reference window),  \n",
-    "- \\(\\sigma_H = \\sigma_H^{(\\text{annual})}/\\sqrt{12}\\),  \n",
-    "- \\(\\sigma_E = \\sigma_E^{(\\text{annual})}/\\sqrt{12}\\),  \n",
-    "- \\(\\sigma_M = \\sigma_M^{(\\text{annual})}/\\sqrt{12}\\),  \n",
-    "- Pairwise correlations \\(\\rho_{\\beta,H},\\,\\rho_{\\beta,E},\\,\\rho_{\\beta,M},\\,\\rho_{H,E},\\,\\dots\\).  \n",
-    "\n",
-    "Additionally, each month we draw a financing cost:\n",
-    "\\[\n",
-    "f_t = \\frac{\\text{financing_mean}}{12} + \\varepsilon_t,\\quad\n",
-    "\\varepsilon_t \\sim \\mathcal{N}\\bigl(0,\\;(\\tfrac{\\text{financing_vol}}{12})^2\\bigr),\n",
-    "\\]\n",
-    "with probability \\(\\text{spike_prob}\\) of a jump \\(=\\text{spike_factor} \\times \\frac{\\text{financing_vol}}{12}\\).\n",
-    "\n",
-    "---\n",
-    "\n",
-    "### 4.1. Base (All In-House) Strategy\n",
-    "\n",
-    "\\[\n",
-    "R_{\\text{Base},t}\n",
-    "= \\; (r_{\\beta,t} - f_t)\\,\\times\\,w_{\\beta_H}\n",
-    "\\;+\\; r_{H,t}\\,\\times\\,w_{\\alpha_H}.\n",
-    "\\]\n",
-    "By default, \\(w_{\\beta_H} = 0.50\\) and \\(w_{\\alpha_H} = 0.50\\).\n",
-    "\n",
-    "---\n",
-    "\n",
-    "### 4.2. External PA Strategy\n",
-    "\n",
-    "- Capital allocated: \\(X = \\text{external_pa_capital}\\).  \n",
-    "- Manager buys \\$ X m of index (β) and allocates \\(\\theta_{\\mathrm{ExtPA}} = \\text{external_pa_alpha_frac}\\) of that \\$ X m to α.  \n",
-    "\n",
-    "Return formula:\n",
-    "\\[\n",
-    "R_{\\text{ExtPA},t}\n",
-    "= \\underbrace{\\frac{X}{1000}}_{w_{\\beta}^{\\text{ExtPA}}}\\,(r_{\\beta,t} - f_t)\n",
-    "\\;+\\;\\underbrace{\\tfrac{X}{1000} \\,\\times\\,\\theta_{\\mathrm{ExtPA}}}_{w_{\\alpha}^{\\text{ExtPA}}}\\;(r_{M,t}).\n",
-    "\\]\n",
-    "- If \\(\\theta_{\\mathrm{ExtPA}} = 0.50\\), then half of \\$ X m is alpha, half is index.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "### 4.3. Active Extension Strategy\n",
-    "\n",
-    "- Capital allocated: \\(Y = \\text{active_ext_capital}\\).  \n",
-    "- Manager runs a long/short portfolio with **Active share** \\(S = \\frac{\\text{active_share_percent}}{100}\\).  \n",
-    "  - E.g. 150/50 → \\(S = 0.50\\).  \n",
-    "  - 170/70 → \\(S = 0.70\\).\n",
-    "\n",
-    "Return formula:\n",
-    "\\[\n",
-    "R_{\\text{ActExt},t}\n",
-    "= \\underbrace{\\frac{Y}{1000}}_{w_{\\beta}^{\\text{ActExt}}}\\,(r_{\\beta,t} - f_t)\n",
-    "\\;+\\;\\underbrace{\\frac{Y}{1000}\\,\\times\\,S}_{w_{\\alpha}^{\\text{ActExt}}}\\;(r_{E,t}).\n",
-    "\\]\n",
-    "- The manager’s long/short is embedded in \\(r_{E,t}\\).  \n",
-    "\n",
-    "---\n",
-    "\n",
-    "### 4.4. Internal Margin & Internal PA\n",
-    "\n",
-    "Because both external PA and active-extension managers hold their own index exposure, on your books you only need to hold margin for a single \\$ 1 b of index. That is:\n",
-    "\\[\n",
-    "W = \\sigma_{\\text{ref}} \\times (\\mathrm{sd\\_of\\_vol\\_mult}) \\times 1000 \\quad (\\text{\\$ mm}).\n",
-    "\\]\n",
-    "Then you also decide to run \\(Z = \\text{internal_pa_capital}\\) in-house PA:\n",
-    "\n",
-    "- **Internal Beta (margin):**  \n",
-    "  \\[\n",
-    "  R_{\\text{IntBet},t}\n",
-    "  = \\Bigl(\\tfrac{W}{1000}\\Bigr)\\,(r_{\\beta,t} - f_t).\n",
-    "  \\]\n",
-    "- **Internal PA alpha:**  \n",
-    "  \\[\n",
-    "  R_{\\text{IntPA},t}\n",
-    "  = \\Bigl(\\tfrac{Z}{1000}\\Bigr)\\,(r_{H,t}).\n",
-    "  \\]\n",
-    "- **Internal cash leftover:**  \n",
-    "  \\[\n",
-    "  \\text{internal\\_cash\\_leftover} = 1000 - W - Z \\quad (\\text{if positive, earns 0}).\n",
-    "  \\]\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 5. Putting It All Together in Simulation\n",
-    "\n",
-    "1. **Read user inputs** (via `load_parameters()`):\n",
-    "   - Dates: `start_date`, `end_date`, `ref_start_date`, `ref_end_date`\n",
-    "   - Vol/risk: `sd_of_vol_mult`\n",
-    "   - Returns: `financing_mean`, `financing_vol`, `μ_H`, `σ_H`, `μ_E`, `σ_E`, `μ_M`, `σ_M`\n",
-    "   - Correlations: `ρ_{β,H}`, `ρ_{β,E}`, `ρ_{β,M}`, `ρ_{H,E}`, `ρ_{H,M}`, `ρ_{E,M}`\n",
-    "   - Capital buckets: `external_pa_capital`, `external_pa_alpha_frac`, `active_ext_capital`, `active_share_percent`, `internal_pa_capital`\n",
-    "   - Total fund capital (mm): default = 1000\n",
-    "\n",
-    "2. **Load index CSV** → `idx_full` (monthly total returns).\n",
-    "\n",
-    "3. **Filter**  \n",
-    "   - **`idx_series`** = `idx_full[ start_date : end_date ]` → used for μ_β and σ_β.  \n",
-    "   - **`idx_ref`** = `idx_full[ ref_start_date : ref_end_date ]` → used for σ_ref.\n",
-    "\n",
-    "4. **Compute**  \n",
-    "   \\[\n",
-    "     \\mu_{\\beta} = \\mathrm{mean}(idx\\_series), \n",
-    "     \\quad\n",
-    "     \\sigma_{\\beta} = \\mathrm{std}(idx\\_series),\n",
-    "     \\quad\n",
-    "     \\sigma_{\\text{ref}} = \\mathrm{std}(idx\\_ref).\n",
-    "   \\]\n",
-    "\n",
-    "5. **Margin-backing**  \n",
-    "   \\[\n",
-    "     W = \\sigma_{\\text{ref}} \\times \\mathrm{sd\\_of\\_vol\\_mult} \\times 1000.\n",
-    "   \\]\n",
-    "   If \\(W + Z > 1000\\), error. Else compute\n",
-    "   \\[\n",
-    "     \\text{internal\\_cash\\_leftover} = 1000 - W - Z.\n",
-    "   \\]\n",
-    "\n",
-    "6. **Build covariance matrix** \\(\\Sigma\\) for \\((r_{\\beta}, r_H, r_E, r_M)\\) using  \n",
-    "   \\(\\sigma_{\\beta} = \\sigma_{\\text{ref}},\\; \\sigma_H = \\frac{\\sigma_H^{(\\text{annual})}}{\\sqrt{12}},\\; \\sigma_E = \\frac{\\sigma_E^{(\\text{annual})}}{\\sqrt{12}},\\; \\sigma_M = \\frac{\\sigma_M^{(\\text{annual})}}{\\sqrt{12}},\\)  \n",
-    "   and correlations.\n",
-    "\n",
-    "7. **Monte Carlo draws**:  \n",
-    "   For each of \\(N_{\\text{SIMULATIONS}}\\) trials, simulate a \\(T=N_{\\text{MONTHS}}\\)-month path of \\(\\,(r_{\\beta,t},\\,r_{H,t},\\,r_{E,t},\\,r_{M,t})\\) and financing \\(f_t\\).\n",
-    "\n",
-    "8. **Compute monthly returns** for each bucket:\n",
-    "   - **Base**:  \n",
-    "     \\[\n",
-    "       R_{\\text{Base},t} \n",
-    "       = (r_{\\beta,t} - f_t)\\,w_{\\beta_H} \\;+\\; r_{H,t}\\,w_{\\alpha_H}.\n",
-    "     \\]\n",
-    "   - **External PA**:  \n",
-    "     \\[\n",
-    "       R_{\\text{ExtPA},t} \n",
-    "       = \\bigl(\\tfrac{X}{1000}\\bigr)(r_{\\beta,t} - f_t) \n",
-    "       \\;+\\; \\bigl(\\tfrac{X}{1000}\\,\\theta_{\\mathrm{ExtPA}}\\bigr)(r_{M,t}).\n",
-    "     \\]\n",
-    "   - **Active Extension**:  \n",
-    "     \\[\n",
-    "       R_{\\text{ActExt},t} \n",
-    "       = \\bigl(\\tfrac{Y}{1000}\\bigr)(r_{\\beta,t} - f_t) \n",
-    "       \\;+\\; \\bigl(\\tfrac{Y}{1000}\\,S\\bigr)(r_{E,t}).\n",
-    "     \\]\n",
-    "   - **Internal Beta**:  \n",
-    "     \\[\n",
-    "       R_{\\text{IntBet},t} \n",
-    "       = \\bigl(\\tfrac{W}{1000}\\bigr)(r_{\\beta,t} - f_t).\n",
-    "     \\]\n",
-    "   - **Internal PA α**:  \n",
-    "     \\[\n",
-    "       R_{\\text{IntPA},t} \n",
-    "       = \\bigl(\\tfrac{Z}{1000}\\bigr)(r_{H,t}).\n",
-    "     \\]\n",
-    "\n",
-    "   Note: We only report three portfolios—“Base,” “ExternalPA,” and “ActiveExt.” Each one compounds its own monthly returns for a 12-month horizon:\n",
-    "   \\[\n",
-    "     R_{\\text{bucket}}^{\\text{(year)}} \n",
-    "     = \\prod_{t=1}^{12} (1 + R_{\\text{bucket},t}) - 1.\n",
-    "   \\]\n",
-    "\n",
-    "9. **Compute performance metrics** for each portfolio’s annual returns:\n",
-    "   - **Ann Return** = sample mean.  \n",
-    "   - **Ann Vol** = sample standard deviation.  \n",
-    "   - **VaR 95%** = 5th percentile.  \n",
-    "   - **Tracking Error** = std of (bucket_return − index_return).  \n",
-    "   - **Breach Probability** = % of months (in the first sim path) where \\((r_{\\text{bucket},t} < -\\,\\mathrm{buffer\\_multiple}\\times\\sigma_{\\beta})\\).\n",
-    "\n",
-    "10. **Export**  \n",
-    "    - **Inputs sheet:** all parameters (dates, vol caps, bucket sizes, α fractions, active share, σ_ref, W, internal cash leftover, etc.).  \n",
-    "    - **Summary sheet:** metrics for “Base,” “ExternalPA,” and “ActiveExt.”  \n",
-    "    - **Raw returns sheets:** monthly paths for each bucket (first simulation) so users can inspect breach months.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 6. Input Parameters Summary\n",
-    "\n",
-    "Below is a consolidated list of every input variable that must appear in the “friendly” CSV:\n",
-    "\n",
-    "1. **Date ranges**  \n",
-    "   - `Start date` → `start_date` (analysis window begin).  \n",
-    "   - `End date` → `end_date` (analysis window end).  \n",
-    "   - `Reference start date` → `ref_start_date` (for σ_ref).  \n",
-    "   - `Reference end date` → `ref_end_date` (for σ_ref).  \n",
-    "\n",
-    "2. **Financing parameters**  \n",
-    "   - `Annual financing mean (%)` → `financing_mean_annual` (default = 0.50 %).  \n",
-    "   - `Annual financing vol (%)` → `financing_vol_annual` (default = 0.10 %).  \n",
-    "   - `Monthly spike probability` → `spike_prob` (default = 2 %).  \n",
-    "   - `Spike size (σ × multiplier)` → `spike_factor` (default = 2.25).  \n",
-    "\n",
-    "3. **In-House PA parameters**  \n",
-    "   - `In-House annual return (%)` → `mu_H` (default = 4.00 %).  \n",
-    "   - `In-House annual vol (%)` → `sigma_H` (default = 1.00 %).  \n",
-    "   - `In-House β` → `w_beta_H` (default = 0.50).  \n",
-    "   - `In-House α` → `w_alpha_H` (default = 0.50).  \n",
-    "\n",
-    "4. **Extension α parameters**  \n",
-    "   - `Alpha-Extension annual return (%)` → `mu_E` (default = 5.00 %).  \n",
-    "   - `Alpha-Extension annual vol (%)` → `sigma_E` (default = 2.00 %).  \n",
-    "   - `Active Extension capital (mm)` → `active_ext_capital` (default = 0).  \n",
-    "   - `Active share (%)` → `active_share_percent` (default = 50 % ⇒ a 150/50 program).  \n",
-    "\n",
-    "5. **External PA α parameters**  \n",
-    "   - `External annual return (%)` → `mu_M` (default = 3.00 %).  \n",
-    "   - `External annual vol (%)` → `sigma_M` (default = 2.00 %).  \n",
-    "   - `External PA capital (mm)` → `external_pa_capital` (default = 0).  \n",
-    "   - `External PA α fraction (%)` → `external_pa_alpha_frac` (default = 50 %).  \n",
-    "\n",
-    "6. **Correlations**  \n",
-    "   - `Corr index–In-House` → `rho_idx_H` (default = 0.05).  \n",
-    "   - `Corr index–Alpha-Extension` → `rho_idx_E` (default = 0.00).  \n",
-    "   - `Corr index–External` → `rho_idx_M` (default = 0.00).  \n",
-    "   - `Corr In-House–Alpha-Extension` → `rho_H_E` (default = 0.10).  \n",
-    "   - `Corr In-House–External` → `rho_H_M` (default = 0.10).  \n",
-    "   - `Corr Alpha-Extension–External` → `rho_E_M` (default = 0.00).  \n",
-    "\n",
-    "7. **Capital & risk backing**  \n",
-    "   - `Total fund capital (mm)` → `total_fund_capital` (default = 1000).  \n",
-    "   - `Standard deviation multiple` → `sd_of_vol_mult` (default = 3).  \n",
-    "   - `Internal PA capital (mm)` → `internal_pa_capital` (default = 0).  \n",
-    "   - `Buffer multiple` → `buffer_multiple` (default = 3).  \n",
-    "\n",
-    "8. **Legacy/Optional**  \n",
-    "   - `X grid (mm)` → `X_grid_list` (list of X values).  \n",
-    "   - `External manager α fractions` → `EM_thetas_list`.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 7. Output Considerations\n",
-    "\n",
-    "1. **Inputs sheet (Excel):**  \n",
-    "   List every single parameter, including:  \n",
-    "   - Date windows (analysis and reference),  \n",
-    "   - Financing parameters,  \n",
-    "   - α-stream parameters,  \n",
-    "   - Correlations,  \n",
-    "   - Capital buckets (X, Y, Z),  \n",
-    "   - SD multiple, margin backing \\(W\\), internal cash leftover,  \n",
-    "   - Active share, etc.\n",
-    "\n",
-    "2. **Summary sheet (Excel):**  \n",
-    "   For each portfolio (“Base,” “ExternalPA,” “ActiveExt”), show:  \n",
-    "   - Annual Return (%),  \n",
-    "   - Annual Volatility (%),  \n",
-    "   - 95 % VaR (%),  \n",
-    "   - Tracking Error (%),  \n",
-    "   - Breach Probability (%).\n",
-    "\n",
-    "3. **Raw returns sheets (Excel):**  \n",
-    "   Monthly paths for each bucket (first simulation), so users can inspect “breach” months where \\(R_{t} < -(\\text{buffer_multiple} × σ_{\\beta})\\).\n",
-    "\n",
-    "4. **Console output:**  \n",
-    "   A “human‐friendly” summary, e.g.:  \n",
-    "   > For “ExternalPA (X = 300, 50 % α)”:  \n",
-    "   > • Expected annual return: 10.2 %  \n",
-    "   > • Annual volatility: 12.3 %  \n",
-    "   > • 95 % VaR: −3.4 %  \n",
-    "   > • Tracking error: 8.7 %  \n",
-    "   > • Breach probability: 2.0 %.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 8. Intuition Behind Key Pieces\n",
-    "\n",
-    "1. **Why a separate reference period?**  \n",
-    "   - If you measure index volatility over the same window you analyze (e.g. 2015–2020), you capture “current regime” vol. Often, managers prefer a longer/different window (e.g. 2010–2014) to gauge typical funding volatility. That reference σₙ, times a multiple (e.g. 3×), tells you how much cash to set aside to back \\$ 1 b of index exposure.\n",
-    "\n",
-    "2. **Why Active share as a percentage?**  \n",
-    "   - A “150/50” program has 150 % long and 50 % short = net 100 %. Its “active share” is reported as 50 %.  \n",
-    "   - If you want “170/70,” then active share = 70 %.  \n",
-    "   - The code converts “Active share (%)” to decimal \\(S\\). For a 150/50 program, the default is 50 % (\\(S = 0.50\\)).\n",
-    "\n",
-    "3. **Why each bucket’s formula ensures no double-counting**  \n",
-    "   - Whenever you give \\$ X m to External PA, that manager holds the index exposure on your behalf. You do not hold margin for that portion. Similarly, the Active Extension manager holds their own index.  \n",
-    "   - On your books, you only need to hold margin for a single \\$ 1 b index. That is \\(W\\).  \n",
-    "   - Once you hand \\$ X m to external PA and \\$ Y m to active ext, **both managers** hold \\((X + Y)\\) of index on your behalf. So your margin \\(W\\) backs the *entire* \\$ 1 b, not just the “leftover” portion.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 9. Step-by-Step Implementation Checklist\n",
-    "\n",
-    "1. **Read and parse user parameters** (dates, vols, α fractions, active share, capital buckets, etc.).  \n",
-    "2. **Load index CSV** → `idx_full`.  \n",
-    "3. **Filter** → `idx_ref` for σ_ref; `idx_series` for μ_β and σ_β.  \n",
-    "4. **Compute**:  \n",
-    "   \\[\n",
-    "     μ_β = \\mathrm{mean}(idx\\_series), \n",
-    "     \\quad\n",
-    "     σ_β = \\mathrm{std}(idx\\_series), \n",
-    "     \\quad\n",
-    "     σ_{\\text{ref}} = \\mathrm{std}(idx\\_ref).\n",
-    "   \\]\n",
-    "5. **Margin-backing**:  \n",
-    "   \\[\n",
-    "     W = σ_{\\text{ref}} × (\\mathrm{sd\\_of\\_vol\\_mult}) × 1000.\n",
-    "   \\]\n",
-    "   Check \\(W + Z ≤ 1000\\). Compute leftover internal cash = \\(1000 - W - Z\\).\n",
-    "\n",
-    "6. **Build covariance matrix** using \\((σ_{\\text{ref}},\\,σ_H/√{12},\\,σ_E/√{12},\\,σ_M/√{12})\\) plus correlations.\n",
-    "\n",
-    "7. **Monte Carlo draws**:  \n",
-    "   For each of \\(N_{\\mathrm{SIM}}\\) trials, simulate a path of length \\(T = N_{\\mathrm{MONTHS}}\\) for \\((r_{\\beta,t},\\,r_{H,t},\\,r_{E,t},\\,r_{M,t})\\) and financing \\(f_t\\).\n",
-    "\n",
-    "8. **Compute monthly returns**:\n",
-    "   - **Base**:  \n",
-    "     \\[\n",
-    "       R_{\\text{Base},t} = (r_{\\beta,t} - f_t)\\,w_{\\beta_H} + r_{H,t}\\,w_{\\alpha_H}.\n",
-    "     \\]\n",
-    "   - **External PA**:  \n",
-    "     \\[\n",
-    "       R_{\\text{ExtPA},t}\n",
-    "       = \\Bigl(\\tfrac{X}{1000}\\Bigr)(r_{\\beta,t} - f_t)\n",
-    "       \\;+\\;\\Bigl(\\tfrac{X}{1000}\\,\\theta_{\\mathrm{ExtPA}}\\Bigr)(r_{M,t}).\n",
-    "     \\]\n",
-    "   - **Active Extension**:  \n",
-    "     \\[\n",
-    "       R_{\\text{ActExt},t}\n",
-    "       = \\Bigl(\\tfrac{Y}{1000}\\Bigr)(r_{\\beta,t} - f_t)\n",
-    "       \\;+\\;\\Bigl(\\tfrac{Y}{1000}\\,S\\Bigr)(r_{E,t}).\n",
-    "     \\]\n",
-    "   - **Internal Beta**:  \n",
-    "     \\[\n",
-    "       R_{\\text{IntBet},t} \n",
-    "       = \\Bigl(\\tfrac{W}{1000}\\Bigr)(r_{\\beta,t} - f_t).\n",
-    "     \\]\n",
-    "   - **Internal PA α**:  \n",
-    "     \\[\n",
-    "       R_{\\text{IntPA},t} \n",
-    "       = \\Bigl(\\tfrac{Z}{1000}\\Bigr)(r_{H,t}).\n",
-    "     \\]\n",
-    "\n",
-    "9. **Aggregate monthly → annual returns** for “Base,” “ExternalPA,” “ActiveExt.”  \n",
-    "10. **Compute metrics**:  \n",
-    "    - Ann Return, Ann Vol, VaR 95, Tracking Error, Breach Probability.  \n",
-    "11. **Export** Inputs, Summary, Raw returns to Excel + print narrative.\n",
-    "\n",
-    "---"
-   ]
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python (base)",
-   "language": "python",
-   "name": "base"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.12.2"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
diff --git a/.ipynb_checkpoints/Portable_Alpha_Modes-checkpoint.ipynb b/.ipynb_checkpoints/Portable_Alpha_Modes-checkpoint.ipynb
deleted file mode 100644
index 47996f999e956b765e670b69125a205ebe6082e9..0000000000000000000000000000000000000000
--- a/.ipynb_checkpoints/Portable_Alpha_Modes-checkpoint.ipynb
+++ /dev/null
@@ -1,1814 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "markdown",
-   "id": "094e50b2-1387-44d0-b1ca-c10c0db9289e",
-   "metadata": {},
-   "source": [
-    "**_🚨 IMPORTANT: BEFORE RUNNING THE PROGRAM, SAVE THIS SHEET AS A CSV FILE! 🚨_**\n",
-    "\n",
-    "import pandas as pd\n",
-    "\n",
-    "rows = [\n",
-    "    (\"Parameter\", \"Value\", \"Notes\"),  # Header row\n",
-    "    (\"Analysis mode\", \"\", \"Choose one: capital, returns, alpha_shares, vol_mult\"),\n",
-    "    # Capital mode\n",
-    "    (\"Max external combined (%)\", \"\", \"capital mode: max % for (External PA + Active Ext)\"),\n",
-    "    (\"External step size (%)\", \"\", \"capital mode: increment for external %\"),\n",
-    "    # Fixed capital (for returns / alpha_shares / vol_mult)\n",
-    "    (\"External PA capital (mm)\", \"\", \"returns/alpha_shares/vol_mult modes: allocation in mm\"),\n",
-    "    (\"Active Extension capital (mm)\", \"\", \"\"),\n",
-    "    (\"Internal PA capital (mm)\", \"\", \"\"),\n",
-    "    # Returns mode ranges (min/max/step)\n",
-    "    (\"In-House return min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"In-House return max (%)\", \"\", \"\"),\n",
-    "    (\"In-House return step (%)\", \"\", \"\"),\n",
-    "    (\"In-House vol min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"In-House vol max (%)\", \"\", \"\"),\n",
-    "    (\"In-House vol step (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension return min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"Alpha-Extension return max (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension return step (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension vol min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"Alpha-Extension vol max (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension vol step (%)\", \"\", \"\"),\n",
-    "    (\"External return min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"External return max (%)\", \"\", \"\"),\n",
-    "    (\"External return step (%)\", \"\", \"\"),\n",
-    "    (\"External vol min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"External vol max (%)\", \"\", \"\"),\n",
-    "    (\"External vol step (%)\", \"\", \"\"),\n",
-    "    # Alpha_Shares mode ranges\n",
-    "    (\"External PA α fraction min (%)\", \"\", \"alpha_shares mode\"),\n",
-    "    (\"External PA α fraction max (%)\", \"\", \"\"),\n",
-    "    (\"External PA α fraction step (%)\", \"\", \"\"),\n",
-    "    (\"Active share min (%)\", \"\", \"alpha_shares mode\"),\n",
-    "    (\"Active share max (%)\", \"\", \"\"),\n",
-    "    (\"Active share step (%)\", \"\", \"\"),\n",
-    "    # Vol_Mult mode ranges\n",
-    "    (\"SD multiple min\", \"\", \"vol_mult mode\"),\n",
-    "    (\"SD multiple max\", \"\", \"\"),\n",
-    "    (\"SD multiple step\", \"\", \"\"),\n",
-    "    # Financing & overrides\n",
-    "    (\"Annual financing mean (%)\", \"\", \"global financing\"),\n",
-    "    (\"Annual financing vol (%)\", \"\", \"\"),\n",
-    "    (\"Monthly spike probability\", \"\", \"\"),\n",
-    "    (\"Spike size (σ × multiplier)\", \"\", \"\"),\n",
-    "    (\"Internal financing mean (%)\", \"\", \"internal override\"),\n",
-    "    (\"Internal financing vol (%)\", \"\", \"\"),\n",
-    "    (\"Internal monthly spike probability\", \"\", \"\"),\n",
-    "    (\"Internal spike size (σ × multiplier)\", \"\", \"\"),\n",
-    "    (\"External PA financing mean (%)\", \"\", \"ext PA override\"),\n",
-    "    (\"External PA financing vol (%)\", \"\", \"\"),\n",
-    "    (\"External PA monthly spike probability\", \"\", \"\"),\n",
-    "    (\"External PA spike size (σ × multiplier)\", \"\", \"\"),\n",
-    "    (\"Active Extension financing mean (%)\", \"\", \"active ext override\"),\n",
-    "    (\"Active Extension financing vol (%)\", \"\", \"\"),\n",
-    "    (\"Active Extension monthly spike probability\", \"\", \"\"),\n",
-    "    (\"Active Extension spike size (σ × multiplier)\", \"\", \"\"),\n",
-    "    # Alpha stream fallbacks\n",
-    "    (\"In-House annual return (%)\", \"\", \"fallback if no range\"),\n",
-    "    (\"In-House annual vol (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension annual return (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension annual vol (%)\", \"\", \"\"),\n",
-    "    (\"External annual return (%)\", \"\", \"\"),\n",
-    "    (\"External annual vol (%)\", \"\", \"\"),\n",
-    "    # Correlations\n",
-    "    (\"Corr index–In-House\", \"\", \"\"),\n",
-    "    (\"Corr index–Alpha-Extension\", \"\", \"\"),\n",
-    "    (\"Corr index–External\", \"\", \"\"),\n",
-    "    (\"Corr In-House–Alpha-Extension\", \"\", \"\"),\n",
-    "    (\"Corr In-House–External\", \"\", \"\"),\n",
-    "    (\"Corr Alpha-Extension–External\", \"\", \"\"),\n",
-    "    # Buffer multiple & total capital\n",
-    "    (\"Buffer multiple\", \"\", \"cash‐buffer multiple\"),\n",
-    "    (\"Total fund capital (mm)\", \"\", \"total fund size in mm\")\n",
-    "]\n",
-    "\n",
-    "# Build DataFrame and save\n",
-    "df_template = pd.DataFrame(rows, columns=[\"Parameter\", \"Value\", \"Notes\"])\n",
-    "file_path = \"/mnt/data/parameters_template.xlsx\"\n",
-    "df_template.to_excel(file_path, index=False)\n",
-    "print(f\"Created template: {file_path}\")\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 1,
-   "id": "50896230-6c8e-4547-ad48-efab630dbba4",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Current working directory: /Users/teacher/Library/CloudStorage/Dropbox/Learning/Code/Portable Alpha-Extension Model\n"
-     ]
-    }
-   ],
-   "source": [
-    "import os\n",
-    "print(\"Current working directory:\", os.getcwd())"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "9cf4f1dc-f8cc-4df1-9294-db2f40b1a76b",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "2025-06-11 07:08:24.160 python[52401:4113495] The class 'NSOpenPanel' overrides the method identifier.  This method is implemented by class 'NSWindow'\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Parameters CSV selected: /Users/teacher/Library/CloudStorage/Dropbox/Learning/Code/Portable Alpha-Extension Model/parameters.csv\n",
-      "Please select the INDEX CSV (monthly total returns).\n",
-      "Index CSV selected: /Users/teacher/Library/CloudStorage/Dropbox/Learning/Code/Portable Alpha-Extension Model/sp500tr_fred_divyield.csv\n",
-      "Loaded 663 months from the raw index CSV.\n",
-      "Using idx_series from 1970-01-01 to 2025-03-01 (n=663)\n",
-      "Analysis-window: μ_idx = 0.0096, σ_idx = 0.0458\n"
-     ]
-    }
-   ],
-   "source": [
-    "# portable_alpha_model.py\n",
-    "\n",
-    "import sys\n",
-    "import csv\n",
-    "import numpy as np\n",
-    "import pandas as pd\n",
-    "from pathlib import Path\n",
-    "import tkinter as tk\n",
-    "from tkinter import filedialog\n",
-    "import openpyxl\n",
-    "import os\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 1. MAPPING: User-friendly labels → Internal variable names\n",
-    "# =============================================================================\n",
-    "\n",
-    "LABEL_MAP = {\n",
-    "    \"Analysis mode\": \"analysis_mode\",\n",
-    "    \"Number of simulations\": \"N_SIMULATIONS\",\n",
-    "    # Capital mode inputs\n",
-    "    \"Max external combined (%)\":            \"max_external_combined_percent\",\n",
-    "    \"External step size (%)\":               \"external_step_size_percent\",\n",
-    "    # Fixed-capital (for non-capital modes)\n",
-    "    \"External PA capital (mm)\":             \"external_pa_capital\",\n",
-    "    \"Active Extension capital (mm)\":        \"active_ext_capital\",\n",
-    "    \"Internal PA capital (mm)\":             \"internal_pa_capital\",\n",
-    "    # Returns mode ranges\n",
-    "    \"In-House return min (%)\":              \"mu_H_min\",\n",
-    "    \"In-House return max (%)\":              \"mu_H_max\",\n",
-    "    \"In-House return step (%)\":             \"mu_H_step\",\n",
-    "    \"In-House vol min (%)\":                 \"sigma_H_min\",\n",
-    "    \"In-House vol max (%)\":                 \"sigma_H_max\",\n",
-    "    \"In-House vol step (%)\":                \"sigma_H_step\",\n",
-    "    \"Alpha-Extension return min (%)\":       \"mu_E_min\",\n",
-    "    \"Alpha-Extension return max (%)\":       \"mu_E_max\",\n",
-    "    \"Alpha-Extension return step (%)\":      \"mu_E_step\",\n",
-    "    \"Alpha-Extension vol min (%)\":          \"sigma_E_min\",\n",
-    "    \"Alpha-Extension vol max (%)\":          \"sigma_E_max\",\n",
-    "    \"Alpha-Extension vol step (%)\":         \"sigma_E_step\",\n",
-    "    \"External return min (%)\":              \"mu_M_min\",\n",
-    "    \"External return max (%)\":              \"mu_M_max\",\n",
-    "    \"External return step (%)\":             \"mu_M_step\",\n",
-    "    \"External vol min (%)\":                 \"sigma_M_min\",\n",
-    "    \"External vol max (%)\":                 \"sigma_M_max\",\n",
-    "    \"External vol step (%)\":                \"sigma_M_step\",\n",
-    "    # Alpha_Shares mode ranges\n",
-    "    \"External PA α fraction min (%)\":       \"external_pa_alpha_frac_min\",\n",
-    "    \"External PA α fraction max (%)\":       \"external_pa_alpha_frac_max\",\n",
-    "    \"External PA α fraction step (%)\":      \"external_pa_alpha_frac_step\",\n",
-    "    \"Active share min (%)\":                 \"active_share_min\",\n",
-    "    \"Active share max (%)\":                 \"active_share_max\",\n",
-    "    \"Active share step (%)\":                \"active_share_step\",\n",
-    "    # Vol_Mult mode range\n",
-    "    \"SD multiple min\":                      \"sd_of_vol_mult_min\",\n",
-    "    \"SD multiple max\":                      \"sd_of_vol_mult_max\",\n",
-    "    \"SD multiple step\":                     \"sd_of_vol_mult_step\",\n",
-    "    # Financing & bucket overrides\n",
-    "    \"Annual financing mean (%)\":            \"financing_mean_annual\",\n",
-    "    \"Annual financing vol (%)\":             \"financing_vol_annual\",\n",
-    "    \"Monthly spike probability\":            \"spike_prob\",\n",
-    "    \"Spike size (σ × multiplier)\":          \"spike_factor\",\n",
-    "    \"Internal financing mean (%)\":          \"internal_financing_mean_annual\",\n",
-    "    \"Internal financing vol (%)\":           \"internal_financing_vol_annual\",\n",
-    "    \"Internal monthly spike probability\":   \"internal_spike_prob\",\n",
-    "    \"Internal spike size (σ × multiplier)\": \"internal_spike_factor\",\n",
-    "    \"External PA financing mean (%)\":       \"ext_pa_financing_mean_annual\",\n",
-    "    \"External PA financing vol (%)\":        \"ext_pa_financing_vol_annual\",\n",
-    "    \"External PA monthly spike probability\":\"ext_pa_spike_prob\",\n",
-    "    \"External PA spike size (σ × multiplier)\": \"ext_pa_spike_factor\",\n",
-    "    \"Active Extension financing mean (%)\":  \"act_ext_financing_mean_annual\",\n",
-    "    \"Active Extension financing vol (%)\":   \"act_ext_financing_vol_annual\",\n",
-    "    \"Active Extension monthly spike probability\":\"act_ext_spike_prob\",\n",
-    "    \"Active Extension spike size (σ × multiplier)\":\"act_ext_spike_factor\",\n",
-    "    # Fallback alpha stream defaults\n",
-    "    \"In-House annual return (%)\":           \"mu_H\",\n",
-    "    \"In-House annual vol (%)\":              \"sigma_H\",\n",
-    "    \"Alpha-Extension annual return (%)\":    \"mu_E\",\n",
-    "    \"Alpha-Extension annual vol (%)\":       \"sigma_E\",\n",
-    "    \"External annual return (%)\":           \"mu_M\",\n",
-    "    \"External annual vol (%)\":              \"sigma_M\",\n",
-    "    # Correlations\n",
-    "    \"Corr index–In-House\":                  \"rho_idx_H\",\n",
-    "    \"Corr index–Alpha-Extension\":           \"rho_idx_E\",\n",
-    "    \"Corr index–External\":                  \"rho_idx_M\",\n",
-    "    \"Corr In-House–Alpha-Extension\":        \"rho_H_E\",\n",
-    "    \"Corr In-House–External\":               \"rho_H_M\",\n",
-    "    \"Corr Alpha-Extension–External\":         \"rho_E_M\",\n",
-    "    # Other risk controls\n",
-    "    \"Buffer multiple\":                      \"buffer_multiple\",\n",
-    "    \"Total fund capital (mm)\":              \"total_fund_capital\",\n",
-    "}\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 2. FILE‐PICKER FOR CSV SELECTION\n",
-    "# =============================================================================\n",
-    "\n",
-    "def select_csv_file():\n",
-    "    \"\"\"\n",
-    "    Pop up a file‐picker dialog so the user can choose a CSV file.\n",
-    "    Returns a pathlib.Path to the selected file.\n",
-    "    Raises FileNotFoundError if the user cancels.\n",
-    "    \"\"\"\n",
-    "    root = tk.Tk()\n",
-    "    root.withdraw()\n",
-    "    file_path = filedialog.askopenfilename(\n",
-    "        title=\"Select CSV File\",\n",
-    "        filetypes=[(\"CSV files\", \"*.csv\"), (\"All files\", \"*.*\")]\n",
-    "    )\n",
-    "    root.destroy()\n",
-    "    if not file_path:\n",
-    "        raise FileNotFoundError(\"No file selected.\")\n",
-    "    return Path(file_path)\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 3. LOAD PARAMETERS USING MAPPING\n",
-    "# =============================================================================\n",
-    "\n",
-    "def load_parameters(csv_filepath, label_map):\n",
-    "    \"\"\"\n",
-    "    Read a CSV that may have leading instruction rows, then a header row \"Parameter,Value\".\n",
-    "    Skip all rows until the header, then parse friendly labels → internal names via label_map.\n",
-    "    Returns a dict {internal_var_name: parsed_value}.\n",
-    "    \"\"\"\n",
-    "    params = {}\n",
-    "    lines = Path(csv_filepath).read_text(encoding=\"utf-8\").splitlines()\n",
-    "    header_idx = None\n",
-    "    for i, line in enumerate(lines):\n",
-    "        if line.strip().startswith(\"Parameter,\"):\n",
-    "            header_idx = i\n",
-    "            break\n",
-    "\n",
-    "    if header_idx is None:\n",
-    "        raise ValueError(f\"No header row starting with 'Parameter,' found in {csv_filepath}\")\n",
-    "\n",
-    "    header_and_data = lines[header_idx:]\n",
-    "    reader = csv.DictReader(header_and_data)\n",
-    "\n",
-    "    for row in reader:\n",
-    "        friendly_key = row.get(\"Parameter\", \"\").strip()\n",
-    "        if not friendly_key or friendly_key not in label_map:\n",
-    "            continue\n",
-    "\n",
-    "        internal_key = label_map[friendly_key]\n",
-    "        raw_val = row.get(\"Value\", \"\").strip()\n",
-    "\n",
-    "        # If semicolon is present, parse as a list (legacy fallback)\n",
-    "        if \";\" in raw_val:\n",
-    "            parts = [p.strip() for p in raw_val.split(\";\") if p.strip() != \"\"]\n",
-    "            parsed_list = []\n",
-    "            for p in parts:\n",
-    "                try:\n",
-    "                    if \".\" in p:\n",
-    "                        parsed_list.append(float(p))\n",
-    "                    else:\n",
-    "                        parsed_list.append(int(p))\n",
-    "                except ValueError:\n",
-    "                    parsed_list.append(p)\n",
-    "            params[internal_key] = parsed_list\n",
-    "        else:\n",
-    "            # Try int → float → string\n",
-    "            try:\n",
-    "                params[internal_key] = int(raw_val)\n",
-    "            except ValueError:\n",
-    "                try:\n",
-    "                    params[internal_key] = float(raw_val)\n",
-    "                except ValueError:\n",
-    "                    # Could be blank string; store as-is\n",
-    "                    params[internal_key] = raw_val\n",
-    "\n",
-    "    return params\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 4. UTILITY: “SAFE GET” FOR NUMERIC PARAMETERS\n",
-    "# =============================================================================\n",
-    "\n",
-    "def get_num(raw_params, key, default):\n",
-    "    \"\"\"\n",
-    "    Return raw_params[key] if it's already int or float; otherwise default.\n",
-    "    \"\"\"\n",
-    "    v = raw_params.get(key, None)\n",
-    "    if isinstance(v, (int, float)):\n",
-    "        return v\n",
-    "    return default\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 5. HELPER FUNCTIONS TO BUILD RANGES OR FALLBACK TO MIDPOINT\n",
-    "# =============================================================================\n",
-    "\n",
-    "def build_range(key_base, default_midpoint):\n",
-    "    \"\"\"\n",
-    "    If raw_params contains key_base_min & key_base_max (and optionally key_base_step),\n",
-    "    return a list of decimals from min→max (in steps).\n",
-    "    Otherwise, if key_base_list exists (legacy semicolon list), return that.\n",
-    "    Else, return [default_midpoint].\n",
-    "\n",
-    "    We divide by 100 because these are “percent” inputs.\n",
-    "    \"\"\"\n",
-    "    k_min  = get_num(raw_params, f\"{key_base}_min\", None)\n",
-    "    k_max  = get_num(raw_params, f\"{key_base}_max\", None)\n",
-    "    k_step = get_num(raw_params, f\"{key_base}_step\", None)\n",
-    "\n",
-    "    if (k_min is not None) and (k_max is not None):\n",
-    "        step = k_step if (k_step is not None) else (k_max - k_min)\n",
-    "        if step <= 0:\n",
-    "            raise RuntimeError(f\"Step for '{key_base}' must be positive.\")\n",
-    "        start = k_min / 100.0\n",
-    "        stop  = k_max / 100.0\n",
-    "        stepd = step / 100.0\n",
-    "        arr = np.arange(start, stop + 1e-9, stepd)\n",
-    "        return list(arr)\n",
-    "\n",
-    "    # Legacy semicolon‐list fallback\n",
-    "    flat_list = raw_params.get(f\"{key_base}_list\", None)\n",
-    "    if isinstance(flat_list, list):\n",
-    "        return flat_list\n",
-    "\n",
-    "    return [default_midpoint]\n",
-    "\n",
-    "\n",
-    "def build_range_int(key_base, default_midpoint):\n",
-    "    \"\"\"\n",
-    "    Like build_range but for integer inputs (e.g. SD multiple).\n",
-    "    If key_base_min & key_base_max exist, return list(range(min, max+1, step)).\n",
-    "    Else if key_base_list exists, return it. Else [default_midpoint].\n",
-    "    \"\"\"\n",
-    "    k_min  = get_num(raw_params, f\"{key_base}_min\", None)\n",
-    "    k_max  = get_num(raw_params, f\"{key_base}_max\", None)\n",
-    "    k_step = get_num(raw_params, f\"{key_base}_step\", None)\n",
-    "\n",
-    "    if (k_min is not None) and (k_max is not None):\n",
-    "        step = k_step if (k_step is not None) else (k_max - k_min)\n",
-    "        if step <= 0:\n",
-    "            raise RuntimeError(f\"Step for '{key_base}' must be positive.\")\n",
-    "        return list(range(k_min, k_max + 1, step))\n",
-    "\n",
-    "    flat_list = raw_params.get(f\"{key_base}_list\", None)\n",
-    "    if isinstance(flat_list, list):\n",
-    "        return flat_list\n",
-    "\n",
-    "    return [default_midpoint]\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 6. HELPER TO LOAD INDEX RETURNS\n",
-    "# =============================================================================\n",
-    "\n",
-    "def load_index_returns(csv_path):\n",
-    "    \"\"\"\n",
-    "    Load a CSV of monthly index returns into a pandas Series.\n",
-    "    Expects columns: \"Date\" and either \"Monthly_TR\" or \"Return\".\n",
-    "    Returns a pd.Series indexed by Date (datetime).\n",
-    "    \"\"\"\n",
-    "    csv_path = Path(csv_path)\n",
-    "    if not csv_path.exists() or not csv_path.is_file():\n",
-    "        raise FileNotFoundError(f\"Index CSV not found at {csv_path}\")\n",
-    "    df = pd.read_csv(csv_path, parse_dates=[\"Date\"])\n",
-    "    if \"Date\" not in df.columns:\n",
-    "        raise ValueError(f\"'Date' column is missing from {csv_path}\")\n",
-    "    if \"Monthly_TR\" in df.columns:\n",
-    "        col = \"Monthly_TR\"\n",
-    "    elif \"Return\" in df.columns:\n",
-    "        col = \"Return\"\n",
-    "    else:\n",
-    "        raise ValueError(f\"CSV must contain 'Monthly_TR' or 'Return'; found: {df.columns.tolist()}\")\n",
-    "\n",
-    "    df = df.sort_values(\"Date\").reset_index(drop=True)\n",
-    "    df.set_index(\"Date\", inplace=True)\n",
-    "    series = df[col].dropna().copy()\n",
-    "    series.index = pd.to_datetime(series.index)\n",
-    "    return series\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 7. SIMULATION + UTILITY FUNCTIONS\n",
-    "# =============================================================================\n",
-    "\n",
-    "def simulate_financing(T, financing_mean, financing_sigma, spike_prob, spike_factor):\n",
-    "    \"\"\"\n",
-    "    Simulate a series of financing spreads f_t for T months,\n",
-    "    using a Normal + occasional jump model.\n",
-    "    \"\"\"\n",
-    "    f = np.zeros(T)\n",
-    "    for t in range(T):\n",
-    "        base = financing_mean + np.random.normal(0, financing_sigma)\n",
-    "        jump = 0.0\n",
-    "        if np.random.rand() < spike_prob:\n",
-    "            jump = spike_factor * financing_sigma\n",
-    "        f[t] = max(base + jump, 0.0)\n",
-    "    return f\n",
-    "\n",
-    "def build_cov_matrix(rho_idx_H, rho_idx_E, rho_idx_M,\n",
-    "                     rho_H_E, rho_H_M, rho_E_M,\n",
-    "                     idx_sigma, sigma_H, sigma_E, sigma_M):\n",
-    "    \"\"\"\n",
-    "    Build the 4×4 covariance matrix for (Index, H, E, M).\n",
-    "    \"\"\"\n",
-    "    sds = np.array([idx_sigma, sigma_H, sigma_E, sigma_M])\n",
-    "    rho = np.array([\n",
-    "        [1.0,       rho_idx_H, rho_idx_E, rho_idx_M],\n",
-    "        [rho_idx_H, 1.0,       rho_H_E,   rho_H_M],\n",
-    "        [rho_idx_E, rho_H_E,   1.0,       rho_E_M],\n",
-    "        [rho_idx_M, rho_H_M,   rho_E_M,   1.0    ]\n",
-    "    ])\n",
-    "    return np.outer(sds, sds) * rho\n",
-    "\n",
-    "def simulate_alpha_streams(T, cov, mu_idx, mu_H, mu_E, mu_M):\n",
-    "    \"\"\"\n",
-    "    Simulate T joint observations of (Index_return, H, E, M)\n",
-    "    from a multivariate Normal with given means and covariance.\n",
-    "    Returns shape (T, 4).\n",
-    "    \"\"\"\n",
-    "    means = np.array([mu_idx, mu_H, mu_E, mu_M])\n",
-    "    return np.random.multivariate_normal(means, cov, size=T)\n",
-    "\n",
-    "def export_to_excel(inputs_dict, summary_df, raw_returns_dict, filename=\"Outputs.xlsx\"):\n",
-    "    \"\"\"\n",
-    "    Write inputs, summary, and raw returns into an Excel workbook.\n",
-    "    \"\"\"\n",
-    "    with pd.ExcelWriter(filename, engine=\"openpyxl\") as writer:\n",
-    "        # 1) Inputs sheet\n",
-    "        df_inputs = pd.DataFrame.from_dict(inputs_dict, orient=\"index\", columns=[\"Value\"])\n",
-    "        df_inputs.index.name = \"Parameter\"\n",
-    "        df_inputs.reset_index(inplace=True)\n",
-    "        df_inputs.to_excel(writer, sheet_name=\"Inputs\", index=False)\n",
-    "\n",
-    "        # 2) Summary sheet\n",
-    "        summary_df.to_excel(writer, sheet_name=\"Summary\", index=False)\n",
-    "\n",
-    "        # 3) Raw Returns sheets\n",
-    "        for sheet_name, df in raw_returns_dict.items():\n",
-    "            safe_name = sheet_name if len(sheet_name) <= 31 else sheet_name[:31]\n",
-    "            df.to_excel(writer, sheet_name=safe_name, index=True)\n",
-    "\n",
-    "    print(f\"Exported results to {filename}\")\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 8. MAIN EXECUTION\n",
-    "# =============================================================================\n",
-    "\n",
-    "if __name__ == \"__main__\":\n",
-    "    # 8.1) Prompt user to select the parameters CSV\n",
-    "    try:\n",
-    "        params_csv_path = select_csv_file()\n",
-    "        print(f\"Parameters CSV selected: {params_csv_path}\")\n",
-    "    except FileNotFoundError:\n",
-    "        raise RuntimeError(\"No parameter CSV selected; exiting.\")\n",
-    "\n",
-    "    # 8.2) Load raw parameters\n",
-    "    raw_params = load_parameters(params_csv_path, LABEL_MAP)\n",
-    "\n",
-    "    # 8.3) “Safe get” for numeric scalars and defaults\n",
-    "    total_fund_capital = get_num(raw_params, \"total_fund_capital\", 1000)\n",
-    "\n",
-    "    financing_mean_annual = get_num(raw_params, \"financing_mean_annual\", 0.005)\n",
-    "    financing_vol_annual  = get_num(raw_params, \"financing_vol_annual\", 0.001)\n",
-    "    spike_prob            = get_num(raw_params, \"spike_prob\", 0.02)\n",
-    "    spike_factor          = get_num(raw_params, \"spike_factor\", 2.25)\n",
-    "\n",
-    "    internal_financing_mean_annual = get_num(raw_params, \"internal_financing_mean_annual\", financing_mean_annual)\n",
-    "    internal_financing_vol_annual  = get_num(raw_params, \"internal_financing_vol_annual\",  financing_vol_annual)\n",
-    "    internal_spike_prob            = get_num(raw_params, \"internal_spike_prob\",            spike_prob)\n",
-    "    internal_spike_factor          = get_num(raw_params, \"internal_spike_factor\",          spike_factor)\n",
-    "\n",
-    "    ext_pa_financing_mean_annual = get_num(raw_params, \"ext_pa_financing_mean_annual\", financing_mean_annual)\n",
-    "    ext_pa_financing_vol_annual  = get_num(raw_params, \"ext_pa_financing_vol_annual\",  financing_vol_annual)\n",
-    "    ext_pa_spike_prob            = get_num(raw_params, \"ext_pa_spike_prob\",            spike_prob)\n",
-    "    ext_pa_spike_factor          = get_num(raw_params, \"ext_pa_spike_factor\",          spike_factor)\n",
-    "\n",
-    "    act_ext_financing_mean_annual = get_num(raw_params, \"act_ext_financing_mean_annual\", financing_mean_annual)\n",
-    "    act_ext_financing_vol_annual  = get_num(raw_params, \"act_ext_financing_vol_annual\",  financing_vol_annual)\n",
-    "    act_ext_spike_prob            = get_num(raw_params, \"act_ext_spike_prob\",            spike_prob)\n",
-    "    act_ext_spike_factor          = get_num(raw_params, \"act_ext_spike_factor\",          spike_factor)\n",
-    "\n",
-    "    mu_H    = get_num(raw_params, \"mu_H\",    0.04)\n",
-    "    sigma_H = get_num(raw_params, \"sigma_H\", 0.01)\n",
-    "    mu_E    = get_num(raw_params, \"mu_E\",    0.05)\n",
-    "    sigma_E = get_num(raw_params, \"sigma_E\", 0.02)\n",
-    "    mu_M    = get_num(raw_params, \"mu_M\",    0.03)\n",
-    "    sigma_M = get_num(raw_params, \"sigma_M\", 0.02)\n",
-    "\n",
-    "    rho_idx_H = get_num(raw_params, \"rho_idx_H\", 0.05)\n",
-    "    rho_idx_E = get_num(raw_params, \"rho_idx_E\", 0.00)\n",
-    "    rho_idx_M = get_num(raw_params, \"rho_idx_M\", 0.00)\n",
-    "    rho_H_E   = get_num(raw_params, \"rho_H_E\",   0.10)\n",
-    "    rho_H_M   = get_num(raw_params, \"rho_H_M\",   0.10)\n",
-    "    rho_E_M   = get_num(raw_params, \"rho_E_M\",   0.00)\n",
-    "\n",
-    "    buffer_multiple = get_num(raw_params, \"buffer_multiple\", 3.0)\n",
-    "\n",
-    "    default_mu_H    = mu_H / 12\n",
-    "    default_sigma_H = sigma_H / 12\n",
-    "    default_mu_E    = mu_E / 12\n",
-    "    default_sigma_E = sigma_E / 12\n",
-    "    default_mu_M    = mu_M / 12\n",
-    "    default_sigma_M = sigma_M / 12\n",
-    "\n",
-    "    default_ext_alpha_frac = get_num(raw_params, \"external_pa_alpha_frac\", 50) / 100.0\n",
-    "    default_act_share      = get_num(raw_params, \"active_share\",            50) / 100.0\n",
-    "\n",
-    "    default_sd_mult = get_num(raw_params, \"sd_of_vol_mult\", 3)\n",
-    "\n",
-    "    financing_mean  = financing_mean_annual / 12\n",
-    "    financing_sigma = financing_vol_annual / 12\n",
-    "\n",
-    "    # 8.4) Determine analysis_mode\n",
-    "    analysis_mode = str(raw_params.get(\"analysis_mode\", \"\")).strip().lower()\n",
-    "    valid_modes = {\"capital\", \"returns\", \"alpha_shares\", \"vol_mult\"}\n",
-    "    if analysis_mode not in valid_modes:\n",
-    "        raise RuntimeError(f\"Analysis mode must be one of {valid_modes}, but got '{analysis_mode}'\")\n",
-    "\n",
-    "    # 8.5) Prompt user to select the INDEX CSV\n",
-    "    print(\"Please select the INDEX CSV (monthly total returns).\")\n",
-    "    try:\n",
-    "        INDEX_CSV_PATH = select_csv_file()\n",
-    "        print(f\"Index CSV selected: {INDEX_CSV_PATH}\")\n",
-    "    except FileNotFoundError:\n",
-    "        raise RuntimeError(\"Index CSV was not selected; exiting.\")\n",
-    "\n",
-    "    # 8.6) Load idx_series and compute reference stats\n",
-    "    try:\n",
-    "        idx_series = load_index_returns(INDEX_CSV_PATH)\n",
-    "        print(f\"Loaded {len(idx_series)} months from the raw index CSV.\")\n",
-    "    except Exception as e:\n",
-    "        raise RuntimeError(f\"Failed to load index returns: {e}\")\n",
-    "\n",
-    "    mu_idx   = idx_series.mean()\n",
-    "    idx_sigma = idx_series.std(ddof=1)\n",
-    "    print(f\"Using idx_series from {idx_series.index.min().date()} to {idx_series.index.max().date()} (n={len(idx_series)})\")\n",
-    "    print(f\"Analysis-window: μ_idx = {mu_idx:.4f}, σ_idx = {idx_sigma:.4f}\")\n",
-    "\n",
-    "    # 8.7) Convert bucket financing overrides to monthly decimals\n",
-    "    internal_financing_mean  = internal_financing_mean_annual / 12\n",
-    "    internal_financing_sigma = internal_financing_vol_annual / 12\n",
-    "\n",
-    "    ext_pa_financing_mean  = ext_pa_financing_mean_annual / 12\n",
-    "    ext_pa_financing_sigma = ext_pa_financing_vol_annual / 12\n",
-    "\n",
-    "    act_ext_financing_mean  = act_ext_financing_mean_annual / 12\n",
-    "    act_ext_financing_sigma = act_ext_financing_vol_annual / 12\n",
-    "\n",
-    "    # -------------------------------------------------------------------\n",
-    "    # 8.8) Branch on analysis_mode\n",
-    "    # -------------------------------------------------------------------\n",
-    "\n",
-    "    if analysis_mode == \"capital\":\n",
-    "        # --------------------------------------\n",
-    "        # 8.8.a) Capital mode: Sweep ext_pct→act_pct\n",
-    "        # --------------------------------------\n",
-    "        max_ext_pct = get_num(raw_params, \"max_external_combined_percent\", 50) / 100.0\n",
-    "        ext_step_pct = get_num(raw_params, \"external_step_size_percent\", 1) / 100.0\n",
-    "\n",
-    "        # Other “sweepable” params collapse to midpoint\n",
-    "        mu_H_list    = [default_mu_H]\n",
-    "        sigma_H_list = [default_sigma_H]\n",
-    "        mu_E_list    = [default_mu_E]\n",
-    "        sigma_E_list = [default_sigma_E]\n",
-    "        mu_M_list    = [default_mu_M]\n",
-    "        sigma_M_list = [default_sigma_M]\n",
-    "\n",
-    "        ext_alpha_list = [default_ext_alpha_frac]\n",
-    "        act_share_list = [default_act_share]\n",
-    "        sd_list        = [default_sd_mult]\n",
-    "\n",
-    "        all_summaries = []\n",
-    "        all_raw_returns = {}\n",
-    "\n",
-    "        ext_range = np.arange(0.0, max_ext_pct + 1e-9, ext_step_pct)\n",
-    "        for ext_pct in ext_range:\n",
-    "            act_range = np.arange(0.0, ext_pct + 1e-9, ext_step_pct)\n",
-    "            for act_pct in act_range:\n",
-    "                E_pct = ext_pct - act_pct\n",
-    "                A_pct = act_pct\n",
-    "                Z_frac = 1.0 - ext_pct\n",
-    "                E_mm = E_pct * total_fund_capital\n",
-    "                A_mm = A_pct * total_fund_capital\n",
-    "                Z_mm = Z_frac * total_fund_capital\n",
-    "\n",
-    "                f_internal = simulate_financing(\n",
-    "                    12, internal_financing_mean, internal_financing_sigma,\n",
-    "                    internal_spike_prob, internal_spike_factor\n",
-    "                )\n",
-    "                f_ext_pa = simulate_financing(\n",
-    "                    12, ext_pa_financing_mean, ext_pa_financing_sigma,\n",
-    "                    ext_pa_spike_prob, ext_pa_spike_factor\n",
-    "                )\n",
-    "                f_act_ext = simulate_financing(\n",
-    "                    12, act_ext_financing_mean, act_ext_financing_sigma,\n",
-    "                    act_ext_spike_prob, act_ext_spike_factor\n",
-    "                )\n",
-    "\n",
-    "                cov_mat = build_cov_matrix(\n",
-    "                    rho_idx_H, rho_idx_E, rho_idx_M,\n",
-    "                    rho_H_E, rho_H_M, rho_E_M,\n",
-    "                    idx_sigma, default_sigma_H, default_sigma_E, default_sigma_M\n",
-    "                )\n",
-    "\n",
-    "                N_SIMULATIONS = get_num(raw_params, \"N_SIMULATIONS\", N_SIMULATIONS)\n",
-    "                N_MONTHS      = get_num(raw_params, \"N_MONTHS\",       12)\n",
-    "\n",
-    "                sims = np.random.multivariate_normal(\n",
-    "                    [mu_idx, default_mu_H, default_mu_E, default_mu_M],\n",
-    "                    cov_mat,\n",
-    "                    size=(N_SIMULATIONS, N_MONTHS)\n",
-    "                )\n",
-    "\n",
-    "                f_int_matrix    = np.tile(f_internal, (N_SIMULATIONS, 1))\n",
-    "                f_ext_pa_matrix = np.tile(f_ext_pa,    (N_SIMULATIONS, 1))\n",
-    "                f_act_ext_matrix= np.tile(f_act_ext,   (N_SIMULATIONS, 1))\n",
-    "\n",
-    "                results = {\n",
-    "                    \"Base\":       np.zeros(N_SIMULATIONS),\n",
-    "                    \"ExternalPA\": np.zeros(N_SIMULATIONS),\n",
-    "                    \"ActiveExt\":  np.zeros(N_SIMULATIONS)\n",
-    "                }\n",
-    "                dates_sim = pd.date_range(\n",
-    "                    start=idx_series.index[-1] + pd.DateOffset(months=1),\n",
-    "                    periods=N_MONTHS, freq=\"ME\"\n",
-    "                )\n",
-    "                raw_returns = {\n",
-    "                    \"Base\":       pd.DataFrame(index=dates_sim),\n",
-    "                    \"ExternalPA\": pd.DataFrame(index=dates_sim),\n",
-    "                    \"ActiveExt\":  pd.DataFrame(index=dates_sim),\n",
-    "                }\n",
-    "\n",
-    "                for sim_i in range(N_SIMULATIONS):\n",
-    "                    r_beta = sims[sim_i, :, 0]\n",
-    "                    r_H    = sims[sim_i, :, 1]\n",
-    "                    r_E    = sims[sim_i, :, 2]\n",
-    "                    r_M    = sims[sim_i, :, 3]\n",
-    "\n",
-    "                    R_base = (r_beta - f_int_matrix[sim_i]) * Z_frac + r_H * Z_frac\n",
-    "                    results[\"Base\"][sim_i] = np.prod(1 + R_base) - 1\n",
-    "\n",
-    "                    R_extpa = (r_beta - f_ext_pa_matrix[sim_i]) * E_pct + r_M * E_pct\n",
-    "                    results[\"ExternalPA\"][sim_i] = np.prod(1 + R_extpa) - 1\n",
-    "\n",
-    "                    R_actext = (r_beta - f_act_ext_matrix[sim_i]) * A_pct + r_E * A_pct\n",
-    "                    results[\"ActiveExt\"][sim_i] = np.prod(1 + R_actext) - 1\n",
-    "\n",
-    "                    if sim_i == 0:\n",
-    "                        raw_returns[\"Base\"]       = pd.DataFrame({\"Base\": R_base}, index=dates_sim)\n",
-    "                        raw_returns[\"ExternalPA\"] = pd.DataFrame({\"ExternalPA\": R_extpa}, index=dates_sim)\n",
-    "                        raw_returns[\"ActiveExt\"]  = pd.DataFrame({\"ActiveExt\": R_actext}, index=dates_sim)\n",
-    "\n",
-    "                df_yearly = pd.DataFrame(results)\n",
-    "                summary_rows = []\n",
-    "                for cfg, arr in df_yearly.items():\n",
-    "                    ann_ret = np.mean(arr)\n",
-    "                    ann_vol = np.std(arr, ddof=1)\n",
-    "                    var_95  = np.percentile(arr, 5)\n",
-    "                    te      = np.nan\n",
-    "\n",
-    "                    mr_series = raw_returns[cfg].iloc[:, 0]\n",
-    "                    threshold = -buffer_multiple * idx_sigma\n",
-    "                    breach_pct = np.mean(mr_series < threshold) * 100\n",
-    "\n",
-    "                    summary_rows.append({\n",
-    "                        \"Config\": cfg,\n",
-    "                        \"Ext %\":  f\"{ext_pct*100:.1f}%\",\n",
-    "                        \"Act %\":  f\"{act_pct*100:.1f}%\",\n",
-    "                        \"Internal PA (mm)\": Z_mm,\n",
-    "                        \"Annual Return\":      ann_ret,\n",
-    "                        \"Annual Vol\":         ann_vol,\n",
-    "                        \"VaR 95\":             var_95,\n",
-    "                        \"TE (est.)\":          te,\n",
-    "                        \"Breach %\":           breach_pct\n",
-    "                    })\n",
-    "\n",
-    "                summary_df = pd.DataFrame(summary_rows)\n",
-    "                all_summaries.append(summary_df)\n",
-    "\n",
-    "                for key, df_r in raw_returns.items():\n",
-    "                    sheet_key = f\"{key}_E{ext_pct*100:.0f}_A{act_pct*100:.0f}\"\n",
-    "                    all_raw_returns[sheet_key] = df_r\n",
-    "\n",
-    "        final_summary = pd.concat(all_summaries, ignore_index=True)\n",
-    "\n",
-    "        inputs_dict = {\n",
-    "            \"Analysis mode\":               \"capital\",\n",
-    "            \"Total fund capital (mm)\":     total_fund_capital,\n",
-    "            \"Max external combined (%)\":   get_num(raw_params, \"max_external_combined_percent\", \"\"),\n",
-    "            \"External step size (%)\":      get_num(raw_params, \"external_step_size_percent\", \"\"),\n",
-    "            \"Annual financing mean (%)\":   financing_mean_annual,\n",
-    "            \"Annual financing vol (%)\":    financing_vol_annual,\n",
-    "            \"Monthly spike probability\":   spike_prob,\n",
-    "            \"Spike size (σ × multiplier)\": spike_factor,\n",
-    "            \"Buffer multiple\":             buffer_multiple\n",
-    "        }\n",
-    "\n",
-    "        export_to_excel(inputs_dict, final_summary, all_raw_returns)\n",
-    "\n",
-    "        display_df = final_summary.copy()\n",
-    "        display_df = display_df.rename(columns={\n",
-    "            \"Annual Return\": \"Annual Return (%)\",\n",
-    "            \"Annual Vol\":    \"Annual Volatility (%)\",\n",
-    "            \"VaR 95\":        \"95%-VaR (%)\",\n",
-    "            \"TE (est.)\":     \"Tracking Error (%)\",\n",
-    "            \"Breach %\":      \"Breach Probability (%)\"\n",
-    "        })\n",
-    "        pct_cols = [\n",
-    "            \"Annual Return (%)\", \"Annual Volatility (%)\", \"95%-VaR (%)\",\n",
-    "            \"Tracking Error (%)\", \"Breach Probability (%)\"\n",
-    "        ]\n",
-    "        for col in pct_cols:\n",
-    "            display_df[col] = display_df[col].map(\"{:.1f}%\".format)\n",
-    "\n",
-    "        pd.set_option(\"display.max_rows\", None)\n",
-    "        print(\"\\n=== Summary Table (Capital Mode) ===\\n\")\n",
-    "        print(display_df.to_string(index=False))\n",
-    "        print()\n",
-    "\n",
-    "    elif analysis_mode == \"returns\":\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "        # 8.8.b) Returns mode: Sweep over μ_H, σ_H, μ_E, σ_E, μ_M, σ_M. Other params fixed at midpoint.\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "\n",
-    "        E_mm = get_num(raw_params, \"external_pa_capital\", None)\n",
-    "        A_mm = get_num(raw_params, \"active_ext_capital\",  None)\n",
-    "        Z_mm = get_num(raw_params, \"internal_pa_capital\", None)\n",
-    "        if any(v is None for v in [E_mm, A_mm, Z_mm]):\n",
-    "            raise RuntimeError(\n",
-    "                \"In 'returns' mode, please supply: External PA capital (mm), \"\n",
-    "                \"Active Extension capital (mm), Internal PA capital (mm).\"\n",
-    "            )\n",
-    "\n",
-    "        mu_H_list    = build_range(\"mu_H\",    default_midpoint=default_mu_H)\n",
-    "        sigma_H_list = build_range(\"sigma_H\", default_midpoint=default_sigma_H)\n",
-    "        mu_E_list    = build_range(\"mu_E\",    default_midpoint=default_mu_E)\n",
-    "        sigma_E_list = build_range(\"sigma_E\", default_midpoint=default_sigma_E)\n",
-    "        mu_M_list    = build_range(\"mu_M\",    default_midpoint=default_mu_M)\n",
-    "        sigma_M_list = build_range(\"sigma_M\", default_midpoint=default_sigma_M)\n",
-    "\n",
-    "        ext_alpha_list = [default_ext_alpha_frac]\n",
-    "        act_share_list = [default_act_share]\n",
-    "        sd_list        = [default_sd_mult]\n",
-    "\n",
-    "        all_summaries = []\n",
-    "        all_raw_returns = {}\n",
-    "\n",
-    "        for muH in mu_H_list:\n",
-    "            for sH in sigma_H_list:\n",
-    "                for muE in mu_E_list:\n",
-    "                    for sE in sigma_E_list:\n",
-    "                        for muM_ in mu_M_list:\n",
-    "                            for sM in sigma_M_list:\n",
-    "                                f_internal = simulate_financing(\n",
-    "                                    12, internal_financing_mean_annual/12, internal_financing_vol_annual/12,\n",
-    "                                    internal_spike_prob, internal_spike_factor\n",
-    "                                )\n",
-    "                                f_ext_pa = simulate_financing(\n",
-    "                                    12, ext_pa_financing_mean_annual/12, ext_pa_financing_vol_annual/12,\n",
-    "                                    ext_pa_spike_prob, ext_pa_spike_factor\n",
-    "                                )\n",
-    "                                f_act_ext = simulate_financing(\n",
-    "                                    12, act_ext_financing_mean_annual/12, act_ext_financing_vol_annual/12,\n",
-    "                                    act_ext_spike_prob, act_ext_spike_factor\n",
-    "                                )\n",
-    "\n",
-    "                                cov_mat = build_cov_matrix(\n",
-    "                                    rho_idx_H, rho_idx_E, rho_idx_M,\n",
-    "                                    rho_H_E, rho_H_M, rho_E_M,\n",
-    "                                    idx_sigma, sH, sE, sM\n",
-    "                                )\n",
-    "\n",
-    "                                N_SIMULATIONS = get_num(raw_params, \"N_SIMULATIONS\", N_SIMULATIONS)\n",
-    "                                N_MONTHS      = get_num(raw_params, \"N_MONTHS\",    12)\n",
-    "\n",
-    "                                sims = np.random.multivariate_normal(\n",
-    "                                    [mu_idx, muH, muE, muM_],\n",
-    "                                    cov_mat,\n",
-    "                                    size=(N_SIMULATIONS, N_MONTHS)\n",
-    "                                )\n",
-    "\n",
-    "                                f_int_matrix    = np.tile(f_internal, (N_SIMULATIONS, 1))\n",
-    "                                f_ext_pa_matrix = np.tile(f_ext_pa,    (N_SIMULATIONS, 1))\n",
-    "                                f_act_ext_matrix= np.tile(f_act_ext,   (N_SIMULATIONS, 1))\n",
-    "\n",
-    "                                results = {\n",
-    "                                    \"Base\":       np.zeros(N_SIMULATIONS),\n",
-    "                                    \"ExternalPA\": np.zeros(N_SIMULATIONS),\n",
-    "                                    \"ActiveExt\":  np.zeros(N_SIMULATIONS)\n",
-    "                                }\n",
-    "                                dates_sim = pd.date_range(\n",
-    "                                    start=idx_series.index[-1] + pd.DateOffset(months=1),\n",
-    "                                    periods=N_MONTHS, freq=\"ME\"\n",
-    "                                )\n",
-    "                                raw_returns = {\n",
-    "                                    \"Base\":       pd.DataFrame(index=dates_sim),\n",
-    "                                    \"ExternalPA\": pd.DataFrame(index=dates_sim),\n",
-    "                                    \"ActiveExt\":  pd.DataFrame(index=dates_sim),\n",
-    "                                }\n",
-    "\n",
-    "                                for sim_i in range(N_SIMULATIONS):\n",
-    "                                    r_beta = sims[sim_i, :, 0]\n",
-    "                                    r_H    = sims[sim_i, :, 1]\n",
-    "                                    r_E    = sims[sim_i, :, 2]\n",
-    "                                    r_M    = sims[sim_i, :, 3]\n",
-    "\n",
-    "                                    R_base   = (r_beta - f_int_matrix[sim_i]) + r_H\n",
-    "                                    R_extpa  = (r_beta - f_ext_pa_matrix[sim_i]) + r_M\n",
-    "                                    R_actext = (r_beta - f_act_ext_matrix[sim_i]) + r_E\n",
-    "\n",
-    "                                    results[\"Base\"][sim_i]       = np.prod(1 + R_base) - 1\n",
-    "                                    results[\"ExternalPA\"][sim_i] = np.prod(1 + R_extpa) - 1\n",
-    "                                    results[\"ActiveExt\"][sim_i]  = np.prod(1 + R_actext) - 1\n",
-    "\n",
-    "                                    if sim_i == 0:\n",
-    "                                        raw_returns[\"Base\"]       = pd.DataFrame({\"Base\": R_base}, index=dates_sim)\n",
-    "                                        raw_returns[\"ExternalPA\"] = pd.DataFrame({\"ExternalPA\": R_extpa}, index=dates_sim)\n",
-    "                                        raw_returns[\"ActiveExt\"]  = pd.DataFrame({\"ActiveExt\": R_actext}, index=dates_sim)\n",
-    "\n",
-    "                                df_yearly = pd.DataFrame(results)\n",
-    "                                summary_rows = []\n",
-    "                                for cfg, arr in df_yearly.items():\n",
-    "                                    ann_ret = np.mean(arr)\n",
-    "                                    ann_vol = np.std(arr, ddof=1)\n",
-    "                                    var_95  = np.percentile(arr, 5)\n",
-    "                                    te      = np.nan\n",
-    "\n",
-    "                                    mr_series = raw_returns[cfg].iloc[:, 0]\n",
-    "                                    threshold = -buffer_multiple * idx_sigma\n",
-    "                                    breach_pct = np.mean(mr_series < threshold) * 100\n",
-    "\n",
-    "                                    summary_rows.append({\n",
-    "                                        \"Config\": cfg,\n",
-    "                                        \"μ_H (%)\":    f\"{muH*100:.1f}%\",\n",
-    "                                        \"σ_H (%)\":    f\"{sH*100:.1f}%\",\n",
-    "                                        \"μ_E (%)\":    f\"{muE*100:.1f}%\",\n",
-    "                                        \"σ_E (%)\":    f\"{sE*100:.1f}%\",\n",
-    "                                        \"μ_M (%)\":    f\"{muM_*100:.1f}%\",\n",
-    "                                        \"σ_M (%)\":    f\"{sM*100:.1f}%\",\n",
-    "                                        \"Internal PA (mm)\": Z_mm,\n",
-    "                                        \"External PA (mm)\": E_mm,\n",
-    "                                        \"Active Ext (mm)\":  A_mm,\n",
-    "                                        \"Annual Return\":      ann_ret,\n",
-    "                                        \"Annual Vol\":         ann_vol,\n",
-    "                                        \"VaR 95\":             var_95,\n",
-    "                                        \"TE (est.)\":          te,\n",
-    "                                        \"Breach %\":           breach_pct\n",
-    "                                    })\n",
-    "\n",
-    "                                summary_df = pd.DataFrame(summary_rows)\n",
-    "                                all_summaries.append(summary_df)\n",
-    "\n",
-    "                                for key, df_r in raw_returns.items():\n",
-    "                                    sheet_key = (\n",
-    "                                        f\"{key}_H{muH*100:.0f}\"\n",
-    "                                        f\"_sH{sH*100:.0f}\"\n",
-    "                                        f\"_E{muE*100:.0f}\"\n",
-    "                                        f\"_sE{sE*100:.0f}\"\n",
-    "                                        f\"_M{muM_*100:.0f}\"\n",
-    "                                        f\"_sM{sM*100:.0f}\"\n",
-    "                                    )\n",
-    "                                    all_raw_returns[sheet_key] = df_r\n",
-    "\n",
-    "        final_summary = pd.concat(all_summaries, ignore_index=True)\n",
-    "\n",
-    "        inputs_dict = {\n",
-    "            \"Analysis mode\":                    \"returns\",\n",
-    "            \"In-House return min (%)\":          get_num(raw_params, \"mu_H_min\",    \"\"),\n",
-    "            \"In-House return max (%)\":          get_num(raw_params, \"mu_H_max\",    \"\"),\n",
-    "            \"In-House return step (%)\":         get_num(raw_params, \"mu_H_step\",   \"\"),\n",
-    "            \"In-House vol min (%)\":             get_num(raw_params, \"sigma_H_min\", \"\"),\n",
-    "            \"In-House vol max (%)\":             get_num(raw_params, \"sigma_H_max\", \"\"),\n",
-    "            \"In-House vol step (%)\":            get_num(raw_params, \"sigma_H_step\",\"\"),\n",
-    "            \"Alpha-Extension return min (%)\":   get_num(raw_params, \"mu_E_min\",    \"\"),\n",
-    "            \"Alpha-Extension return max (%)\":   get_num(raw_params, \"mu_E_max\",    \"\"),\n",
-    "            \"Alpha-Extension return step (%)\":  get_num(raw_params, \"mu_E_step\",   \"\"),\n",
-    "            \"Alpha-Extension vol min (%)\":      get_num(raw_params, \"sigma_E_min\", \"\"),\n",
-    "            \"Alpha-Extension vol max (%)\":      get_num(raw_params, \"sigma_E_max\", \"\"),\n",
-    "            \"Alpha-Extension vol step (%)\":     get_num(raw_params, \"sigma_E_step\",\"\"),\n",
-    "            \"External return min (%)\":          get_num(raw_params, \"mu_M_min\",    \"\"),\n",
-    "            \"External return max (%)\":          get_num(raw_params, \"mu_M_max\",    \"\"),\n",
-    "            \"External return step (%)\":         get_num(raw_params, \"mu_M_step\",   \"\"),\n",
-    "            \"External vol min (%)\":             get_num(raw_params, \"sigma_M_min\", \"\"),\n",
-    "            \"External vol max (%)\":             get_num(raw_params, \"sigma_M_max\", \"\"),\n",
-    "            \"External vol step (%)\":            get_num(raw_params, \"sigma_M_step\",\"\"),\n",
-    "            \"External PA capital (mm)\":         E_mm,\n",
-    "            \"Active Extension capital (mm)\":    A_mm,\n",
-    "            \"Internal PA capital (mm)\":         Z_mm,\n",
-    "            \"Buffer multiple\":                  buffer_multiple\n",
-    "        }\n",
-    "\n",
-    "        export_to_excel(inputs_dict, final_summary, all_raw_returns)\n",
-    "\n",
-    "        display_df = final_summary.copy()\n",
-    "        display_df = display_df.rename(columns={\n",
-    "            \"Annual Return\": \"Annual Return (%)\",\n",
-    "            \"Annual Vol\":    \"Annual Volatility (%)\",\n",
-    "            \"VaR 95\":        \"95%-VaR (%)\",\n",
-    "            \"TE (est.)\":     \"Tracking Error (%)\",\n",
-    "            \"Breach %\":      \"Breach Probability (%)\"\n",
-    "        })\n",
-    "        pct_cols = [\n",
-    "            \"Annual Return (%)\", \"Annual Volatility (%)\", \"95%-VaR (%)\",\n",
-    "            \"Tracking Error (%)\", \"Breach Probability (%)\"\n",
-    "        ]\n",
-    "        for col in pct_cols:\n",
-    "            display_df[col] = display_df[col].map(\"{:.1f}%\".format)\n",
-    "\n",
-    "        pd.set_option(\"display.max_rows\", None)\n",
-    "        print(\"\\n=== Summary Table (Returns Mode) ===\\n\")\n",
-    "        print(display_df.to_string(index=False))\n",
-    "        print()\n",
-    "\n",
-    "    elif analysis_mode == \"alpha_shares\":\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "        # 8.8.c) Alpha_Shares mode: Sweep over external_pa_alpha_frac, active_share. Others fixed.\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "\n",
-    "        E_mm = get_num(raw_params, \"external_pa_capital\", None)\n",
-    "        A_mm = get_num(raw_params, \"active_ext_capital\",  None)\n",
-    "        Z_mm = get_num(raw_params, \"internal_pa_capital\", None)\n",
-    "        if any(v is None for v in [E_mm, A_mm, Z_mm]):\n",
-    "            raise RuntimeError(\n",
-    "                \"In 'alpha_shares' mode, supply: External PA capital (mm), \"\n",
-    "                \"Active Extension capital (mm), Internal PA capital (mm).\"\n",
-    "            )\n",
-    "\n",
-    "        external_pa_alpha_frac_list = build_range(\"external_pa_alpha_frac\", default_midpoint=default_ext_alpha_frac)\n",
-    "        active_share_list           = build_range(\"active_share\",            default_midpoint=default_act_share)\n",
-    "\n",
-    "        mu_H_list    = [default_mu_H]\n",
-    "        sigma_H_list = [default_sigma_H]\n",
-    "        mu_E_list    = [default_mu_E]\n",
-    "        sigma_E_list = [default_sigma_E]\n",
-    "        mu_M_list    = [default_mu_M]\n",
-    "        sigma_M_list = [default_sigma_M]\n",
-    "        sd_list      = [default_sd_mult]\n",
-    "\n",
-    "        all_summaries = []\n",
-    "        all_raw_returns = {}\n",
-    "\n",
-    "        for ext_alpha in external_pa_alpha_frac_list:\n",
-    "            for act_share in active_share_list:\n",
-    "                f_internal = simulate_financing(\n",
-    "                    12, internal_financing_mean_annual/12, internal_financing_vol_annual/12,\n",
-    "                    internal_spike_prob, internal_spike_factor\n",
-    "                )\n",
-    "                f_ext_pa = simulate_financing(\n",
-    "                    12, ext_pa_financing_mean_annual/12, ext_pa_financing_vol_annual/12,\n",
-    "                    ext_pa_spike_prob, ext_pa_spike_factor\n",
-    "                )\n",
-    "                f_act_ext = simulate_financing(\n",
-    "                    12, act_ext_financing_mean_annual/12, act_ext_financing_vol_annual/12,\n",
-    "                    act_ext_spike_prob, act_ext_spike_factor\n",
-    "                )\n",
-    "\n",
-    "                cov_mat = build_cov_matrix(\n",
-    "                    rho_idx_H, rho_idx_E, rho_idx_M,\n",
-    "                    rho_H_E, rho_H_M, rho_E_M,\n",
-    "                    idx_sigma, default_sigma_H, default_sigma_E, default_sigma_M\n",
-    "                )\n",
-    "\n",
-    "                N_SIMULATIONS = get_num(raw_params, \"N_SIMULATIONS\", N_SIMULATIONS)\n",
-    "                N_MONTHS      = get_num(raw_params, \"N_MONTHS\",    12)\n",
-    "\n",
-    "                sims = np.random.multivariate_normal(\n",
-    "                    [mu_idx, default_mu_H, default_mu_E, default_mu_M],\n",
-    "                    cov_mat,\n",
-    "                    size=(N_SIMULATIONS, N_MONTHS)\n",
-    "                )\n",
-    "\n",
-    "                f_int_matrix    = np.tile(f_internal, (N_SIMULATIONS, 1))\n",
-    "                f_ext_pa_matrix = np.tile(f_ext_pa,    (N_SIMULATIONS, 1))\n",
-    "                f_act_ext_matrix= np.tile(f_act_ext,   (N_SIMULATIONS, 1))\n",
-    "\n",
-    "                results = {\n",
-    "                    \"Base\":       np.zeros(N_SIMULATIONS),\n",
-    "                    \"ExternalPA\": np.zeros(N_SIMULATIONS),\n",
-    "                    \"ActiveExt\":  np.zeros(N_SIMULATIONS)\n",
-    "                }\n",
-    "                dates_sim = pd.date_range(\n",
-    "                    start=idx_series.index[-1] + pd.DateOffset(months=1),\n",
-    "                    periods=N_MONTHS, freq=\"ME\"\n",
-    "                )\n",
-    "                raw_returns = {\n",
-    "                    \"Base\":       pd.DataFrame(index=dates_sim),\n",
-    "                    \"ExternalPA\": pd.DataFrame(index=dates_sim),\n",
-    "                    \"ActiveExt\":  pd.DataFrame(index=dates_sim),\n",
-    "                }\n",
-    "\n",
-    "                for sim_i in range(N_SIMULATIONS):\n",
-    "                    r_beta = sims[sim_i, :, 0]\n",
-    "                    r_H    = sims[sim_i, :, 1]\n",
-    "                    r_E    = sims[sim_i, :, 2]\n",
-    "                    r_M    = sims[sim_i, :, 3]\n",
-    "\n",
-    "                    R_base   = (r_beta - f_int_matrix[sim_i]) + r_H\n",
-    "                    R_extpa  = (r_beta - f_ext_pa_matrix[sim_i]) * ext_alpha + r_M * ext_alpha\n",
-    "                    R_actext = (r_beta - f_act_ext_matrix[sim_i]) * act_share + r_E * act_share\n",
-    "\n",
-    "                    results[\"Base\"][sim_i]       = np.prod(1 + R_base) - 1\n",
-    "                    results[\"ExternalPA\"][sim_i] = np.prod(1 + R_extpa) - 1\n",
-    "                    results[\"ActiveExt\"][sim_i]  = np.prod(1 + R_actext) - 1\n",
-    "\n",
-    "                    if sim_i == 0:\n",
-    "                        raw_returns[\"Base\"]       = pd.DataFrame({\"Base\": R_base}, index=dates_sim)\n",
-    "                        raw_returns[\"ExternalPA\"] = pd.DataFrame({\"ExternalPA\": R_extpa}, index=dates_sim)\n",
-    "                        raw_returns[\"ActiveExt\"]  = pd.DataFrame({\"ActiveExt\": R_actext}, index=dates_sim)\n",
-    "\n",
-    "                df_yearly = pd.DataFrame(results)\n",
-    "                summary_rows = []\n",
-    "                for cfg, arr in df_yearly.items():\n",
-    "                    ann_ret = np.mean(arr)\n",
-    "                    ann_vol = np.std(arr, ddof=1)\n",
-    "                    var_95  = np.percentile(arr, 5)\n",
-    "                    te      = np.nan\n",
-    "\n",
-    "                    mr_series = raw_returns[cfg].iloc[:, 0]\n",
-    "                    threshold = -buffer_multiple * idx_sigma\n",
-    "                    breach_pct = np.mean(mr_series < threshold) * 100\n",
-    "\n",
-    "                    summary_rows.append({\n",
-    "                        \"Config\":            cfg,\n",
-    "                        \"External PA α (%)\": f\"{ext_alpha*100:.1f}%\",\n",
-    "                        \"Active share (%)\":  f\"{act_share*100:.1f}%\",\n",
-    "                        \"Internal PA (mm)\":   Z_mm,\n",
-    "                        \"External PA (mm)\":   E_mm,\n",
-    "                        \"Active Ext (mm)\":    A_mm,\n",
-    "                        \"Annual Return\":      ann_ret,\n",
-    "                        \"Annual Vol\":         ann_vol,\n",
-    "                        \"VaR 95\":             var_95,\n",
-    "                        \"TE (est.)\":          te,\n",
-    "                        \"Breach %\":           breach_pct\n",
-    "                    })\n",
-    "\n",
-    "                summary_df = pd.DataFrame(summary_rows)\n",
-    "                all_summaries.append(summary_df)\n",
-    "\n",
-    "                for key, df_r in raw_returns.items():\n",
-    "                    sheet_key = f\"{key}_α{ext_alpha*100:.0f}_act{act_share*100:.0f}\"\n",
-    "                    all_raw_returns[sheet_key] = df_r\n",
-    "\n",
-    "        final_summary = pd.concat(all_summaries, ignore_index=True)\n",
-    "\n",
-    "        inputs_dict = {\n",
-    "            \"Analysis mode\":                  \"alpha_shares\",\n",
-    "            \"External PA α fraction min (%)\": get_num(raw_params, \"external_pa_alpha_frac_min\", \"\"),\n",
-    "            \"External PA α fraction max (%)\": get_num(raw_params, \"external_pa_alpha_frac_max\", \"\"),\n",
-    "            \"External PA α fraction step (%)\":get_num(raw_params, \"external_pa_alpha_frac_step\", \"\"),\n",
-    "            \"Active share min (%)\":          get_num(raw_params, \"active_share_min\", \"\"),\n",
-    "            \"Active share max (%)\":          get_num(raw_params, \"active_share_max\", \"\"),\n",
-    "            \"Active share step (%)\":         get_num(raw_params, \"active_share_step\", \"\"),\n",
-    "            \"External PA capital (mm)\":      E_mm,\n",
-    "            \"Active Extension capital (mm)\": A_mm,\n",
-    "            \"Internal PA capital (mm)\":      Z_mm,\n",
-    "            \"Buffer multiple\":               buffer_multiple\n",
-    "        }\n",
-    "\n",
-    "        export_to_excel(inputs_dict, final_summary, all_raw_returns)\n",
-    "\n",
-    "        display_df = final_summary.copy()\n",
-    "        display_df = display_df.rename(columns={\n",
-    "            \"Annual Return\": \"Annual Return (%)\",\n",
-    "            \"Annual Vol\":    \"Annual Volatility (%)\",\n",
-    "            \"VaR 95\":        \"95%-VaR (%)\",\n",
-    "            \"TE (est.)\":     \"Tracking Error (%)\",\n",
-    "            \"Breach %\":      \"Breach Probability (%)\"\n",
-    "        })\n",
-    "        pct_cols = [\n",
-    "            \"Annual Return (%)\", \"Annual Volatility (%)\", \"95%-VaR (%)\",\n",
-    "            \"Tracking Error (%)\", \"Breach Probability (%)\"\n",
-    "        ]\n",
-    "        for col in pct_cols:\n",
-    "            display_df[col] = display_df[col].map(\"{:.1f}%\".format)\n",
-    "\n",
-    "        pd.set_option(\"display.max_rows\", None)\n",
-    "        print(\"\\n=== Summary Table (Alpha_Shares Mode) ===\\n\")\n",
-    "        print(display_df.to_string(index=False))\n",
-    "        print()\n",
-    "\n",
-    "    elif analysis_mode == \"vol_mult\":\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "        # 8.8.d) Vol_Mult mode: Sweep SD multiple; other params fixed at midpoint.\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "\n",
-    "        E_mm = get_num(raw_params, \"external_pa_capital\", None)\n",
-    "        A_mm = get_num(raw_params, \"active_ext_capital\",  None)\n",
-    "        Z_mm = get_num(raw_params, \"internal_pa_capital\", None)\n",
-    "        if any(v is None for v in [E_mm, A_mm, Z_mm]):\n",
-    "            raise RuntimeError(\n",
-    "                \"In 'vol_mult' mode, supply: External PA capital (mm), \"\n",
-    "                \"Active Extension capital (mm), Internal PA capital (mm).\"\n",
-    "            )\n",
-    "\n",
-    "        sd_list = build_range_int(\"sd_of_vol_mult\", default_midpoint=default_sd_mult)\n",
-    "\n",
-    "        mu_H_list    = [default_mu_H]\n",
-    "        sigma_H_list = [default_sigma_H]\n",
-    "        mu_E_list    = [default_mu_E]\n",
-    "        sigma_E_list = [default_sigma_E]\n",
-    "        mu_M_list    = [default_mu_M]\n",
-    "        sigma_M_list = [default_sigma_M]\n",
-    "        ext_alpha_list = [default_ext_alpha_frac]\n",
-    "        act_share_list = [default_act_share]\n",
-    "\n",
-    "        all_summaries = []\n",
-    "        all_raw_returns = {}\n",
-    "\n",
-    "        for sd_mult in sd_list:\n",
-    "            f_internal = simulate_financing(\n",
-    "                12, internal_financing_mean_annual/12, internal_financing_vol_annual/12,\n",
-    "                internal_spike_prob, internal_spike_factor\n",
-    "            )\n",
-    "            f_ext_pa = simulate_financing(\n",
-    "                12, ext_pa_financing_mean_annual/12, ext_pa_financing_vol_annual/12,\n",
-    "                ext_pa_spike_prob, ext_pa_spike_factor\n",
-    "            )\n",
-    "            f_act_ext = simulate_financing(\n",
-    "                12, act_ext_financing_mean_annual/12, act_ext_financing_vol_annual/12,\n",
-    "                act_ext_spike_prob, act_ext_spike_factor\n",
-    "            )\n",
-    "\n",
-    "            cov_mat = build_cov_matrix(\n",
-    "                rho_idx_H, rho_idx_E, rho_idx_M,\n",
-    "                rho_H_E, rho_H_M, rho_E_M,\n",
-    "                idx_sigma, default_sigma_H, default_sigma_E, default_sigma_M\n",
-    "            )\n",
-    "\n",
-    "            N_SIMULATIONS = get_num(raw_params, \"N_SIMULATIONS\", N_SIMULATIONS)\n",
-    "            N_MONTHS      = get_num(raw_params, \"N_MONTHS\",    12)\n",
-    "\n",
-    "            sims = np.random.multivariate_normal(\n",
-    "                [mu_idx, default_mu_H, default_mu_E, default_mu_M],\n",
-    "                cov_mat,\n",
-    "                size=(N_SIMULATIONS, N_MONTHS)\n",
-    "            )\n",
-    "\n",
-    "            f_int_matrix    = np.tile(f_internal, (N_SIMULATIONS, 1))\n",
-    "            f_ext_pa_matrix = np.tile(f_ext_pa,    (N_SIMULATIONS, 1))\n",
-    "            f_act_ext_matrix= np.tile(f_act_ext,   (N_SIMULATIONS, 1))\n",
-    "\n",
-    "            results = {\n",
-    "                \"Base\":       np.zeros(N_SIMULATIONS),\n",
-    "                \"ExternalPA\": np.zeros(N_SIMULATIONS),\n",
-    "                \"ActiveExt\":  np.zeros(N_SIMULATIONS)\n",
-    "            }\n",
-    "            dates_sim = pd.date_range(\n",
-    "                start=idx_series.index[-1] + pd.DateOffset(months=1),\n",
-    "                periods=N_MONTHS, freq=\"ME\"\n",
-    "            )\n",
-    "            raw_returns = {\n",
-    "                \"Base\":       pd.DataFrame(index=dates_sim),\n",
-    "                \"ExternalPA\": pd.DataFrame(index=dates_sim),\n",
-    "                \"ActiveExt\":  pd.DataFrame(index=dates_sim),\n",
-    "            }\n",
-    "\n",
-    "            for sim_i in range(N_SIMULATIONS):\n",
-    "                r_beta = sims[sim_i, :, 0]\n",
-    "                r_H    = sims[sim_i, :, 1]\n",
-    "                r_E    = sims[sim_i, :, 2]\n",
-    "                r_M    = sims[sim_i, :, 3]\n",
-    "\n",
-    "                R_base   = (r_beta - f_int_matrix[sim_i]) + r_H\n",
-    "                R_extpa  = (r_beta - f_ext_pa_matrix[sim_i]) * default_ext_alpha_frac + r_M * default_ext_alpha_frac\n",
-    "                R_actext = (r_beta - f_act_ext_matrix[sim_i]) * default_act_share + r_E * default_act_share\n",
-    "\n",
-    "                results[\"Base\"][sim_i]       = np.prod(1 + R_base) - 1\n",
-    "                results[\"ExternalPA\"][sim_i] = np.prod(1 + R_extpa) - 1\n",
-    "                results[\"ActiveExt\"][sim_i]  = np.prod(1 + R_actext) - 1\n",
-    "\n",
-    "                if sim_i == 0:\n",
-    "                    raw_returns[\"Base\"]       = pd.DataFrame({\"Base\": R_base}, index=dates_sim)\n",
-    "                    raw_returns[\"ExternalPA\"] = pd.DataFrame({\"ExternalPA\": R_extpa}, index=dates_sim)\n",
-    "                    raw_returns[\"ActiveExt\"]  = pd.DataFrame({\"ActiveExt\": R_actext}, index=dates_sim)\n",
-    "\n",
-    "            df_yearly = pd.DataFrame(results)\n",
-    "            summary_rows = []\n",
-    "            for cfg, arr in df_yearly.items():\n",
-    "                ann_ret = np.mean(arr)\n",
-    "                ann_vol = np.std(arr, ddof=1)\n",
-    "                var_95  = np.percentile(arr, 5)\n",
-    "                te      = np.nan\n",
-    "\n",
-    "                mr_series = raw_returns[cfg].iloc[:, 0]\n",
-    "                threshold = - (sd_mult * idx_sigma)\n",
-    "                breach_pct = np.mean(mr_series < threshold) * 100\n",
-    "\n",
-    "                summary_rows.append({\n",
-    "                    \"Config\":        cfg,\n",
-    "                    \"SD mult\":       sd_mult,\n",
-    "                    \"Internal PA (mm)\": Z_mm,\n",
-    "                    \"External PA (mm)\": E_mm,\n",
-    "                    \"Active Ext (mm)\":  A_mm,\n",
-    "                    \"Annual Return\":      ann_ret,\n",
-    "                    \"Annual Vol\":         ann_vol,\n",
-    "                    \"VaR 95\":             var_95,\n",
-    "                    \"TE (est.)\":          te,\n",
-    "                    \"Breach %\":           breach_pct\n",
-    "                })\n",
-    "\n",
-    "            summary_df = pd.DataFrame(summary_rows)\n",
-    "            all_summaries.append(summary_df)\n",
-    "\n",
-    "            for key, df_r in raw_returns.items():\n",
-    "                sheet_key = f\"{key}_SD{sd_mult}\"\n",
-    "                all_raw_returns[sheet_key] = df_r\n",
-    "\n",
-    "        final_summary = pd.concat(all_summaries, ignore_index=True)\n",
-    "\n",
-    "        inputs_dict = {\n",
-    "            \"Analysis mode\":        \"vol_mult\",\n",
-    "            \"SD multiple min\":      get_num(raw_params, \"sd_of_vol_mult_min\", \"\"),\n",
-    "            \"SD multiple max\":      get_num(raw_params, \"sd_of_vol_mult_max\", \"\"),\n",
-    "            \"SD multiple step\":     get_num(raw_params, \"sd_of_vol_mult_step\", \"\"),\n",
-    "            \"External PA capital (mm)\":     E_mm,\n",
-    "            \"Active Extension capital (mm)\":A_mm,\n",
-    "            \"Internal PA capital (mm)\":     Z_mm,\n",
-    "            \"Buffer multiple\":     buffer_multiple\n",
-    "        }\n",
-    "\n",
-    "        export_to_excel(inputs_dict, final_summary, all_raw_returns)\n",
-    "\n",
-    "        display_df = final_summary.copy()\n",
-    "        display_df = display_df.rename(columns={\n",
-    "            \"Annual Return\": \"Annual Return (%)\",\n",
-    "            \"Annual Vol\":    \"Annual Volatility (%)\",\n",
-    "            \"VaR 95\":        \"95%-VaR (%)\",\n",
-    "            \"TE (est.)\":     \"Tracking Error (%)\",\n",
-    "            \"Breach %\":      \"Breach Probability (%)\"\n",
-    "        })\n",
-    "        pct_cols = [\n",
-    "            \"Annual Return (%)\", \"Annual Volatility (%)\", \"95%-VaR (%)\",\n",
-    "            \"Tracking Error (%)\", \"Breach Probability (%)\"\n",
-    "        ]\n",
-    "        for col in pct_cols:\n",
-    "            display_df[col] = display_df[col].map(\"{:.1f}%\".format)\n",
-    "\n",
-    "        pd.set_option(\"display.max_rows\", None)\n",
-    "        print(\"\\n=== Summary Table (Vol_Mult Mode) ===\\n\")\n",
-    "        print(display_df.to_string(index=False))\n",
-    "        print()\n",
-    "\n",
-    "    else:\n",
-    "        raise RuntimeError(f\"Unexpected analysis mode: '{analysis_mode}'\")\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "ff0ff261-33e0-4623-86c6-7c24c1c78c51",
-   "metadata": {
-    "jp-MarkdownHeadingCollapsed": true
-   },
-   "outputs": [],
-   "source": [
-    "export_to_excel(\n",
-    "    inputs_dict,\n",
-    "    final_summary,\n",
-    "    all_raw_returns,\n",
-    "    filename=\"/Users/teacher/Library/CloudStorage/Dropbox/Learning/Code/Portable\\ Alpha-Extension\\ Model/Outputs.xlsx\"\n",
-    ")\n",
-    "\n",
-    "print(\"Wrote Outputs.xlsx\")"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "94211527-7c1d-45c9-b9f3-1e7291038bfd",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "os.chdir(\"/Users/teacher/Library/CloudStorage/Dropbox/Learning/Code/Portable\\ Alpha-Extension\\ Model\")\n",
-    "# 1) Print the current working directory\n",
-    "print(\"Current working directory:\", os.getcwd())\n",
-    "\n",
-    "# 2) Compute the absolute path to the file you just wrote\n",
-    "output_path = os.path.abspath(\"Outputs.xlsx\")\n",
-    "print(\"Expected output file path:\", output_path)\n",
-    "\n",
-    "# 3) Check if it exists on disk\n",
-    "print(\"File exists?\", os.path.exists(output_path))\n",
-    "\n",
-    "# 4) List files in this directory to confirm\n",
-    "print(\"\\nDirectory listing:\")\n",
-    "for f in os.listdir(\".\"):\n",
-    "    print(\" \", f)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "8b0c6a8c-9c64-4f31-bae5-192536158000",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "print(\"📂 Current working directory:\", os.getcwd())"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "1e3414b6-e952-4ed6-8097-7dc7ea975528",
-   "metadata": {},
-   "source": [
-    "# Portable Alpha + Active Extension Model Specification\n",
-    "\n",
-    "Below is a comprehensive description of the updated portable‐alpha + active‐extension model, ready to paste into a Markdown cell. Every section is clearly labeled, and all equations use LaTeX delimiters.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 1. Purpose and High-Level Overview\n",
-    "\n",
-    "**Goal:**  \n",
-    "Construct a Monte Carlo framework that allocates a fixed pool of capital (e.g. \\$1 b) across three “sleeves” (Internal, External Portable-Alpha, and Active Extension), simulates joint returns on Index, In-House α, Extension α, and External PA α, and then reports portfolio metrics (annual return, volatility, VaR, tracking error, breach probability).\n",
-    "\n",
-    "Key innovations vs. a simpler portable-alpha model:  \n",
-    "1. **Separate “reference period”** used to compute index volatility σₙ, which in turn determines the cash/margin needed to synthetically hold 1:1 index exposure.  \n",
-    "2. **Three explicit buckets** whose dollar-amounts sum to \\$ 1 b, avoiding any double-counting of β + α exposures.  \n",
-    "3. **Active Extension bucket** that can be “150/50” or “170/70” long/short, specified by an “Active share (%)” input. By default, we assume 150/50 (i.e. Active share = 50 %) unless the user overrides.\n",
-    "\n",
-    "Everything ultimately flows into a set of formulas—one per bucket—that map monthly draws of\n",
-    "\\[\n",
-    "(r_{\\beta},\\,r_{H},\\,r_{E},\\,r_{M}) \n",
-    "\\quad\\text{and}\\quad\n",
-    "f_t\n",
-    "\\]\n",
-    "into portfolio returns.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 2. Core Assumptions and Variables\n",
-    "\n",
-    "1. **Index (β) returns**  \n",
-    "   - We load a historical time series of monthly total returns on the S&P 500 TR (or whichever index) from a CSV.  \n",
-    "   - We partition that series into:  \n",
-    "     1. A **reference window** (e.g. 2010 – 2014) used to compute “reference volatility” σₙ.  \n",
-    "     2. An **analysis window** (e.g. 2015 – 2020) used to compute the actual mean (μₙ) and volatility (σₙ) that drive our Monte Carlo draws.\n",
-    "\n",
-    "2. **Three α-streams** (simulated jointly with β)  \n",
-    "   - **In-House α** \\($r_H$\\):  \n",
-    "     - Mean = μ_H/12  \n",
-    "     - Vol = σ_H / √12  \n",
-    "     - Correlation ρ_{β,H} with β.  \n",
-    "   - **Extension α** \\($r_E$\\):  \n",
-    "     - Mean = μ_E/12  \n",
-    "     - Vol = σ_E / √12  \n",
-    "     - Correlation ρ_{β,E} with β.  \n",
-    "   - **External PA α** \\($r_M$\\):  \n",
-    "     - Mean = μ_M/12  \n",
-    "     - Vol = σ_M / √12  \n",
-    "     - Correlation ρ_{β,M} with β.\n",
-    "\n",
-    "3. **Financing spread** \\($f_t$\\)  \n",
-    "   - A month-by-month random draw around a drift (financing_mean/12) with vol (financing_vol/12) and occasional jumps of size (spike_factor × (financing_vol/12)), happening with probability spike_prob.  \n",
-    "   - In each month, any bucket that holds \\((r_{\\beta} − f_t)\\) is charged that financing cost.\n",
-    "\n",
-    "4. **Total fund capital** (in millions, default = 1000)  \n",
-    "   - We allocate exactly \\$ 1 b across three buckets (plus any residual “cash-leftover” after margin).\n",
-    "\n",
-    "5. **Standard-deviation multiple** (sd_of_vol_mult, default = 3)  \n",
-    "   - “To hold \\$ 1 b of index exposure, you must keep aside cash = σₙ × (sd_of_vol_mult) × \\$ 1 b.”  \n",
-    "   - That cash is the **internal beta-backing** or “margin cash,” needed for futures/swaps.\n",
-    "\n",
-    "6. **Three capital buckets** (all in \\$ mm, must sum to 1000)  \n",
-    "   1. **External PA capital** \\($X$\\)  \n",
-    "      - Manager takes \\$ X m; buys \\$ X m of index (β) and \\((external_pa_alpha_frac × X m)\\) of α.  \n",
-    "      - Default α fraction = 50 % (\\(\\theta_{\\mathrm{ExtPA}}=0.50\\)).  \n",
-    "   2. **Active Extension capital** \\($Y$\\)  \n",
-    "      - Manager runs a long/short portfolio with **Active share** \\(S\\).  \n",
-    "      - By default, “150/50” means \\(S=0.50\\) (i.e. 150 % long, 50 % short → net 100 %).  \n",
-    "   3. **Internal PA capital** \\($Z$\\)  \n",
-    "      - Runs in-house α; the remainder of internal cash (beyond margin) is used here.\n",
-    "\n",
-    "7. **Internal beta backing** \\($W$\\) (computed, not user-entered)  \n",
-    "   \\[\n",
-    "     W = \\sigma_{\\text{ref}} \\times (\\mathrm{sd\\_of\\_vol\\_mult}) \\times 1000 \\quad (\\text{\\$ mm}).\n",
-    "   \\]\n",
-    "   - That cash sits in reserve to back a \\$ 1 b index position via futures/swaps.  \n",
-    "   - Because the external PA and active-extension managers each hold index exposure “inside” their \\$ X m or \\$ Y m, **you do not hold margin for that portion**. You only hold \\(W\\) for the total \\$ 1 b.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 3. Capital-Allocation Equations\n",
-    "\n",
-    "1. **Check**:  \n",
-    "   \\[\n",
-    "     X + Y + Z \\;=\\; 1000 \\quad(\\text{\\$ mm}),\n",
-    "   \\]  \n",
-    "   where  \n",
-    "   - \\(X = \\text{external\\_pa\\_capital},\\)  \n",
-    "   - \\(Y = \\text{active\\_ext\\_capital},\\)  \n",
-    "   - \\(Z = \\text{internal\\_pa\\_capital}.\\)\n",
-    "\n",
-    "2. **Margin (internal beta backing)**:  \n",
-    "   \\[\n",
-    "     W = \\sigma_{\\text{ref}} \\times (\\mathrm{sd\\_of\\_vol\\_mult}) \\times 1000 \\quad (\\text{\\$ mm}).\n",
-    "   \\]\n",
-    "\n",
-    "3. **Internal cash leftover (runs In-House PA)**:  \n",
-    "   \\[\n",
-    "     \\text{internal\\_cash\\_leftover} \n",
-    "     = 1000 - W - Z \\quad (\\text{\\$ mm}).\n",
-    "   \\]\n",
-    "\n",
-    "   - If \\(W + Z > 1000\\), the capital structure is infeasible (you cannot hold margin + in-house PA + external buckets all on \\$ 1 b).\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 4. Return Equations\n",
-    "\n",
-    "We simulate, for each month \\(t\\):\n",
-    "\n",
-    "\\[\n",
-    "(r_{\\beta,t},\\,r_{H,t},\\,r_{E,t},\\,r_{M,t}) \n",
-    "\\;\\sim\\;\\text{MVN}\\bigl([\\mu_{\\beta},\\,\\mu_H,\\,\\mu_E,\\,\\mu_M],\\,\\Sigma\\bigr),\n",
-    "\\]\n",
-    "with\n",
-    "- \\(\\mu_{\\beta} = \\mu_{\\text{idx}}\\) (monthly mean from analysis window),  \n",
-    "- \\(\\mu_H = \\frac{\\mu_H^{(\\text{annual})}}{12}\\),  \n",
-    "- \\(\\mu_E = \\frac{\\mu_E^{(\\text{annual})}}{12}\\),  \n",
-    "- \\(\\mu_M = \\frac{\\mu_M^{(\\text{annual})}}{12}\\).  \n",
-    "\n",
-    "Covariance \\(\\Sigma\\) built from:  \n",
-    "- \\(\\sigma_{\\beta} = \\sigma_{\\text{ref}}\\) (monthly vol from reference window),  \n",
-    "- \\(\\sigma_H = \\sigma_H^{(\\text{annual})}/\\sqrt{12}\\),  \n",
-    "- \\(\\sigma_E = \\sigma_E^{(\\text{annual})}/\\sqrt{12}\\),  \n",
-    "- \\(\\sigma_M = \\sigma_M^{(\\text{annual})}/\\sqrt{12}\\),  \n",
-    "- Pairwise correlations \\(\\rho_{\\beta,H},\\,\\rho_{\\beta,E},\\,\\rho_{\\beta,M},\\,\\rho_{H,E},\\,\\dots\\).  \n",
-    "\n",
-    "Additionally, each month we draw a financing cost:\n",
-    "\\[\n",
-    "f_t = \\frac{\\text{financing_mean}}{12} + \\varepsilon_t,\\quad\n",
-    "\\varepsilon_t \\sim \\mathcal{N}\\bigl(0,\\;(\\tfrac{\\text{financing_vol}}{12})^2\\bigr),\n",
-    "\\]\n",
-    "with probability \\(\\text{spike_prob}\\) of a jump \\(=\\text{spike_factor} \\times \\frac{\\text{financing_vol}}{12}\\).\n",
-    "\n",
-    "---\n",
-    "\n",
-    "### 4.1. Base (All In-House) Strategy\n",
-    "\n",
-    "\\[\n",
-    "R_{\\text{Base},t}\n",
-    "= \\; (r_{\\beta,t} - f_t)\\,\\times\\,w_{\\beta_H}\n",
-    "\\;+\\; r_{H,t}\\,\\times\\,w_{\\alpha_H}.\n",
-    "\\]\n",
-    "By default, \\(w_{\\beta_H} = 0.50\\) and \\(w_{\\alpha_H} = 0.50\\).\n",
-    "\n",
-    "---\n",
-    "\n",
-    "### 4.2. External PA Strategy\n",
-    "\n",
-    "- Capital allocated: \\(X = \\text{external_pa_capital}\\).  \n",
-    "- Manager buys \\$ X m of index (β) and allocates \\(\\theta_{\\mathrm{ExtPA}} = \\text{external_pa_alpha_frac}\\) of that \\$ X m to α.  \n",
-    "\n",
-    "Return formula:\n",
-    "\\[\n",
-    "R_{\\text{ExtPA},t}\n",
-    "= \\underbrace{\\frac{X}{1000}}_{w_{\\beta}^{\\text{ExtPA}}}\\,(r_{\\beta,t} - f_t)\n",
-    "\\;+\\;\\underbrace{\\tfrac{X}{1000} \\,\\times\\,\\theta_{\\mathrm{ExtPA}}}_{w_{\\alpha}^{\\text{ExtPA}}}\\;(r_{M,t}).\n",
-    "\\]\n",
-    "- If \\(\\theta_{\\mathrm{ExtPA}} = 0.50\\), then half of \\$ X m is alpha, half is index.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "### 4.3. Active Extension Strategy\n",
-    "\n",
-    "- Capital allocated: \\(Y = \\text{active_ext_capital}\\).  \n",
-    "- Manager runs a long/short portfolio with **Active share** \\(S = \\frac{\\text{active_share_percent}}{100}\\).  \n",
-    "  - E.g. 150/50 → \\(S = 0.50\\).  \n",
-    "  - 170/70 → \\(S = 0.70\\).\n",
-    "\n",
-    "Return formula:\n",
-    "\\[\n",
-    "R_{\\text{ActExt},t}\n",
-    "= \\underbrace{\\frac{Y}{1000}}_{w_{\\beta}^{\\text{ActExt}}}\\,(r_{\\beta,t} - f_t)\n",
-    "\\;+\\;\\underbrace{\\frac{Y}{1000}\\,\\times\\,S}_{w_{\\alpha}^{\\text{ActExt}}}\\;(r_{E,t}).\n",
-    "\\]\n",
-    "- The manager’s long/short is embedded in \\(r_{E,t}\\).  \n",
-    "\n",
-    "---\n",
-    "\n",
-    "### 4.4. Internal Margin & Internal PA\n",
-    "\n",
-    "Because both external PA and active-extension managers hold their own index exposure, on your books you only need to hold margin for a single \\$ 1 b of index. That is:\n",
-    "\\[\n",
-    "W = \\sigma_{\\text{ref}} \\times (\\mathrm{sd\\_of\\_vol\\_mult}) \\times 1000 \\quad (\\text{\\$ mm}).\n",
-    "\\]\n",
-    "Then you also decide to run \\(Z = \\text{internal_pa_capital}\\) in-house PA:\n",
-    "\n",
-    "- **Internal Beta (margin):**  \n",
-    "  \\[\n",
-    "  R_{\\text{IntBet},t}\n",
-    "  = \\Bigl(\\tfrac{W}{1000}\\Bigr)\\,(r_{\\beta,t} - f_t).\n",
-    "  \\]\n",
-    "- **Internal PA alpha:**  \n",
-    "  \\[\n",
-    "  R_{\\text{IntPA},t}\n",
-    "  = \\Bigl(\\tfrac{Z}{1000}\\Bigr)\\,(r_{H,t}).\n",
-    "  \\]\n",
-    "- **Internal cash leftover:**  \n",
-    "  \\[\n",
-    "  \\text{internal\\_cash\\_leftover} = 1000 - W - Z \\quad (\\text{if positive, earns 0}).\n",
-    "  \\]\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 5. Putting It All Together in Simulation\n",
-    "\n",
-    "1. **Read user inputs** (via `load_parameters()`):\n",
-    "   - Dates: `start_date`, `end_date`, `ref_start_date`, `ref_end_date`\n",
-    "   - Vol/risk: `sd_of_vol_mult`\n",
-    "   - Returns: `financing_mean`, `financing_vol`, `μ_H`, `σ_H`, `μ_E`, `σ_E`, `μ_M`, `σ_M`\n",
-    "   - Correlations: `ρ_{β,H}`, `ρ_{β,E}`, `ρ_{β,M}`, `ρ_{H,E}`, `ρ_{H,M}`, `ρ_{E,M}`\n",
-    "   - Capital buckets: `external_pa_capital`, `external_pa_alpha_frac`, `active_ext_capital`, `active_share_percent`, `internal_pa_capital`\n",
-    "   - Total fund capital (mm): default = 1000\n",
-    "\n",
-    "2. **Load index CSV** → `idx_full` (monthly total returns).\n",
-    "\n",
-    "3. **Filter**  \n",
-    "   - **`idx_series`** = `idx_full[ start_date : end_date ]` → used for μ_β and σ_β.  \n",
-    "   - **`idx_ref`** = `idx_full[ ref_start_date : ref_end_date ]` → used for σ_ref.\n",
-    "\n",
-    "4. **Compute**  \n",
-    "   \\[\n",
-    "     \\mu_{\\beta} = \\mathrm{mean}(idx\\_series), \n",
-    "     \\quad\n",
-    "     \\sigma_{\\beta} = \\mathrm{std}(idx\\_series),\n",
-    "     \\quad\n",
-    "     \\sigma_{\\text{ref}} = \\mathrm{std}(idx\\_ref).\n",
-    "   \\]\n",
-    "\n",
-    "5. **Margin-backing**  \n",
-    "   \\[\n",
-    "     W = \\sigma_{\\text{ref}} \\times \\mathrm{sd\\_of\\_vol\\_mult} \\times 1000.\n",
-    "   \\]\n",
-    "   If \\(W + Z > 1000\\), error. Else compute\n",
-    "   \\[\n",
-    "     \\text{internal\\_cash\\_leftover} = 1000 - W - Z.\n",
-    "   \\]\n",
-    "\n",
-    "6. **Build covariance matrix** \\(\\Sigma\\) for \\((r_{\\beta}, r_H, r_E, r_M)\\) using  \n",
-    "   \\(\\sigma_{\\beta} = \\sigma_{\\text{ref}},\\; \\sigma_H = \\frac{\\sigma_H^{(\\text{annual})}}{\\sqrt{12}},\\; \\sigma_E = \\frac{\\sigma_E^{(\\text{annual})}}{\\sqrt{12}},\\; \\sigma_M = \\frac{\\sigma_M^{(\\text{annual})}}{\\sqrt{12}},\\)  \n",
-    "   and correlations.\n",
-    "\n",
-    "7. **Monte Carlo draws**:  \n",
-    "   For each of \\(N_{\\text{SIMULATIONS}}\\) trials, simulate a \\(T=N_{\\text{MONTHS}}\\)-month path of \\(\\,(r_{\\beta,t},\\,r_{H,t},\\,r_{E,t},\\,r_{M,t})\\) and financing \\(f_t\\).\n",
-    "\n",
-    "8. **Compute monthly returns** for each bucket:\n",
-    "   - **Base**:  \n",
-    "     \\[\n",
-    "       R_{\\text{Base},t} \n",
-    "       = (r_{\\beta,t} - f_t)\\,w_{\\beta_H} \\;+\\; r_{H,t}\\,w_{\\alpha_H}.\n",
-    "     \\]\n",
-    "   - **External PA**:  \n",
-    "     \\[\n",
-    "       R_{\\text{ExtPA},t} \n",
-    "       = \\bigl(\\tfrac{X}{1000}\\bigr)(r_{\\beta,t} - f_t) \n",
-    "       \\;+\\; \\bigl(\\tfrac{X}{1000}\\,\\theta_{\\mathrm{ExtPA}}\\bigr)(r_{M,t}).\n",
-    "     \\]\n",
-    "   - **Active Extension**:  \n",
-    "     \\[\n",
-    "       R_{\\text{ActExt},t} \n",
-    "       = \\bigl(\\tfrac{Y}{1000}\\bigr)(r_{\\beta,t} - f_t) \n",
-    "       \\;+\\; \\bigl(\\tfrac{Y}{1000}\\,S\\bigr)(r_{E,t}).\n",
-    "     \\]\n",
-    "   - **Internal Beta**:  \n",
-    "     \\[\n",
-    "       R_{\\text{IntBet},t} \n",
-    "       = \\bigl(\\tfrac{W}{1000}\\bigr)(r_{\\beta,t} - f_t).\n",
-    "     \\]\n",
-    "   - **Internal PA α**:  \n",
-    "     \\[\n",
-    "       R_{\\text{IntPA},t} \n",
-    "       = \\bigl(\\tfrac{Z}{1000}\\bigr)(r_{H,t}).\n",
-    "     \\]\n",
-    "\n",
-    "   Note: We only report three portfolios—“Base,” “ExternalPA,” and “ActiveExt.” Each one compounds its own monthly returns for a 12-month horizon:\n",
-    "   \\[\n",
-    "     R_{\\text{bucket}}^{\\text{(year)}} \n",
-    "     = \\prod_{t=1}^{12} (1 + R_{\\text{bucket},t}) - 1.\n",
-    "   \\]\n",
-    "\n",
-    "9. **Compute performance metrics** for each portfolio’s annual returns:\n",
-    "   - **Ann Return** = sample mean.  \n",
-    "   - **Ann Vol** = sample standard deviation.  \n",
-    "   - **VaR 95%** = 5th percentile.  \n",
-    "   - **Tracking Error** = std of (bucket_return − index_return).  \n",
-    "   - **Breach Probability** = % of months (in the first sim path) where \\((r_{\\text{bucket},t} < -\\,\\mathrm{buffer\\_multiple}\\times\\sigma_{\\beta})\\).\n",
-    "\n",
-    "10. **Export**  \n",
-    "    - **Inputs sheet:** all parameters (dates, vol caps, bucket sizes, α fractions, active share, σ_ref, W, internal cash leftover, etc.).  \n",
-    "    - **Summary sheet:** metrics for “Base,” “ExternalPA,” and “ActiveExt.”  \n",
-    "    - **Raw returns sheets:** monthly paths for each bucket (first simulation) so users can inspect breach months.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 6. Input Parameters Summary\n",
-    "\n",
-    "Below is a consolidated list of every input variable that must appear in the “friendly” CSV:\n",
-    "\n",
-    "1. **Date ranges**  \n",
-    "   - `Start date` → `start_date` (analysis window begin).  \n",
-    "   - `End date` → `end_date` (analysis window end).  \n",
-    "   - `Reference start date` → `ref_start_date` (for σ_ref).  \n",
-    "   - `Reference end date` → `ref_end_date` (for σ_ref).  \n",
-    "\n",
-    "2. **Financing parameters**  \n",
-    "   - `Annual financing mean (%)` → `financing_mean_annual` (default = 0.50 %).  \n",
-    "   - `Annual financing vol (%)` → `financing_vol_annual` (default = 0.10 %).  \n",
-    "   - `Monthly spike probability` → `spike_prob` (default = 2 %).  \n",
-    "   - `Spike size (σ × multiplier)` → `spike_factor` (default = 2.25).  \n",
-    "\n",
-    "3. **In-House PA parameters**  \n",
-    "   - `In-House annual return (%)` → `mu_H` (default = 4.00 %).  \n",
-    "   - `In-House annual vol (%)` → `sigma_H` (default = 1.00 %).  \n",
-    "   - `In-House β` → `w_beta_H` (default = 0.50).  \n",
-    "   - `In-House α` → `w_alpha_H` (default = 0.50).  \n",
-    "\n",
-    "4. **Extension α parameters**  \n",
-    "   - `Alpha-Extension annual return (%)` → `mu_E` (default = 5.00 %).  \n",
-    "   - `Alpha-Extension annual vol (%)` → `sigma_E` (default = 2.00 %).  \n",
-    "   - `Active Extension capital (mm)` → `active_ext_capital` (default = 0).  \n",
-    "   - `Active share (%)` → `active_share_percent` (default = 50 % ⇒ a 150/50 program).  \n",
-    "\n",
-    "5. **External PA α parameters**  \n",
-    "   - `External annual return (%)` → `mu_M` (default = 3.00 %).  \n",
-    "   - `External annual vol (%)` → `sigma_M` (default = 2.00 %).  \n",
-    "   - `External PA capital (mm)` → `external_pa_capital` (default = 0).  \n",
-    "   - `External PA α fraction (%)` → `external_pa_alpha_frac` (default = 50 %).  \n",
-    "\n",
-    "6. **Correlations**  \n",
-    "   - `Corr index–In-House` → `rho_idx_H` (default = 0.05).  \n",
-    "   - `Corr index–Alpha-Extension` → `rho_idx_E` (default = 0.00).  \n",
-    "   - `Corr index–External` → `rho_idx_M` (default = 0.00).  \n",
-    "   - `Corr In-House–Alpha-Extension` → `rho_H_E` (default = 0.10).  \n",
-    "   - `Corr In-House–External` → `rho_H_M` (default = 0.10).  \n",
-    "   - `Corr Alpha-Extension–External` → `rho_E_M` (default = 0.00).  \n",
-    "\n",
-    "7. **Capital & risk backing**  \n",
-    "   - `Total fund capital (mm)` → `total_fund_capital` (default = 1000).  \n",
-    "   - `Standard deviation multiple` → `sd_of_vol_mult` (default = 3).  \n",
-    "   - `Internal PA capital (mm)` → `internal_pa_capital` (default = 0).  \n",
-    "   - `Buffer multiple` → `buffer_multiple` (default = 3).  \n",
-    "\n",
-    "8. **Legacy/Optional**  \n",
-    "   - `X grid (mm)` → `X_grid_list` (list of X values).  \n",
-    "   - `External manager α fractions` → `EM_thetas_list`.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 7. Output Considerations\n",
-    "\n",
-    "1. **Inputs sheet (Excel):**  \n",
-    "   List every single parameter, including:  \n",
-    "   - Date windows (analysis and reference),  \n",
-    "   - Financing parameters,  \n",
-    "   - α-stream parameters,  \n",
-    "   - Correlations,  \n",
-    "   - Capital buckets (X, Y, Z),  \n",
-    "   - SD multiple, margin backing \\(W\\), internal cash leftover,  \n",
-    "   - Active share, etc.\n",
-    "\n",
-    "2. **Summary sheet (Excel):**  \n",
-    "   For each portfolio (“Base,” “ExternalPA,” “ActiveExt”), show:  \n",
-    "   - Annual Return (%),  \n",
-    "   - Annual Volatility (%),  \n",
-    "   - 95 % VaR (%),  \n",
-    "   - Tracking Error (%),  \n",
-    "   - Breach Probability (%).\n",
-    "\n",
-    "3. **Raw returns sheets (Excel):**  \n",
-    "   Monthly paths for each bucket (first simulation), so users can inspect “breach” months where \\(R_{t} < -(\\text{buffer_multiple} × σ_{\\beta})\\).\n",
-    "\n",
-    "4. **Console output:**  \n",
-    "   A “human‐friendly” summary, e.g.:  \n",
-    "   > For “ExternalPA (X = 300, 50 % α)”:  \n",
-    "   > • Expected annual return: 10.2 %  \n",
-    "   > • Annual volatility: 12.3 %  \n",
-    "   > • 95 % VaR: −3.4 %  \n",
-    "   > • Tracking error: 8.7 %  \n",
-    "   > • Breach probability: 2.0 %.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 8. Intuition Behind Key Pieces\n",
-    "\n",
-    "1. **Why a separate reference period?**  \n",
-    "   - If you measure index volatility over the same window you analyze (e.g. 2015–2020), you capture “current regime” vol. Often, managers prefer a longer/different window (e.g. 2010–2014) to gauge typical funding volatility. That reference σₙ, times a multiple (e.g. 3×), tells you how much cash to set aside to back \\$ 1 b of index exposure.\n",
-    "\n",
-    "2. **Why Active share as a percentage?**  \n",
-    "   - A “150/50” program has 150 % long and 50 % short = net 100 %. Its “active share” is reported as 50 %.  \n",
-    "   - If you want “170/70,” then active share = 70 %.  \n",
-    "   - The code converts “Active share (%)” to decimal \\(S\\). For a 150/50 program, the default is 50 % (\\(S = 0.50\\)).\n",
-    "\n",
-    "3. **Why each bucket’s formula ensures no double-counting**  \n",
-    "   - Whenever you give \\$ X m to External PA, that manager holds the index exposure on your behalf. You do not hold margin for that portion. Similarly, the Active Extension manager holds their own index.  \n",
-    "   - On your books, you only need to hold margin for a single \\$ 1 b index. That is \\(W\\).  \n",
-    "   - Once you hand \\$ X m to external PA and \\$ Y m to active ext, **both managers** hold \\((X + Y)\\) of index on your behalf. So your margin \\(W\\) backs the *entire* \\$ 1 b, not just the “leftover” portion.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 9. Step-by-Step Implementation Checklist\n",
-    "\n",
-    "1. **Read and parse user parameters** (dates, vols, α fractions, active share, capital buckets, etc.).  \n",
-    "2. **Load index CSV** → `idx_full`.  \n",
-    "3. **Filter** → `idx_ref` for σ_ref; `idx_series` for μ_β and σ_β.  \n",
-    "4. **Compute**:  \n",
-    "   \\[\n",
-    "     μ_β = \\mathrm{mean}(idx\\_series), \n",
-    "     \\quad\n",
-    "     σ_β = \\mathrm{std}(idx\\_series), \n",
-    "     \\quad\n",
-    "     σ_{\\text{ref}} = \\mathrm{std}(idx\\_ref).\n",
-    "   \\]\n",
-    "5. **Margin-backing**:  \n",
-    "   \\[\n",
-    "     W = σ_{\\text{ref}} × (\\mathrm{sd\\_of\\_vol\\_mult}) × 1000.\n",
-    "   \\]\n",
-    "   Check \\(W + Z ≤ 1000\\). Compute leftover internal cash = \\(1000 - W - Z\\).\n",
-    "\n",
-    "6. **Build covariance matrix** using \\((σ_{\\text{ref}},\\,σ_H/√{12},\\,σ_E/√{12},\\,σ_M/√{12})\\) plus correlations.\n",
-    "\n",
-    "7. **Monte Carlo draws**:  \n",
-    "   For each of \\(N_{\\mathrm{SIM}}\\) trials, simulate a path of length \\(T = N_{\\mathrm{MONTHS}}\\) for \\((r_{\\beta,t},\\,r_{H,t},\\,r_{E,t},\\,r_{M,t})\\) and financing \\(f_t\\).\n",
-    "\n",
-    "8. **Compute monthly returns**:\n",
-    "   - **Base**:  \n",
-    "     \\[\n",
-    "       R_{\\text{Base},t} = (r_{\\beta,t} - f_t)\\,w_{\\beta_H} + r_{H,t}\\,w_{\\alpha_H}.\n",
-    "     \\]\n",
-    "   - **External PA**:  \n",
-    "     \\[\n",
-    "       R_{\\text{ExtPA},t}\n",
-    "       = \\Bigl(\\tfrac{X}{1000}\\Bigr)(r_{\\beta,t} - f_t)\n",
-    "       \\;+\\;\\Bigl(\\tfrac{X}{1000}\\,\\theta_{\\mathrm{ExtPA}}\\Bigr)(r_{M,t}).\n",
-    "     \\]\n",
-    "   - **Active Extension**:  \n",
-    "     \\[\n",
-    "       R_{\\text{ActExt},t}\n",
-    "       = \\Bigl(\\tfrac{Y}{1000}\\Bigr)(r_{\\beta,t} - f_t)\n",
-    "       \\;+\\;\\Bigl(\\tfrac{Y}{1000}\\,S\\Bigr)(r_{E,t}).\n",
-    "     \\]\n",
-    "   - **Internal Beta**:  \n",
-    "     \\[\n",
-    "       R_{\\text{IntBet},t} \n",
-    "       = \\Bigl(\\tfrac{W}{1000}\\Bigr)(r_{\\beta,t} - f_t).\n",
-    "     \\]\n",
-    "   - **Internal PA α**:  \n",
-    "     \\[\n",
-    "       R_{\\text{IntPA},t} \n",
-    "       = \\Bigl(\\tfrac{Z}{1000}\\Bigr)(r_{H,t}).\n",
-    "     \\]\n",
-    "\n",
-    "9. **Aggregate monthly → annual returns** for “Base,” “ExternalPA,” “ActiveExt.”  \n",
-    "10. **Compute metrics**:  \n",
-    "    - Ann Return, Ann Vol, VaR 95, Tracking Error, Breach Probability.  \n",
-    "11. **Export** Inputs, Summary, Raw returns to Excel + print narrative.\n",
-    "\n",
-    "---"
-   ]
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python (base)",
-   "language": "python",
-   "name": "base"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.12.2"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
diff --git a/.ipynb_checkpoints/Portable_Alpha_Vectors-checkpoint.ipynb b/.ipynb_checkpoints/Portable_Alpha_Vectors-checkpoint.ipynb
deleted file mode 100644
index 93ca461188f512006d94d5ba072cedc05f576c1a..0000000000000000000000000000000000000000
--- a/.ipynb_checkpoints/Portable_Alpha_Vectors-checkpoint.ipynb
+++ /dev/null
@@ -1,1961 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "markdown",
-   "id": "094e50b2-1387-44d0-b1ca-c10c0db9289e",
-   "metadata": {},
-   "source": [
-    "**_🚨 IMPORTANT: BEFORE RUNNING THE PROGRAM, SAVE THIS SHEET AS A CSV FILE! 🚨_**\n",
-    "\n",
-    "import pandas as pd\n",
-    "\n",
-    "rows = [\n",
-    "    (\"Parameter\", \"Value\", \"Notes\"),  # Header row\n",
-    "    (\"Analysis mode\", \"\", \"Choose one: capital, returns, alpha_shares, vol_mult\"),\n",
-    "    # Capital mode\n",
-    "    (\"Max external combined (%)\", \"\", \"capital mode: max % for (External PA + Active Ext)\"),\n",
-    "    (\"External step size (%)\", \"\", \"capital mode: increment for external %\"),\n",
-    "    # Fixed capital (for returns / alpha_shares / vol_mult)\n",
-    "    (\"External PA capital (mm)\", \"\", \"returns/alpha_shares/vol_mult modes: allocation in mm\"),\n",
-    "    (\"Active Extension capital (mm)\", \"\", \"\"),\n",
-    "    (\"Internal PA capital (mm)\", \"\", \"\"),\n",
-    "    # Returns mode ranges (min/max/step)\n",
-    "    (\"In-House return min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"In-House return max (%)\", \"\", \"\"),\n",
-    "    (\"In-House return step (%)\", \"\", \"\"),\n",
-    "    (\"In-House vol min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"In-House vol max (%)\", \"\", \"\"),\n",
-    "    (\"In-House vol step (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension return min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"Alpha-Extension return max (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension return step (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension vol min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"Alpha-Extension vol max (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension vol step (%)\", \"\", \"\"),\n",
-    "    (\"External return min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"External return max (%)\", \"\", \"\"),\n",
-    "    (\"External return step (%)\", \"\", \"\"),\n",
-    "    (\"External vol min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"External vol max (%)\", \"\", \"\"),\n",
-    "    (\"External vol step (%)\", \"\", \"\"),\n",
-    "    # Alpha_Shares mode ranges\n",
-    "    (\"External PA α fraction min (%)\", \"\", \"alpha_shares mode\"),\n",
-    "    (\"External PA α fraction max (%)\", \"\", \"\"),\n",
-    "    (\"External PA α fraction step (%)\", \"\", \"\"),\n",
-    "    (\"Active share min (%)\", \"\", \"alpha_shares mode\"),\n",
-    "    (\"Active share max (%)\", \"\", \"\"),\n",
-    "    (\"Active share step (%)\", \"\", \"\"),\n",
-    "    # Vol_Mult mode ranges\n",
-    "    (\"SD multiple min\", \"\", \"vol_mult mode\"),\n",
-    "    (\"SD multiple max\", \"\", \"\"),\n",
-    "    (\"SD multiple step\", \"\", \"\"),\n",
-    "    # Financing & overrides\n",
-    "    (\"Annual financing mean (%)\", \"\", \"global financing\"),\n",
-    "    (\"Annual financing vol (%)\", \"\", \"\"),\n",
-    "    (\"Monthly spike probability\", \"\", \"\"),\n",
-    "    (\"Spike size (σ × multiplier)\", \"\", \"\"),\n",
-    "    (\"Internal financing mean (%)\", \"\", \"internal override\"),\n",
-    "    (\"Internal financing vol (%)\", \"\", \"\"),\n",
-    "    (\"Internal monthly spike probability\", \"\", \"\"),\n",
-    "    (\"Internal spike size (σ × multiplier)\", \"\", \"\"),\n",
-    "    (\"External PA financing mean (%)\", \"\", \"ext PA override\"),\n",
-    "    (\"External PA financing vol (%)\", \"\", \"\"),\n",
-    "    (\"External PA monthly spike probability\", \"\", \"\"),\n",
-    "    (\"External PA spike size (σ × multiplier)\", \"\", \"\"),\n",
-    "    (\"Active Extension financing mean (%)\", \"\", \"active ext override\"),\n",
-    "    (\"Active Extension financing vol (%)\", \"\", \"\"),\n",
-    "    (\"Active Extension monthly spike probability\", \"\", \"\"),\n",
-    "    (\"Active Extension spike size (σ × multiplier)\", \"\", \"\"),\n",
-    "    # Alpha stream fallbacks\n",
-    "    (\"In-House annual return (%)\", \"\", \"fallback if no range\"),\n",
-    "    (\"In-House annual vol (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension annual return (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension annual vol (%)\", \"\", \"\"),\n",
-    "    (\"External annual return (%)\", \"\", \"\"),\n",
-    "    (\"External annual vol (%)\", \"\", \"\"),\n",
-    "    # Correlations\n",
-    "    (\"Corr index–In-House\", \"\", \"\"),\n",
-    "    (\"Corr index–Alpha-Extension\", \"\", \"\"),\n",
-    "    (\"Corr index–External\", \"\", \"\"),\n",
-    "    (\"Corr In-House–Alpha-Extension\", \"\", \"\"),\n",
-    "    (\"Corr In-House–External\", \"\", \"\"),\n",
-    "    (\"Corr Alpha-Extension–External\", \"\", \"\"),\n",
-    "    # Buffer multiple & total capital\n",
-    "    (\"Buffer multiple\", \"\", \"cash‐buffer multiple\"),\n",
-    "    (\"Total fund capital (mm)\", \"\", \"total fund size in mm\")\n",
-    "]\n",
-    "\n",
-    "# Build DataFrame and save\n",
-    "df_template = pd.DataFrame(rows, columns=[\"Parameter\", \"Value\", \"Notes\"])\n",
-    "file_path = \"/mnt/data/parameters_template.xlsx\"\n",
-    "df_template.to_excel(file_path, index=False)\n",
-    "print(f\"Created template: {file_path}\")\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 1,
-   "id": "50896230-6c8e-4547-ad48-efab630dbba4",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# portable_alpha_model.py\n",
-    "\n",
-    "import sys\n",
-    "import csv\n",
-    "import numpy as np\n",
-    "import pandas as pd\n",
-    "from pathlib import Path\n",
-    "import tkinter as tk\n",
-    "from tkinter import filedialog\n",
-    "import openpyxl\n",
-    "import os\n",
-    "from __future__ import annotations\n",
-    "from typing import Optional, Union\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 1. MAPPING: User-friendly labels → Internal variable names\n",
-    "# =============================================================================\n",
-    "\n",
-    "LABEL_MAP = {\n",
-    "    \"Analysis mode\": \"analysis_mode\",\n",
-    "    \"Number of simulations\": \"N_SIMULATIONS\",\n",
-    "    # Capital mode inputs\n",
-    "    \"Max external combined (%)\":            \"max_external_combined_percent\",\n",
-    "    \"External step size (%)\":               \"external_step_size_percent\",\n",
-    "    # Fixed-capital (for non-capital modes)\n",
-    "    \"External PA capital (mm)\":             \"external_pa_capital\",\n",
-    "    \"Active Extension capital (mm)\":        \"active_ext_capital\",\n",
-    "    \"Internal PA capital (mm)\":             \"internal_pa_capital\",\n",
-    "    # Returns mode ranges\n",
-    "    \"In-House return min (%)\":              \"mu_H_min\",\n",
-    "    \"In-House return max (%)\":              \"mu_H_max\",\n",
-    "    \"In-House return step (%)\":             \"mu_H_step\",\n",
-    "    \"In-House vol min (%)\":                 \"sigma_H_min\",\n",
-    "    \"In-House vol max (%)\":                 \"sigma_H_max\",\n",
-    "    \"In-House vol step (%)\":                \"sigma_H_step\",\n",
-    "    \"Alpha-Extension return min (%)\":       \"mu_E_min\",\n",
-    "    \"Alpha-Extension return max (%)\":       \"mu_E_max\",\n",
-    "    \"Alpha-Extension return step (%)\":      \"mu_E_step\",\n",
-    "    \"Alpha-Extension vol min (%)\":          \"sigma_E_min\",\n",
-    "    \"Alpha-Extension vol max (%)\":          \"sigma_E_max\",\n",
-    "    \"Alpha-Extension vol step (%)\":         \"sigma_E_step\",\n",
-    "    \"External return min (%)\":              \"mu_M_min\",\n",
-    "    \"External return max (%)\":              \"mu_M_max\",\n",
-    "    \"External return step (%)\":             \"mu_M_step\",\n",
-    "    \"External vol min (%)\":                 \"sigma_M_min\",\n",
-    "    \"External vol max (%)\":                 \"sigma_M_max\",\n",
-    "    \"External vol step (%)\":                \"sigma_M_step\",\n",
-    "    # Alpha_Shares mode ranges\n",
-    "    \"External PA α fraction min (%)\":       \"external_pa_alpha_frac_min\",\n",
-    "    \"External PA α fraction max (%)\":       \"external_pa_alpha_frac_max\",\n",
-    "    \"External PA α fraction step (%)\":      \"external_pa_alpha_frac_step\",\n",
-    "    \"Active share min (%)\":                 \"active_share_min\",\n",
-    "    \"Active share max (%)\":                 \"active_share_max\",\n",
-    "    \"Active share step (%)\":                \"active_share_step\",\n",
-    "    # Vol_Mult mode range\n",
-    "    \"SD multiple min\":                      \"sd_of_vol_mult_min\",\n",
-    "    \"SD multiple max\":                      \"sd_of_vol_mult_max\",\n",
-    "    \"SD multiple step\":                     \"sd_of_vol_mult_step\",\n",
-    "    # Financing & bucket overrides\n",
-    "    \"Annual financing mean (%)\":            \"financing_mean_annual\",\n",
-    "    \"Annual financing vol (%)\":             \"financing_vol_annual\",\n",
-    "    \"Monthly spike probability\":            \"spike_prob\",\n",
-    "    \"Spike size (σ × multiplier)\":          \"spike_factor\",\n",
-    "    \"Internal financing mean (%)\":          \"internal_financing_mean_annual\",\n",
-    "    \"Internal financing vol (%)\":           \"internal_financing_vol_annual\",\n",
-    "    \"Internal monthly spike probability\":   \"internal_spike_prob\",\n",
-    "    \"Internal spike size (σ × multiplier)\": \"internal_spike_factor\",\n",
-    "    \"External PA financing mean (%)\":       \"ext_pa_financing_mean_annual\",\n",
-    "    \"External PA financing vol (%)\":        \"ext_pa_financing_vol_annual\",\n",
-    "    \"External PA monthly spike probability\":\"ext_pa_spike_prob\",\n",
-    "    \"External PA spike size (σ × multiplier)\": \"ext_pa_spike_factor\",\n",
-    "    \"Active Extension financing mean (%)\":  \"act_ext_financing_mean_annual\",\n",
-    "    \"Active Extension financing vol (%)\":   \"act_ext_financing_vol_annual\",\n",
-    "    \"Active Extension monthly spike probability\":\"act_ext_spike_prob\",\n",
-    "    \"Active Extension spike size (σ × multiplier)\":\"act_ext_spike_factor\",\n",
-    "    # Fallback alpha stream defaults\n",
-    "    \"In-House annual return (%)\":           \"mu_H\",\n",
-    "    \"In-House annual vol (%)\":              \"sigma_H\",\n",
-    "    \"Alpha-Extension annual return (%)\":    \"mu_E\",\n",
-    "    \"Alpha-Extension annual vol (%)\":       \"sigma_E\",\n",
-    "    \"External annual return (%)\":           \"mu_M\",\n",
-    "    \"External annual vol (%)\":              \"sigma_M\",\n",
-    "    # Correlations\n",
-    "    \"Corr index–In-House\":                  \"rho_idx_H\",\n",
-    "    \"Corr index–Alpha-Extension\":           \"rho_idx_E\",\n",
-    "    \"Corr index–External\":                  \"rho_idx_M\",\n",
-    "    \"Corr In-House–Alpha-Extension\":        \"rho_H_E\",\n",
-    "    \"Corr In-House–External\":               \"rho_H_M\",\n",
-    "    \"Corr Alpha-Extension–External\":         \"rho_E_M\",\n",
-    "    # Other risk controls\n",
-    "    \"Buffer multiple\":                      \"buffer_multiple\",\n",
-    "    \"Total fund capital (mm)\":              \"total_fund_capital\",\n",
-    "}"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 2,
-   "id": "731d577f-67c3-4a7b-be79-0ed9b21bfc25",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "\n",
-    "# =============================================================================\n",
-    "# 2. FILE‐PICKER FOR CSV SELECTION\n",
-    "# =============================================================================\n",
-    "\n",
-    "def select_csv_file():\n",
-    "    \"\"\"\n",
-    "    Pop up a file‐picker dialog so the user can choose a CSV file.\n",
-    "    Returns a pathlib.Path to the selected file.\n",
-    "    Raises FileNotFoundError if the user cancels.\n",
-    "    \"\"\"\n",
-    "    root = tk.Tk()\n",
-    "    root.withdraw()\n",
-    "    file_path = filedialog.askopenfilename(\n",
-    "        title=\"Select CSV File\",\n",
-    "        filetypes=[(\"CSV files\", \"*.csv\"), (\"All files\", \"*.*\")]\n",
-    "    )\n",
-    "    root.destroy()\n",
-    "    if not file_path:\n",
-    "        raise FileNotFoundError(\"No file selected.\")\n",
-    "    return Path(file_path)\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 3. LOAD PARAMETERS USING MAPPING\n",
-    "# =============================================================================\n",
-    "\n",
-    "def load_parameters(csv_filepath, label_map):\n",
-    "    \"\"\"\n",
-    "    Read a CSV that may have leading instruction rows, then a header row \"Parameter,Value\".\n",
-    "    Skip all rows until the header, then parse friendly labels → internal names via label_map.\n",
-    "    Returns a dict {internal_var_name: parsed_value}.\n",
-    "    \"\"\"\n",
-    "    params = {}\n",
-    "    lines = Path(csv_filepath).read_text(encoding=\"utf-8\").splitlines()\n",
-    "    header_idx = None\n",
-    "    for i, line in enumerate(lines):\n",
-    "        if line.strip().startswith(\"Parameter,\"):\n",
-    "            header_idx = i\n",
-    "            break\n",
-    "\n",
-    "    if header_idx is None:\n",
-    "        raise ValueError(f\"No header row starting with 'Parameter,' found in {csv_filepath}\")\n",
-    "\n",
-    "    header_and_data = lines[header_idx:]\n",
-    "    reader = csv.DictReader(header_and_data)\n",
-    "\n",
-    "    for row in reader:\n",
-    "        friendly_key = row.get(\"Parameter\", \"\").strip()\n",
-    "        if not friendly_key or friendly_key not in label_map:\n",
-    "            continue\n",
-    "\n",
-    "        internal_key = label_map[friendly_key]\n",
-    "        raw_val = row.get(\"Value\", \"\").strip()\n",
-    "\n",
-    "        # If semicolon is present, parse as a list (legacy fallback)\n",
-    "        if \";\" in raw_val:\n",
-    "            parts = [p.strip() for p in raw_val.split(\";\") if p.strip() != \"\"]\n",
-    "            parsed_list = []\n",
-    "            for p in parts:\n",
-    "                try:\n",
-    "                    if \".\" in p:\n",
-    "                        parsed_list.append(float(p))\n",
-    "                    else:\n",
-    "                        parsed_list.append(int(p))\n",
-    "                except ValueError:\n",
-    "                    parsed_list.append(p)\n",
-    "            params[internal_key] = parsed_list\n",
-    "        else:\n",
-    "            # Try int → float → string\n",
-    "            try:\n",
-    "                params[internal_key] = int(raw_val)\n",
-    "            except ValueError:\n",
-    "                try:\n",
-    "                    params[internal_key] = float(raw_val)\n",
-    "                except ValueError:\n",
-    "                    # Could be blank string; store as-is\n",
-    "                    params[internal_key] = raw_val\n",
-    "\n",
-    "    return params\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 4. UTILITY: “SAFE GET” FOR NUMERIC PARAMETERS\n",
-    "# =============================================================================\n",
-    "\n",
-    "def get_num(raw_params, key, default):\n",
-    "    \"\"\"\n",
-    "    Return raw_params[key] if it's already int or float; otherwise default.\n",
-    "    \"\"\"\n",
-    "    v = raw_params.get(key, None)\n",
-    "    if isinstance(v, (int, float)):\n",
-    "        return v\n",
-    "    return default\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "id": "dd64974a-d6b5-4c8c-9d63-b7f43ff074d3",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "\n",
-    "# =============================================================================\n",
-    "# 5. HELPER FUNCTIONS TO BUILD RANGES OR FALLBACK TO MIDPOINT\n",
-    "# =============================================================================\n",
-    "\n",
-    "def build_range(key_base, default_midpoint):\n",
-    "    \"\"\"\n",
-    "    If raw_params contains key_base_min & key_base_max (and optionally key_base_step),\n",
-    "    return a list of decimals from min→max (in steps).\n",
-    "    Otherwise, if key_base_list exists (legacy semicolon list), return that.\n",
-    "    Else, return [default_midpoint].\n",
-    "\n",
-    "    We divide by 100 because these are “percent” inputs.\n",
-    "    \"\"\"\n",
-    "    k_min  = get_num(raw_params, f\"{key_base}_min\", None)\n",
-    "    k_max  = get_num(raw_params, f\"{key_base}_max\", None)\n",
-    "    k_step = get_num(raw_params, f\"{key_base}_step\", None)\n",
-    "\n",
-    "    if (k_min is not None) and (k_max is not None):\n",
-    "        step = k_step if (k_step is not None) else (k_max - k_min)\n",
-    "        if step <= 0:\n",
-    "            raise RuntimeError(f\"Step for '{key_base}' must be positive.\")\n",
-    "        start = k_min / 100.0\n",
-    "        stop  = k_max / 100.0\n",
-    "        stepd = step / 100.0\n",
-    "        arr = np.arange(start, stop + 1e-9, stepd)\n",
-    "        return list(arr)\n",
-    "\n",
-    "    # Legacy semicolon‐list fallback\n",
-    "    flat_list = raw_params.get(f\"{key_base}_list\", None)\n",
-    "    if isinstance(flat_list, list):\n",
-    "        return flat_list\n",
-    "\n",
-    "    return [default_midpoint]\n",
-    "\n",
-    "\n",
-    "def build_range_int(key_base, default_midpoint):\n",
-    "    \"\"\"\n",
-    "    Like build_range but for integer inputs (e.g. SD multiple).\n",
-    "    If key_base_min & key_base_max exist, return list(range(min, max+1, step)).\n",
-    "    Else if key_base_list exists, return it. Else [default_midpoint].\n",
-    "    \"\"\"\n",
-    "    k_min  = get_num(raw_params, f\"{key_base}_min\", None)\n",
-    "    k_max  = get_num(raw_params, f\"{key_base}_max\", None)\n",
-    "    k_step = get_num(raw_params, f\"{key_base}_step\", None)\n",
-    "\n",
-    "    if (k_min is not None) and (k_max is not None):\n",
-    "        step = k_step if (k_step is not None) else (k_max - k_min)\n",
-    "        if step <= 0:\n",
-    "            raise RuntimeError(f\"Step for '{key_base}' must be positive.\")\n",
-    "        return list(range(k_min, k_max + 1, step))\n",
-    "\n",
-    "    flat_list = raw_params.get(f\"{key_base}_list\", None)\n",
-    "    if isinstance(flat_list, list):\n",
-    "        return flat_list\n",
-    "\n",
-    "    return [default_midpoint]\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 6. HELPER TO LOAD INDEX RETURNS\n",
-    "# =============================================================================\n",
-    "\n",
-    "def load_index_returns(csv_path):\n",
-    "    \"\"\"\n",
-    "    Load a CSV of monthly index returns into a pandas Series.\n",
-    "    Expects columns: \"Date\" and either \"Monthly_TR\" or \"Return\".\n",
-    "    Returns a pd.Series indexed by Date (datetime).\n",
-    "    \"\"\"\n",
-    "    csv_path = Path(csv_path)\n",
-    "    if not csv_path.exists() or not csv_path.is_file():\n",
-    "        raise FileNotFoundError(f\"Index CSV not found at {csv_path}\")\n",
-    "    df = pd.read_csv(csv_path, parse_dates=[\"Date\"])\n",
-    "    if \"Date\" not in df.columns:\n",
-    "        raise ValueError(f\"'Date' column is missing from {csv_path}\")\n",
-    "    if \"Monthly_TR\" in df.columns:\n",
-    "        col = \"Monthly_TR\"\n",
-    "    elif \"Return\" in df.columns:\n",
-    "        col = \"Return\"\n",
-    "    else:\n",
-    "        raise ValueError(f\"CSV must contain 'Monthly_TR' or 'Return'; found: {df.columns.tolist()}\")\n",
-    "\n",
-    "    df = df.sort_values(\"Date\").reset_index(drop=True)\n",
-    "    df.set_index(\"Date\", inplace=True)\n",
-    "    series = df[col].dropna().copy()\n",
-    "    series.index = pd.to_datetime(series.index)\n",
-    "    return series\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "id": "560c5f78-140c-421c-bceb-b7f013ee5a63",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "\n",
-    "# =============================================================================\n",
-    "# 7. SIMULATION + UTILITY FUNCTIONS\n",
-    "# =============================================================================\n",
-    "\n",
-    "def simulate_financing(\n",
-    "    T: int,\n",
-    "    financing_mean: float,\n",
-    "    financing_sigma: float,\n",
-    "    spike_prob: float,\n",
-    "    spike_factor: float,\n",
-    "    *,\n",
-    "    seed: Optional[int] = None,\n",
-    "    n_scenarios: int = 1,\n",
-    "    rng: Optional[np.random.Generator] = None,\n",
-    ") -> Array:\n",
-    "    \n",
-    "    if T <= 0:\n",
-    "        raise ValueError(\"T must be positive\")\n",
-    "    if n_scenarios <= 0:\n",
-    "        raise ValueError(\"n_scenarios must be positive\")\n",
-    "\n",
-    "    rng = np.random.default_rng(seed) if rng is None else rng\n",
-    "    base = rng.normal(loc=financing_mean, scale=financing_sigma, size=(n_scenarios, T))\n",
-    "    jumps = (rng.random(size=(n_scenarios, T)) < spike_prob) * (spike_factor * financing_sigma)\n",
-    "    out = np.clip(base + jumps, 0.0, None)  # ensure non‑negative spreads\n",
-    "    return out[0] if n_scenarios == 1 else out\n",
-    "\n",
-    "def prepare_mc_universe(\n",
-    "    *,\n",
-    "    N_SIMULATIONS: int,\n",
-    "    N_MONTHS: int,\n",
-    "    mu_idx: float,\n",
-    "    mu_H: float,\n",
-    "    mu_E: float,\n",
-    "    mu_M: float,\n",
-    "    cov_mat: Array,\n",
-    "    seed: Optional[int] = None,\n",
-    "    rng: Optional[np.random.Generator] = None,\n",
-    ") -> Array:\n",
-    "    if N_SIMULATIONS <= 0 or N_MONTHS <= 0:\n",
-    "        raise ValueError(\"N_SIMULATIONS and N_MONTHS must be positive\")\n",
-    "    if cov_mat.shape != (4, 4):\n",
-    "        raise ValueError(\"cov_mat must be 4×4 and ordered as [idx, H, E, M]\")\n",
-    "\n",
-    "    rng = np.random.default_rng(seed) if rng is None else rng\n",
-    "\n",
-    "    # 1️⃣  i.i.d. normals\n",
-    "    z = rng.standard_normal(size=(N_SIMULATIONS, N_MONTHS, 4))\n",
-    "\n",
-    "    # 2️⃣  Cholesky decomp converts to correlated shocks (annual → monthly)\n",
-    "    try:\n",
-    "        L = np.linalg.cholesky(cov_mat / 12.0)\n",
-    "    except np.linalg.LinAlgError:\n",
-    "        # add tiny diagonal bump to force PSD\n",
-    "        eps = 1e-12\n",
-    "        L = np.linalg.cholesky(cov_mat / 12.0 + np.eye(4)*eps)\n",
-    "\n",
-    "    # 3️⃣  Shift by monthly means\n",
-    "    mu = np.array([mu_idx, mu_H, mu_E, mu_M]) / 12.0  # (4,)\n",
-    "\n",
-    "    return z @ L.T + mu  # shape: (path, month, factor)\n",
-    "\n",
-    "def build_cov_matrix(rho_idx_H, rho_idx_E, rho_idx_M,\n",
-    "                     rho_H_E, rho_H_M, rho_E_M,\n",
-    "                     idx_sigma, sigma_H, sigma_E, sigma_M):\n",
-    "    \"\"\"\n",
-    "    Build the 4×4 covariance matrix for (Index, H, E, M).\n",
-    "    \"\"\"\n",
-    "    sds = np.array([idx_sigma, sigma_H, sigma_E, sigma_M])\n",
-    "    rho = np.array([\n",
-    "        [1.0,       rho_idx_H, rho_idx_E, rho_idx_M],\n",
-    "        [rho_idx_H, 1.0,       rho_H_E,   rho_H_M],\n",
-    "        [rho_idx_E, rho_H_E,   1.0,       rho_E_M],\n",
-    "        [rho_idx_M, rho_H_M,   rho_E_M,   1.0    ]\n",
-    "    ])\n",
-    "    return np.outer(sds, sds) * rho\n",
-    "    \n",
-    "# --------------------------------------------------------------------\n",
-    "# Helper: draw_joint_returns\n",
-    "# --------------------------------------------------------------------\n",
-    "def draw_joint_returns(*, n_months: int, n_sim: int, params: dict,\n",
-    "                       rng: np.random.Generator | None = None\n",
-    "                       ) -> tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]:\n",
-    "    \"\"\"\n",
-    "    Vectorised draw of (index beta, internal alpha H, external alpha E,\n",
-    "    market alpha M) monthly returns for an entire Monte-Carlo universe.\n",
-    "\n",
-    "    Returns\n",
-    "    -------\n",
-    "    r_beta, r_H, r_E, r_M : 2-D ndarrays  [shape = (n_sim, n_months)]\n",
-    "    \"\"\"\n",
-    "    if rng is None:\n",
-    "        rng = np.random.default_rng()\n",
-    "\n",
-    "    # ---- pull scalar inputs -------------------------------------------------\n",
-    "    μ_idx   = params[\"mu_idx_month\"]          # already /12\n",
-    "    μ_H     = params[\"default_mu_H\"]          # already /12\n",
-    "    μ_E     = params[\"default_mu_E\"]          # already /12\n",
-    "    μ_M     = params[\"default_mu_M\"]          # already /12\n",
-    "\n",
-    "    σ_idx   = params[\"idx_sigma_month\"]       # already /12\n",
-    "    σ_H     = params[\"default_sigma_H\"]       # already /12\n",
-    "    σ_E     = params[\"default_sigma_E\"]       # already /12\n",
-    "    σ_M     = params[\"default_sigma_M\"]       # already /12\n",
-    "\n",
-    "    ρ_idx_H = params[\"rho_idx_H\"]\n",
-    "    ρ_idx_E = params[\"rho_idx_E\"]\n",
-    "    ρ_idx_M = params[\"rho_idx_M\"]\n",
-    "    ρ_H_E   = params[\"rho_H_E\"]\n",
-    "    ρ_H_M   = params[\"rho_H_M\"]\n",
-    "    ρ_E_M   = params[\"rho_E_M\"]\n",
-    "\n",
-    "    # ---- covariance matrix --------------------------------------------------\n",
-    "    Σ = np.array([\n",
-    "        [σ_idx**2,        ρ_idx_H*σ_idx*σ_H, ρ_idx_E*σ_idx*σ_E, ρ_idx_M*σ_idx*σ_M],\n",
-    "        [ρ_idx_H*σ_idx*σ_H, σ_H**2,          ρ_H_E*σ_H*σ_E,     ρ_H_M*σ_H*σ_M],\n",
-    "        [ρ_idx_E*σ_idx*σ_E, ρ_H_E*σ_H*σ_E,   σ_E**2,            ρ_E_M*σ_E*σ_M],\n",
-    "        [ρ_idx_M*σ_idx*σ_M, ρ_H_M*σ_H*σ_M,   ρ_E_M*σ_E*σ_M,     σ_M**2]\n",
-    "    ])\n",
-    "\n",
-    "    μ = np.array([μ_idx, μ_H, μ_E, μ_M])\n",
-    "\n",
-    "    # ---- draw (n_sim × n_months) -------------------------------------------\n",
-    "    sims = rng.multivariate_normal(mean=μ, cov=Σ, size=(n_sim, n_months))\n",
-    "\n",
-    "    # slice out columns\n",
-    "    r_beta = sims[:, :, 0]\n",
-    "    r_H    = sims[:, :, 1]\n",
-    "    r_E    = sims[:, :, 2]\n",
-    "    r_M    = sims[:, :, 3]\n",
-    "\n",
-    "    return r_beta, r_H, r_E, r_M\n",
-    "\n",
-    "# --------------------------------------------------------------------\n",
-    "# Helper: draw_financing_series\n",
-    "# --------------------------------------------------------------------\n",
-    "def draw_financing_series(*, n_months: int, n_sim: int, params: dict,\n",
-    "                          rng: np.random.Generator | None = None\n",
-    "                          ) -> tuple[np.ndarray, np.ndarray, np.ndarray]:\n",
-    "    \"\"\"\n",
-    "    Return three (n_sim × n_months) matrices of monthly financing spreads\n",
-    "    for:  (a) internal PA sleeve, (b) passive α-extension, (c) active α-ext.\n",
-    "\n",
-    "    All means/vols are expected **per-month** in `params`.\n",
-    "    \"\"\"\n",
-    "    if rng is None:\n",
-    "        rng = np.random.default_rng()\n",
-    "\n",
-    "    # ----- unpack monthly means / sigmas / spike settings -------------------\n",
-    "    def _sim(mean_key, sigma_key, p_key, k_key):\n",
-    "        mean  = params[mean_key]\n",
-    "        sigma = params[sigma_key]\n",
-    "        p     = params[p_key]\n",
-    "        k     = params[k_key]\n",
-    "        vec = simulate_financing(\n",
-    "            n_months, mean, sigma,\n",
-    "            p, k,\n",
-    "            n_scenarios=1,\n",
-    "            rng=rng\n",
-    "        )[0]                               # length = n_months\n",
-    "        return np.broadcast_to(vec, (n_sim, n_months))\n",
-    "\n",
-    "    f_int_mat  = _sim(\"internal_financing_mean_month\",\n",
-    "                      \"internal_financing_sigma_month\",\n",
-    "                      \"internal_spike_prob\",\n",
-    "                      \"internal_spike_factor\")\n",
-    "\n",
-    "    f_ext_pa_mat = _sim(\"ext_pa_financing_mean_month\",\n",
-    "                        \"ext_pa_financing_sigma_month\",\n",
-    "                        \"ext_pa_spike_prob\",\n",
-    "                        \"ext_pa_spike_factor\")\n",
-    "\n",
-    "    f_act_ext_mat = _sim(\"act_ext_financing_mean_month\",\n",
-    "                         \"act_ext_financing_sigma_month\",\n",
-    "                         \"act_ext_spike_prob\",\n",
-    "                         \"act_ext_spike_factor\")\n",
-    "\n",
-    "    return f_int_mat, f_ext_pa_mat, f_act_ext_mat\n",
-    "\n",
-    "def simulate_alpha_streams(T, cov, mu_idx, mu_H, mu_E, mu_M):\n",
-    "    \"\"\"\n",
-    "    Simulate T joint observations of (Index_return, H, E, M)\n",
-    "    from a multivariate Normal with given means and covariance.\n",
-    "    Returns shape (T, 4).\n",
-    "    \"\"\"\n",
-    "    means = np.array([mu_idx, mu_H, mu_E, mu_M])\n",
-    "    return np.random.multivariate_normal(means, cov, size=T)\n",
-    "\n",
-    "def export_to_excel(inputs_dict, summary_df, raw_returns_dict, filename=\"Outputs.xlsx\"):\n",
-    "    \"\"\"\n",
-    "    Write inputs, summary, and raw returns into an Excel workbook.\n",
-    "    \"\"\"\n",
-    "    with pd.ExcelWriter(filename, engine=\"openpyxl\") as writer:\n",
-    "        # 1) Inputs sheet\n",
-    "        df_inputs = pd.DataFrame.from_dict(inputs_dict, orient=\"index\", columns=[\"Value\"])\n",
-    "        df_inputs.index.name = \"Parameter\"\n",
-    "        df_inputs.reset_index(inplace=True)\n",
-    "        df_inputs.to_excel(writer, sheet_name=\"Inputs\", index=False)\n",
-    "\n",
-    "        # 2) Summary sheet\n",
-    "        summary_df.to_excel(writer, sheet_name=\"Summary\", index=False)\n",
-    "\n",
-    "        # 3) Raw Returns sheets\n",
-    "        for sheet_name, df in raw_returns_dict.items():\n",
-    "            safe_name = sheet_name if len(sheet_name) <= 31 else sheet_name[:31]\n",
-    "            df.to_excel(writer, sheet_name=safe_name, index=True)\n",
-    "\n",
-    "    print(f\"Exported results to {filename}\")\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "9cf4f1dc-f8cc-4df1-9294-db2f40b1a76b",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Parameters CSV selected: /Users/teacher/Library/CloudStorage/Dropbox/Learning/Code/Portable Alpha-Extension Model/parameters.csv\n",
-      "Please select the INDEX CSV (monthly total returns).\n",
-      "Index CSV selected: /Users/teacher/Library/CloudStorage/Dropbox/Learning/Code/Portable Alpha-Extension Model/sp500tr_fred_divyield.csv\n",
-      "Loaded 663 months from the raw index CSV.\n",
-      "Using idx_series from 1970-01-01 to 2025-03-01 (n=663)\n",
-      "Analysis-window: μ_idx = 0.0096, σ_idx = 0.0458\n"
-     ]
-    }
-   ],
-   "source": [
-    "\n",
-    "# =============================================================================\n",
-    "# 8. MAIN EXECUTION\n",
-    "# =============================================================================\n",
-    "\n",
-    "if __name__ == \"__main__\":\n",
-    "    # 8.1) Prompt user to select the parameters CSV\n",
-    "    try:\n",
-    "        params_csv_path = select_csv_file()\n",
-    "        print(f\"Parameters CSV selected: {params_csv_path}\")\n",
-    "    except FileNotFoundError:\n",
-    "        raise RuntimeError(\"No parameter CSV selected; exiting.\")\n",
-    "\n",
-    "    # 8.2) Load raw parameters\n",
-    "    raw_params = load_parameters(params_csv_path, LABEL_MAP)\n",
-    "\n",
-    "    # 8.3) “Safe get” for numeric scalars and defaults\n",
-    "    total_fund_capital = get_num(raw_params, \"total_fund_capital\", 1000)\n",
-    "\n",
-    "    financing_mean_annual = get_num(raw_params, \"financing_mean_annual\", 0.005)\n",
-    "    financing_vol_annual  = get_num(raw_params, \"financing_vol_annual\", 0.001)\n",
-    "    spike_prob            = get_num(raw_params, \"spike_prob\", 0.02)\n",
-    "    spike_factor          = get_num(raw_params, \"spike_factor\", 2.25)\n",
-    "\n",
-    "    internal_financing_mean_annual = get_num(raw_params, \"internal_financing_mean_annual\", financing_mean_annual)\n",
-    "    internal_financing_vol_annual  = get_num(raw_params, \"internal_financing_vol_annual\",  financing_vol_annual)\n",
-    "    internal_spike_prob            = get_num(raw_params, \"internal_spike_prob\",            spike_prob)\n",
-    "    internal_spike_factor          = get_num(raw_params, \"internal_spike_factor\",          spike_factor)\n",
-    "\n",
-    "    ext_pa_financing_mean_annual = get_num(raw_params, \"ext_pa_financing_mean_annual\", financing_mean_annual)\n",
-    "    ext_pa_financing_vol_annual  = get_num(raw_params, \"ext_pa_financing_vol_annual\",  financing_vol_annual)\n",
-    "    ext_pa_spike_prob            = get_num(raw_params, \"ext_pa_spike_prob\",            spike_prob)\n",
-    "    ext_pa_spike_factor          = get_num(raw_params, \"ext_pa_spike_factor\",          spike_factor)\n",
-    "\n",
-    "    act_ext_financing_mean_annual = get_num(raw_params, \"act_ext_financing_mean_annual\", financing_mean_annual)\n",
-    "    act_ext_financing_vol_annual  = get_num(raw_params, \"act_ext_financing_vol_annual\",  financing_vol_annual)\n",
-    "    act_ext_spike_prob            = get_num(raw_params, \"act_ext_spike_prob\",            spike_prob)\n",
-    "    act_ext_spike_factor          = get_num(raw_params, \"act_ext_spike_factor\",          spike_factor)\n",
-    "\n",
-    "    mu_H    = get_num(raw_params, \"mu_H\",    0.04)\n",
-    "    sigma_H = get_num(raw_params, \"sigma_H\", 0.01)\n",
-    "    mu_E    = get_num(raw_params, \"mu_E\",    0.05)\n",
-    "    sigma_E = get_num(raw_params, \"sigma_E\", 0.02)\n",
-    "    mu_M    = get_num(raw_params, \"mu_M\",    0.03)\n",
-    "    sigma_M = get_num(raw_params, \"sigma_M\", 0.02)\n",
-    "\n",
-    "    rho_idx_H = get_num(raw_params, \"rho_idx_H\", 0.05)\n",
-    "    rho_idx_E = get_num(raw_params, \"rho_idx_E\", 0.00)\n",
-    "    rho_idx_M = get_num(raw_params, \"rho_idx_M\", 0.00)\n",
-    "    rho_H_E   = get_num(raw_params, \"rho_H_E\",   0.10)\n",
-    "    rho_H_M   = get_num(raw_params, \"rho_H_M\",   0.10)\n",
-    "    rho_E_M   = get_num(raw_params, \"rho_E_M\",   0.00)\n",
-    "\n",
-    "\n",
-    "    buffer_multiple = get_num(raw_params, \"buffer_multiple\", 3.0)\n",
-    "\n",
-    "    default_mu_H    = mu_H / 12\n",
-    "    default_sigma_H = sigma_H / 12\n",
-    "    default_mu_E    = mu_E / 12\n",
-    "    default_sigma_E = sigma_E / 12\n",
-    "    default_mu_M    = mu_M / 12\n",
-    "    default_sigma_M = sigma_M / 12\n",
-    "\n",
-    "    default_ext_alpha_frac = get_num(raw_params, \"external_pa_alpha_frac\", 50) / 100.0\n",
-    "    default_act_share      = get_num(raw_params, \"active_share\",            50) / 100.0\n",
-    "\n",
-    "    default_sd_mult = get_num(raw_params, \"sd_of_vol_mult\", 3)\n",
-    "\n",
-    "    financing_mean  = financing_mean_annual / 12\n",
-    "    financing_sigma = financing_vol_annual / 12\n",
-    "\n",
-    "    internal_pa_capital = get_num(raw_params, \"internal_pa_capital\", 0)   # Z-sleeve\n",
-    "    external_pa_capital = get_num(raw_params, \"external_pa_capital\", 0)   # passive α-ext\n",
-    "    active_ext_capital  = get_num(raw_params, \"active_ext_capital\", 0)    # active α-ext\n",
-    "    \n",
-    "    Z_frac = internal_pa_capital / total_fund_capital\n",
-    "    E_pct  = external_pa_capital / total_fund_capital\n",
-    "    A_pct  = active_ext_capital  / total_fund_capital\n",
-    "\n",
-    "    # 8.4) Determine analysis_mode\n",
-    "    analysis_mode = str(raw_params.get(\"analysis_mode\", \"\")).strip().lower()\n",
-    "    valid_modes = {\"capital\", \"returns\", \"alpha_shares\", \"vol_mult\"}\n",
-    "    if analysis_mode not in valid_modes:\n",
-    "        raise RuntimeError(f\"Analysis mode must be one of {valid_modes}, but got '{analysis_mode}'\")\n",
-    "\n",
-    "    # 8.5) Prompt user to select the INDEX CSV\n",
-    "    print(\"Please select the INDEX CSV (monthly total returns).\")\n",
-    "    try:\n",
-    "        INDEX_CSV_PATH = select_csv_file()\n",
-    "        print(f\"Index CSV selected: {INDEX_CSV_PATH}\")\n",
-    "    except FileNotFoundError:\n",
-    "        raise RuntimeError(\"Index CSV was not selected; exiting.\")\n",
-    "\n",
-    "    # 8.6) Load idx_series and compute reference stats\n",
-    "    try:\n",
-    "        idx_series = load_index_returns(INDEX_CSV_PATH)\n",
-    "        print(f\"Loaded {len(idx_series)} months from the raw index CSV.\")\n",
-    "    except Exception as e:\n",
-    "        raise RuntimeError(f\"Failed to load index returns: {e}\")\n",
-    "\n",
-    "    mu_idx   = idx_series.mean()\n",
-    "    idx_sigma = idx_series.std(ddof=1)\n",
-    "    print(f\"Using idx_series from {idx_series.index.min().date()} to {idx_series.index.max().date()} (n={len(idx_series)})\")\n",
-    "    print(f\"Analysis-window: μ_idx = {mu_idx:.4f}, σ_idx = {idx_sigma:.4f}\")\n",
-    "\n",
-    "    # 8.7) Convert bucket financing overrides to monthly decimals\n",
-    "    internal_financing_mean  = internal_financing_mean_annual / 12\n",
-    "    internal_financing_sigma = internal_financing_vol_annual  / 12\n",
-    "\n",
-    "    ext_pa_financing_mean  = ext_pa_financing_mean_annual / 12\n",
-    "    ext_pa_financing_sigma = ext_pa_financing_vol_annual  / 12\n",
-    "\n",
-    "    act_ext_financing_mean  = act_ext_financing_mean_annual / 12\n",
-    "    act_ext_financing_sigma = act_ext_financing_vol_annual  / 12\n",
-    "\n",
-    "    # -------------------------------------------------------------\n",
-    "    # Unified params-dict for BOTH helper functions\n",
-    "    # -------------------------------------------------------------\n",
-    "    params = {\n",
-    "        # ----- joint-return means & sigmas (monthly) -----\n",
-    "        \"mu_idx_month\":         mu_idx,\n",
-    "        \"default_mu_H\":         default_mu_H,\n",
-    "        \"default_mu_E\":         default_mu_E,\n",
-    "        \"default_mu_M\":         default_mu_M,\n",
-    "    \n",
-    "        \"idx_sigma_month\":      idx_sigma,\n",
-    "        \"default_sigma_H\":      default_sigma_H,\n",
-    "        \"default_sigma_E\":      default_sigma_E,\n",
-    "        \"default_sigma_M\":      default_sigma_M,\n",
-    "    \n",
-    "        # ----- correlations -----\n",
-    "        \"rho_idx_H\": rho_idx_H,\n",
-    "        \"rho_idx_E\": rho_idx_E,\n",
-    "        \"rho_idx_M\": rho_idx_M,\n",
-    "        \"rho_H_E\":   rho_H_E,\n",
-    "        \"rho_H_M\":   rho_H_M,\n",
-    "        \"rho_E_M\":   rho_E_M,\n",
-    "    \n",
-    "        # ----- financing (monthly) & spike settings -----\n",
-    "        \"internal_financing_mean_month\":  internal_financing_mean,\n",
-    "        \"internal_financing_sigma_month\": internal_financing_sigma,\n",
-    "        \"internal_spike_prob\":            internal_spike_prob,\n",
-    "        \"internal_spike_factor\":          internal_spike_factor,\n",
-    "    \n",
-    "        \"ext_pa_financing_mean_month\":    ext_pa_financing_mean,\n",
-    "        \"ext_pa_financing_sigma_month\":   ext_pa_financing_sigma,\n",
-    "        \"ext_pa_spike_prob\":              ext_pa_spike_prob,\n",
-    "        \"ext_pa_spike_factor\":            ext_pa_spike_factor,\n",
-    "    \n",
-    "        \"act_ext_financing_mean_month\":   act_ext_financing_mean,\n",
-    "        \"act_ext_financing_sigma_month\":  act_ext_financing_sigma,\n",
-    "        \"act_ext_spike_prob\":             act_ext_spike_prob,\n",
-    "        \"act_ext_spike_factor\":           act_ext_spike_factor,\n",
-    "        \"total_fund_capital\":      total_fund_capital,\n",
-    "        \"internal_pa_capital\":    internal_pa_capital,\n",
-    "        \"external_pa_capital\":    external_pa_capital,\n",
-    "        \"active_ext_capital\":     active_ext_capital,\n",
-    "    }\n",
-    "\n",
-    "    # -------------------------------------------------------------------\n",
-    "    # NEW ▸ Build a single Monte‑Carlo universe & RNG (used by every branch)\n",
-    "    # -------------------------------------------------------------------\n",
-    "    seed_val = int(get_num(raw_params, \"RANDOM_SEED\", 42))\n",
-    "    rng = np.random.default_rng(seed_val)  # Or read a seed from raw_params\n",
-    "    cov_mat_global = build_cov_matrix(\n",
-    "        rho_idx_H, rho_idx_E, rho_idx_M,\n",
-    "        rho_H_E,   rho_H_M,   rho_E_M,\n",
-    "        idx_sigma, default_sigma_H, default_sigma_E, default_sigma_M,\n",
-    "    )\n",
-    "\n",
-    "    N_SIMULATIONS = get_num(raw_params, \"N_SIMULATIONS\", 20000)\n",
-    "    N_MONTHS      = get_num(raw_params, \"N_MONTHS\",      12)\n",
-    "\n",
-    "    # ------------------------------------------------------------\n",
-    "    # Global financing vectors (length = N_MONTHS) reused by all modes\n",
-    "    # ------------------------------------------------------------\n",
-    "    f_internal_vec = simulate_financing(\n",
-    "        N_MONTHS, internal_financing_mean, internal_financing_sigma,\n",
-    "        internal_spike_prob, internal_spike_factor,\n",
-    "        rng=rng, n_scenarios=1\n",
-    "    )[0]\n",
-    "    f_ext_pa_vec = simulate_financing(\n",
-    "        N_MONTHS, ext_pa_financing_mean, ext_pa_financing_sigma,\n",
-    "        ext_pa_spike_prob, ext_pa_spike_factor,\n",
-    "        rng=rng, n_scenarios=1\n",
-    "    )[0]\n",
-    "    f_act_ext_vec = simulate_financing(\n",
-    "        N_MONTHS, act_ext_financing_mean, act_ext_financing_sigma,\n",
-    "        act_ext_spike_prob, act_ext_spike_factor,\n",
-    "        rng=rng, n_scenarios=1\n",
-    "    )[0]\n",
-    "\n",
-    "    # --------------------------------------------------------\n",
-    "    # 1) Joint-return universe  (shared by every scenario)\n",
-    "    # --------------------------------------------------------\n",
-    "    r_beta, r_H, r_E, r_M = draw_joint_returns(\n",
-    "        n_months=N_MONTHS,\n",
-    "        n_sim=N_SIMULATIONS,\n",
-    "        params=params,            # ← now defined\n",
-    "    )\n",
-    "    mc_paths = np.stack([r_beta, r_H, r_E, r_M], axis=2)  # (sim, month, 4)\n",
-    "\n",
-    "    # ---------------------------------------------------------------------------\n",
-    "    # 2.  Financing draws (also shared; later sliced per grid point)\n",
-    "    # ---------------------------------------------------------------------------\n",
-    "    f_int_matrix, f_ext_pa_matrix, f_act_ext_matrix = draw_financing_series(\n",
-    "        n_months=N_MONTHS,\n",
-    "        n_sim=N_SIMULATIONS,\n",
-    "        params=params,\n",
-    "    )\n",
-    "\n",
-    "    # -------------------------------------------------------------------\n",
-    "    # 8.8) Branch on analysis_mode\n",
-    "    # -------------------------------------------------------------------\n",
-    "\n",
-    "    if analysis_mode == \"capital\":\n",
-    "        # --------------------------------------\n",
-    "        # 8.8.a) Capital mode: Sweep ext_pct→act_pct\n",
-    "        # --------------------------------------\n",
-    "        max_ext_pct = get_num(raw_params, \"max_external_combined_percent\", 50) / 100.0\n",
-    "        ext_step_pct = get_num(raw_params, \"external_step_size_percent\", 1) / 100.0\n",
-    "\n",
-    "        # Other “sweepable” params collapse to midpoint\n",
-    "        mu_H_list    = [default_mu_H]\n",
-    "        sigma_H_list = [default_sigma_H]\n",
-    "        mu_E_list    = [default_mu_E]\n",
-    "        sigma_E_list = [default_sigma_E]\n",
-    "        mu_M_list    = [default_mu_M]\n",
-    "        sigma_M_list = [default_sigma_M]\n",
-    "\n",
-    "        ext_alpha_list = [default_ext_alpha_frac]\n",
-    "        act_share_list = [default_act_share]\n",
-    "        sd_list        = [default_sd_mult]\n",
-    "\n",
-    "        all_summaries = []\n",
-    "        all_raw_returns = {}\n",
-    "\n",
-    "        ext_range = np.arange(0.0, max_ext_pct + 1e-9, ext_step_pct)\n",
-    "\n",
-    "        # Build (ext_pct, act_pct) grid once and pre‑draw financing spreads\n",
-    "        grid_pairs = [(e, a) for e in ext_range\n",
-    "                             for a in np.arange(0.0, e + 1e-9, ext_step_pct)]\n",
-    "\n",
-    "        G = len(grid_pairs)  # scenarios\n",
-    "\n",
-    "        f_internal  = simulate_financing(12, internal_financing_mean,  internal_financing_sigma,\n",
-    "                                         internal_spike_prob, internal_spike_factor,\n",
-    "                                         n_scenarios=G, rng=rng)\n",
-    "        f_ext_pa    = simulate_financing(12, ext_pa_financing_mean,     ext_pa_financing_sigma,\n",
-    "                                         ext_pa_spike_prob, ext_pa_spike_factor,\n",
-    "                                         n_scenarios=G, rng=rng)\n",
-    "        f_act_ext   = simulate_financing(12, act_ext_financing_mean,    act_ext_financing_sigma,\n",
-    "                                         act_ext_spike_prob, act_ext_spike_factor,\n",
-    "                                         n_scenarios=G, rng=rng)\n",
-    "\n",
-    "        for g, (ext_pct, act_pct) in enumerate(grid_pairs):\n",
-    "                E_pct = ext_pct - act_pct\n",
-    "                A_pct = act_pct\n",
-    "                Z_frac = 1.0 - ext_pct\n",
-    "                E_mm = E_pct * total_fund_capital\n",
-    "                A_mm = A_pct * total_fund_capital\n",
-    "                Z_mm = Z_frac * total_fund_capital\n",
-    "\n",
-    "                # slice once; broadcasting → (n_sim, 12)\n",
-    "                f_int_vec  = f_internal[g]\n",
-    "                f_ext_vec  = f_ext_pa[g]\n",
-    "                f_act_vec  = f_act_ext[g]\n",
-    "\n",
-    "                f_int_matrix    = np.broadcast_to(f_internal_vec,  (N_SIMULATIONS, N_MONTHS))\n",
-    "                f_ext_pa_matrix = np.broadcast_to(f_ext_pa_vec,    (N_SIMULATIONS, N_MONTHS))\n",
-    "                f_act_ext_matrix= np.broadcast_to(f_act_ext_vec,   (N_SIMULATIONS, N_MONTHS))\n",
-    "\n",
-    "                sims = mc_paths  # reuse the pre‑computed universe\n",
-    "                r_beta = sims[:, :, 0]   # (n_sim, n_months)\n",
-    "                r_H    = sims[:, :, 1]\n",
-    "                r_E    = sims[:, :, 2]\n",
-    "                r_M    = sims[:, :, 3] \n",
-    "\n",
-    "                # -------- Vectorised over all simulations --------\n",
-    "                total_cap = params['total_fund_capital']\n",
-    "                Z_frac = params['internal_pa_capital']  / total_cap   # internal PA sleeve (Z)\n",
-    "                E_pct  = params['external_pa_capital']  / total_cap   # external PA bucket (X)\n",
-    "                A_pct  = params['active_ext_capital']   / total_cap   # active α-extension (Y)    \n",
-    "                R_base   = (r_beta - f_int_matrix)   * Z_frac + r_H * Z_frac\n",
-    "                R_extpa  = (r_beta - f_ext_pa_matrix)* E_pct  + r_M * E_pct\n",
-    "                R_actext = (r_beta - f_act_ext_matrix)* A_pct + r_E * A_pct\n",
-    "\n",
-    "                results = {\n",
-    "                    \"Base\":       np.prod(1 + R_base  , axis=1) - 1,\n",
-    "                    \"ExternalPA\": np.prod(1 + R_extpa , axis=1) - 1,\n",
-    "                    \"ActiveExt\":  np.prod(1 + R_actext, axis=1) - 1,\n",
-    "                }\n",
-    "\n",
-    "                dates_sim = pd.date_range(\n",
-    "                    start=idx_series.index[-1] + pd.DateOffset(months=1),\n",
-    "                    periods=N_MONTHS, freq=\"ME\"\n",
-    "                )\n",
-    "\n",
-    "                # Keep first simulation’s path for raw-return sheets\n",
-    "                raw_returns = {\n",
-    "                    \"Base\":       pd.DataFrame({\"Base\":       R_base[0]},   index=dates_sim),\n",
-    "                    \"ExternalPA\": pd.DataFrame({\"ExternalPA\": R_extpa[0]},  index=dates_sim),\n",
-    "                    \"ActiveExt\":  pd.DataFrame({\"ActiveExt\":  R_actext[0]}, index=dates_sim),\n",
-    "                }\n",
-    "\n",
-    "                df_yearly = pd.DataFrame(results)\n",
-    "                summary_rows = []\n",
-    "                for cfg, arr in df_yearly.items():\n",
-    "                    ann_ret = np.mean(arr)\n",
-    "                    ann_vol = np.std(arr, ddof=1)\n",
-    "                    var_95  = np.percentile(arr, 5)\n",
-    "                    te      = np.nan\n",
-    "\n",
-    "                    mr_series = raw_returns[cfg].iloc[:, 0]\n",
-    "                    threshold = -buffer_multiple * idx_sigma\n",
-    "                    breach_pct = np.mean(mr_series < threshold) * 100\n",
-    "\n",
-    "                    summary_rows.append({\n",
-    "                        \"Config\": cfg,\n",
-    "                        \"Ext %\":  f\"{ext_pct*100:.1f}%\",\n",
-    "                        \"Act %\":  f\"{act_pct*100:.1f}%\",\n",
-    "                        \"Internal PA (mm)\": Z_mm,\n",
-    "                        \"Annual Return\":      ann_ret,\n",
-    "                        \"Annual Vol\":         ann_vol,\n",
-    "                        \"VaR 95\":             var_95,\n",
-    "                        \"TE (est.)\":          te,\n",
-    "                        \"Breach %\":           breach_pct\n",
-    "                    })\n",
-    "\n",
-    "                summary_df = pd.DataFrame(summary_rows)\n",
-    "                all_summaries.append(summary_df)\n",
-    "\n",
-    "                for key, df_r in raw_returns.items():\n",
-    "                    sheet_key = f\"{key}_E{ext_pct*100:.0f}_A{act_pct*100:.0f}\"\n",
-    "                    all_raw_returns[sheet_key] = df_r\n",
-    "\n",
-    "        final_summary = pd.concat(all_summaries, ignore_index=True)\n",
-    "\n",
-    "        inputs_dict = {\n",
-    "            \"Analysis mode\":               \"capital\",\n",
-    "            \"Total fund capital (mm)\":     total_fund_capital,\n",
-    "            \"Max external combined (%)\":   get_num(raw_params, \"max_external_combined_percent\", \"\"),\n",
-    "            \"External step size (%)\":      get_num(raw_params, \"external_step_size_percent\", \"\"),\n",
-    "            \"Annual financing mean (%)\":   financing_mean_annual,\n",
-    "            \"Annual financing vol (%)\":    financing_vol_annual,\n",
-    "            \"Monthly spike probability\":   spike_prob,\n",
-    "            \"Spike size (σ × multiplier)\": spike_factor,\n",
-    "            \"Buffer multiple\":             buffer_multiple\n",
-    "        }\n",
-    "\n",
-    "        export_to_excel(inputs_dict, final_summary, all_raw_returns)\n",
-    "\n",
-    "        display_df = final_summary.copy()\n",
-    "        display_df = display_df.rename(columns={\n",
-    "            \"Annual Return\": \"Annual Return (%)\",\n",
-    "            \"Annual Vol\":    \"Annual Volatility (%)\",\n",
-    "            \"VaR 95\":        \"95%-VaR (%)\",\n",
-    "            \"TE (est.)\":     \"Tracking Error (%)\",\n",
-    "            \"Breach %\":      \"Breach Probability (%)\"\n",
-    "        })\n",
-    "        pct_cols = [\n",
-    "            \"Annual Return (%)\", \"Annual Volatility (%)\", \"95%-VaR (%)\",\n",
-    "            \"Tracking Error (%)\", \"Breach Probability (%)\"\n",
-    "        ]\n",
-    "        for col in pct_cols:\n",
-    "            display_df[col] = display_df[col].map(\"{:.1f}%\".format)\n",
-    "\n",
-    "        pd.set_option(\"display.max_rows\", None)\n",
-    "        print(\"\\n=== Summary Table (Capital Mode) ===\\n\")\n",
-    "        print(display_df.to_string(index=False))\n",
-    "        print()\n",
-    "\n",
-    "    elif analysis_mode == \"returns\":\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "        # 8.8.b) Returns mode: Sweep over μ_H, σ_H, μ_E, σ_E, μ_M, σ_M. Other params fixed at midpoint.\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "\n",
-    "        E_mm = get_num(raw_params, \"external_pa_capital\", None)\n",
-    "        A_mm = get_num(raw_params, \"active_ext_capital\",  None)\n",
-    "        Z_mm = get_num(raw_params, \"internal_pa_capital\", None)\n",
-    "        if any(v is None for v in [E_mm, A_mm, Z_mm]):\n",
-    "            raise RuntimeError(\n",
-    "                \"In 'returns' mode, please supply: External PA capital (mm), \"\n",
-    "                \"Active Extension capital (mm), Internal PA capital (mm).\"\n",
-    "            )\n",
-    "\n",
-    "        mu_H_list    = build_range(\"mu_H\",    default_midpoint=default_mu_H)\n",
-    "        sigma_H_list = build_range(\"sigma_H\", default_midpoint=default_sigma_H)\n",
-    "        mu_E_list    = build_range(\"mu_E\",    default_midpoint=default_mu_E)\n",
-    "        sigma_E_list = build_range(\"sigma_E\", default_midpoint=default_sigma_E)\n",
-    "        mu_M_list    = build_range(\"mu_M\",    default_midpoint=default_mu_M)\n",
-    "        sigma_M_list = build_range(\"sigma_M\", default_midpoint=default_sigma_M)\n",
-    "\n",
-    "        ext_alpha_list = [default_ext_alpha_frac]\n",
-    "        act_share_list = [default_act_share]\n",
-    "        sd_list        = [default_sd_mult]\n",
-    "\n",
-    "        all_summaries = []\n",
-    "        all_raw_returns = {}\n",
-    "\n",
-    "        for muH in mu_H_list:\n",
-    "            for sH in sigma_H_list:\n",
-    "                for muE in mu_E_list:\n",
-    "                    for sE in sigma_E_list:\n",
-    "                        for muM_ in mu_M_list:\n",
-    "                            for sM in sigma_M_list:\n",
-    "                                cov_mat = build_cov_matrix(\n",
-    "                                    rho_idx_H, rho_idx_E, rho_idx_M,\n",
-    "                                    rho_H_E,   rho_H_M,   rho_E_M,\n",
-    "                                    idx_sigma, sH, sE, sM,\n",
-    "                                )\n",
-    "\n",
-    "                                sims = prepare_mc_universe(\n",
-    "                                    N_SIMULATIONS=N_SIMULATIONS,\n",
-    "                                    N_MONTHS=N_MONTHS,\n",
-    "                                    mu_idx=mu_idx, mu_H=muH, mu_E=muE, mu_M=muM_,\n",
-    "                                    cov_mat=cov_mat,\n",
-    "                                    rng=rng,\n",
-    "                                )\n",
-    "\n",
-    "                                # broadcast financing vectors (12,) → (n_sim, 12)\n",
-    "                                f_int_matrix    = np.broadcast_to(f_internal_vec,  (N_SIMULATIONS, N_MONTHS))\n",
-    "                                f_ext_pa_matrix = np.broadcast_to(f_ext_pa_vec,    (N_SIMULATIONS, N_MONTHS))\n",
-    "                                f_act_ext_matrix= np.broadcast_to(f_act_ext_vec,   (N_SIMULATIONS, N_MONTHS))\n",
-    "\n",
-    "                                r_beta = sims[:, :, 0]   # (n_sim, n_months)\n",
-    "                                r_H    = sims[:, :, 1]\n",
-    "                                r_E    = sims[:, :, 2]\n",
-    "                                r_M    = sims[:, :, 3]\n",
-    "                \n",
-    "                                R_base   = (r_beta - f_int_matrix)   * Z_frac + r_H * Z_frac\n",
-    "                                R_extpa  = (r_beta - f_ext_pa_matrix)* E_pct  + r_M * E_pct\n",
-    "                                R_actext = (r_beta - f_act_ext_matrix)* A_pct + r_E * A_pct\n",
-    "                \n",
-    "                                results = {\n",
-    "                                    \"Base\":       np.prod(1 + R_base  , axis=1) - 1,\n",
-    "                                    \"ExternalPA\": np.prod(1 + R_extpa , axis=1) - 1,\n",
-    "                                    \"ActiveExt\":  np.prod(1 + R_actext, axis=1) - 1,\n",
-    "                                }\n",
-    "                \n",
-    "                                dates_sim = pd.date_range(\n",
-    "                                    start=idx_series.index[-1] + pd.DateOffset(months=1),\n",
-    "                                    periods=N_MONTHS, freq=\"ME\"\n",
-    "                                )\n",
-    "                \n",
-    "                                # Keep first simulation’s path for raw-return sheets\n",
-    "                                raw_returns = {\n",
-    "                                    \"Base\":       pd.DataFrame({\"Base\":       R_base[0]},   index=dates_sim),\n",
-    "                                    \"ExternalPA\": pd.DataFrame({\"ExternalPA\": R_extpa[0]},  index=dates_sim),\n",
-    "                                    \"ActiveExt\":  pd.DataFrame({\"ActiveExt\":  R_actext[0]}, index=dates_sim),\n",
-    "                                }\n",
-    "\n",
-    "                                df_yearly = pd.DataFrame(results)\n",
-    "                                summary_rows = []\n",
-    "                                for cfg, arr in df_yearly.items():\n",
-    "                                    ann_ret = np.mean(arr)\n",
-    "                                    ann_vol = np.std(arr, ddof=1)\n",
-    "                                    var_95  = np.percentile(arr, 5)\n",
-    "                                    te      = np.nan\n",
-    "\n",
-    "                                    mr_series = raw_returns[cfg].iloc[:, 0]\n",
-    "                                    threshold = -buffer_multiple * idx_sigma\n",
-    "                                    breach_pct = np.mean(mr_series < threshold) * 100\n",
-    "\n",
-    "                                    summary_rows.append({\n",
-    "                                        \"Config\": cfg,\n",
-    "                                        \"μ_H (%)\":    f\"{muH*100:.1f}%\",\n",
-    "                                        \"σ_H (%)\":    f\"{sH*100:.1f}%\",\n",
-    "                                        \"μ_E (%)\":    f\"{muE*100:.1f}%\",\n",
-    "                                        \"σ_E (%)\":    f\"{sE*100:.1f}%\",\n",
-    "                                        \"μ_M (%)\":    f\"{muM_*100:.1f}%\",\n",
-    "                                        \"σ_M (%)\":    f\"{sM*100:.1f}%\",\n",
-    "                                        \"Internal PA (mm)\": Z_mm,\n",
-    "                                        \"External PA (mm)\": E_mm,\n",
-    "                                        \"Active Ext (mm)\":  A_mm,\n",
-    "                                        \"Annual Return\":      ann_ret,\n",
-    "                                        \"Annual Vol\":         ann_vol,\n",
-    "                                        \"VaR 95\":             var_95,\n",
-    "                                        \"TE (est.)\":          te,\n",
-    "                                        \"Breach %\":           breach_pct\n",
-    "                                    })\n",
-    "\n",
-    "                                summary_df = pd.DataFrame(summary_rows)\n",
-    "                                all_summaries.append(summary_df)\n",
-    "\n",
-    "                                for key, df_r in raw_returns.items():\n",
-    "                                    sheet_key = (\n",
-    "                                        f\"{key}_H{muH*100:.0f}\"\n",
-    "                                        f\"_sH{sH*100:.0f}\"\n",
-    "                                        f\"_E{muE*100:.0f}\"\n",
-    "                                        f\"_sE{sE*100:.0f}\"\n",
-    "                                        f\"_M{muM_*100:.0f}\"\n",
-    "                                        f\"_sM{sM*100:.0f}\"\n",
-    "                                    )\n",
-    "                                    all_raw_returns[sheet_key] = df_r\n",
-    "\n",
-    "        final_summary = pd.concat(all_summaries, ignore_index=True)\n",
-    "\n",
-    "        inputs_dict = {\n",
-    "            \"Analysis mode\":                    \"returns\",\n",
-    "            \"In-House return min (%)\":          get_num(raw_params, \"mu_H_min\",    \"\"),\n",
-    "            \"In-House return max (%)\":          get_num(raw_params, \"mu_H_max\",    \"\"),\n",
-    "            \"In-House return step (%)\":         get_num(raw_params, \"mu_H_step\",   \"\"),\n",
-    "            \"In-House vol min (%)\":             get_num(raw_params, \"sigma_H_min\", \"\"),\n",
-    "            \"In-House vol max (%)\":             get_num(raw_params, \"sigma_H_max\", \"\"),\n",
-    "            \"In-House vol step (%)\":            get_num(raw_params, \"sigma_H_step\",\"\"),\n",
-    "            \"Alpha-Extension return min (%)\":   get_num(raw_params, \"mu_E_min\",    \"\"),\n",
-    "            \"Alpha-Extension return max (%)\":   get_num(raw_params, \"mu_E_max\",    \"\"),\n",
-    "            \"Alpha-Extension return step (%)\":  get_num(raw_params, \"mu_E_step\",   \"\"),\n",
-    "            \"Alpha-Extension vol min (%)\":      get_num(raw_params, \"sigma_E_min\", \"\"),\n",
-    "            \"Alpha-Extension vol max (%)\":      get_num(raw_params, \"sigma_E_max\", \"\"),\n",
-    "            \"Alpha-Extension vol step (%)\":     get_num(raw_params, \"sigma_E_step\",\"\"),\n",
-    "            \"External return min (%)\":          get_num(raw_params, \"mu_M_min\",    \"\"),\n",
-    "            \"External return max (%)\":          get_num(raw_params, \"mu_M_max\",    \"\"),\n",
-    "            \"External return step (%)\":         get_num(raw_params, \"mu_M_step\",   \"\"),\n",
-    "            \"External vol min (%)\":             get_num(raw_params, \"sigma_M_min\", \"\"),\n",
-    "            \"External vol max (%)\":             get_num(raw_params, \"sigma_M_max\", \"\"),\n",
-    "            \"External vol step (%)\":            get_num(raw_params, \"sigma_M_step\",\"\"),\n",
-    "            \"External PA capital (mm)\":         E_mm,\n",
-    "            \"Active Extension capital (mm)\":    A_mm,\n",
-    "            \"Internal PA capital (mm)\":         Z_mm,\n",
-    "            \"Buffer multiple\":                  buffer_multiple\n",
-    "        }\n",
-    "\n",
-    "        export_to_excel(inputs_dict, final_summary, all_raw_returns)\n",
-    "\n",
-    "        display_df = final_summary.copy()\n",
-    "        display_df = display_df.rename(columns={\n",
-    "            \"Annual Return\": \"Annual Return (%)\",\n",
-    "            \"Annual Vol\":    \"Annual Volatility (%)\",\n",
-    "            \"VaR 95\":        \"95%-VaR (%)\",\n",
-    "            \"TE (est.)\":     \"Tracking Error (%)\",\n",
-    "            \"Breach %\":      \"Breach Probability (%)\"\n",
-    "        })\n",
-    "        pct_cols = [\n",
-    "            \"Annual Return (%)\", \"Annual Volatility (%)\", \"95%-VaR (%)\",\n",
-    "            \"Tracking Error (%)\", \"Breach Probability (%)\"\n",
-    "        ]\n",
-    "        for col in pct_cols:\n",
-    "            display_df[col] = display_df[col].map(\"{:.1f}%\".format)\n",
-    "\n",
-    "        pd.set_option(\"display.max_rows\", None)\n",
-    "        print(\"\\n=== Summary Table (Returns Mode) ===\\n\")\n",
-    "        print(display_df.to_string(index=False))\n",
-    "        print()\n",
-    "\n",
-    "    elif analysis_mode == \"alpha_shares\":\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "        # 8.8.c) Alpha_Shares mode: Sweep over external_pa_alpha_frac, active_share. Others fixed.\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "\n",
-    "        E_mm = get_num(raw_params, \"external_pa_capital\", None)\n",
-    "        A_mm = get_num(raw_params, \"active_ext_capital\",  None)\n",
-    "        Z_mm = get_num(raw_params, \"internal_pa_capital\", None)\n",
-    "        if any(v is None for v in [E_mm, A_mm, Z_mm]):\n",
-    "            raise RuntimeError(\n",
-    "                \"In 'alpha_shares' mode, supply: External PA capital (mm), \"\n",
-    "                \"Active Extension capital (mm), Internal PA capital (mm).\"\n",
-    "            )\n",
-    "\n",
-    "        external_pa_alpha_frac_list = build_range(\"external_pa_alpha_frac\", default_midpoint=default_ext_alpha_frac)\n",
-    "        active_share_list           = build_range(\"active_share\",            default_midpoint=default_act_share)\n",
-    "\n",
-    "        mu_H_list    = [default_mu_H]\n",
-    "        sigma_H_list = [default_sigma_H]\n",
-    "        mu_E_list    = [default_mu_E]\n",
-    "        sigma_E_list = [default_sigma_E]\n",
-    "        mu_M_list    = [default_mu_M]\n",
-    "        sigma_M_list = [default_sigma_M]\n",
-    "        sd_list      = [default_sd_mult]\n",
-    "\n",
-    "        all_summaries = []\n",
-    "        all_raw_returns = {}\n",
-    "\n",
-    "        for ext_alpha in external_pa_alpha_frac_list:\n",
-    "            for act_share in active_share_list:\n",
-    "                \n",
-    "                # Re‑use global Monte‑Carlo cube and broadcast financing vectors\n",
-    "                sims = mc_paths  # shape (N_SIMULATIONS, 12, 4)\n",
-    "                r_beta = sims[:, :, 0]   # (n_sim, n_months)\n",
-    "                r_H    = sims[:, :, 1]\n",
-    "                r_E    = sims[:, :, 2]\n",
-    "                r_M    = sims[:, :, 3]\n",
-    "\n",
-    "                f_int_matrix    = np.broadcast_to(f_internal_vec,  (N_SIMULATIONS, N_MONTHS))\n",
-    "                f_ext_pa_matrix = np.broadcast_to(f_ext_pa_vec,    (N_SIMULATIONS, N_MONTHS))\n",
-    "                f_act_ext_matrix= np.broadcast_to(f_act_ext_vec,   (N_SIMULATIONS, N_MONTHS))\n",
-    "\n",
-    "                R_extpa  = (r_beta - f_ext_pa_matrix[sim_i]) * ext_alpha + r_M * ext_alpha\n",
-    "                R_actext = (r_beta - f_act_ext_matrix[sim_i]) * act_share + r_E * act_share\n",
-    "                \n",
-    "\n",
-    "                R_base   = (r_beta - f_int_matrix)   * Z_frac + r_H * Z_frac\n",
-    "                R_extpa  = (r_beta - f_ext_pa_matrix)* E_pct  + r_M * E_pct\n",
-    "                R_actext = (r_beta - f_act_ext_matrix)* A_pct + r_E * A_pct\n",
-    "\n",
-    "                results = {\n",
-    "                    \"Base\":       np.prod(1 + R_base  , axis=1) - 1,\n",
-    "                    \"ExternalPA\": np.prod(1 + R_extpa , axis=1) - 1,\n",
-    "                    \"ActiveExt\":  np.prod(1 + R_actext, axis=1) - 1,\n",
-    "                }\n",
-    "\n",
-    "                dates_sim = pd.date_range(\n",
-    "                    start=idx_series.index[-1] + pd.DateOffset(months=1),\n",
-    "                    periods=N_MONTHS, freq=\"ME\"\n",
-    "                )\n",
-    "\n",
-    "                # Keep first simulation’s path for raw-return sheets\n",
-    "                raw_returns = {\n",
-    "                    \"Base\":       pd.DataFrame({\"Base\":       R_base[0]},   index=dates_sim),\n",
-    "                    \"ExternalPA\": pd.DataFrame({\"ExternalPA\": R_extpa[0]},  index=dates_sim),\n",
-    "                    \"ActiveExt\":  pd.DataFrame({\"ActiveExt\":  R_actext[0]}, index=dates_sim),\n",
-    "                }\n",
-    "\n",
-    "                df_yearly = pd.DataFrame(results)\n",
-    "                summary_rows = []\n",
-    "                for cfg, arr in df_yearly.items():\n",
-    "                    ann_ret = np.mean(arr)\n",
-    "                    ann_vol = np.std(arr, ddof=1)\n",
-    "                    var_95  = np.percentile(arr, 5)\n",
-    "                    te      = np.nan\n",
-    "\n",
-    "                    mr_series = raw_returns[cfg].iloc[:, 0]\n",
-    "                    threshold = -buffer_multiple * idx_sigma\n",
-    "                    breach_pct = np.mean(mr_series < threshold) * 100\n",
-    "\n",
-    "                    summary_rows.append({\n",
-    "                        \"Config\":            cfg,\n",
-    "                        \"External PA α (%)\": f\"{ext_alpha*100:.1f}%\",\n",
-    "                        \"Active share (%)\":  f\"{act_share*100:.1f}%\",\n",
-    "                        \"Internal PA (mm)\":   Z_mm,\n",
-    "                        \"External PA (mm)\":   E_mm,\n",
-    "                        \"Active Ext (mm)\":    A_mm,\n",
-    "                        \"Annual Return\":      ann_ret,\n",
-    "                        \"Annual Vol\":         ann_vol,\n",
-    "                        \"VaR 95\":             var_95,\n",
-    "                        \"TE (est.)\":          te,\n",
-    "                        \"Breach %\":           breach_pct\n",
-    "                    })\n",
-    "\n",
-    "                summary_df = pd.DataFrame(summary_rows)\n",
-    "                all_summaries.append(summary_df)\n",
-    "\n",
-    "                for key, df_r in raw_returns.items():\n",
-    "                    sheet_key = f\"{key}_α{ext_alpha*100:.0f}_act{act_share*100:.0f}\"\n",
-    "                    all_raw_returns[sheet_key] = df_r\n",
-    "\n",
-    "        final_summary = pd.concat(all_summaries, ignore_index=True)\n",
-    "\n",
-    "        inputs_dict = {\n",
-    "            \"Analysis mode\":                  \"alpha_shares\",\n",
-    "            \"External PA α fraction min (%)\": get_num(raw_params, \"external_pa_alpha_frac_min\", \"\"),\n",
-    "            \"External PA α fraction max (%)\": get_num(raw_params, \"external_pa_alpha_frac_max\", \"\"),\n",
-    "            \"External PA α fraction step (%)\":get_num(raw_params, \"external_pa_alpha_frac_step\", \"\"),\n",
-    "            \"Active share min (%)\":          get_num(raw_params, \"active_share_min\", \"\"),\n",
-    "            \"Active share max (%)\":          get_num(raw_params, \"active_share_max\", \"\"),\n",
-    "            \"Active share step (%)\":         get_num(raw_params, \"active_share_step\", \"\"),\n",
-    "            \"External PA capital (mm)\":      E_mm,\n",
-    "            \"Active Extension capital (mm)\": A_mm,\n",
-    "            \"Internal PA capital (mm)\":      Z_mm,\n",
-    "            \"Buffer multiple\":               buffer_multiple\n",
-    "        }\n",
-    "\n",
-    "        export_to_excel(inputs_dict, final_summary, all_raw_returns)\n",
-    "\n",
-    "        display_df = final_summary.copy()\n",
-    "        display_df = display_df.rename(columns={\n",
-    "            \"Annual Return\": \"Annual Return (%)\",\n",
-    "            \"Annual Vol\":    \"Annual Volatility (%)\",\n",
-    "            \"VaR 95\":        \"95%-VaR (%)\",\n",
-    "            \"TE (est.)\":     \"Tracking Error (%)\",\n",
-    "            \"Breach %\":      \"Breach Probability (%)\"\n",
-    "        })\n",
-    "        pct_cols = [\n",
-    "            \"Annual Return (%)\", \"Annual Volatility (%)\", \"95%-VaR (%)\",\n",
-    "            \"Tracking Error (%)\", \"Breach Probability (%)\"\n",
-    "        ]\n",
-    "        for col in pct_cols:\n",
-    "            display_df[col] = display_df[col].map(\"{:.1f}%\".format)\n",
-    "\n",
-    "        pd.set_option(\"display.max_rows\", None)\n",
-    "        print(\"\\n=== Summary Table (Alpha_Shares Mode) ===\\n\")\n",
-    "        print(display_df.to_string(index=False))\n",
-    "        print()\n",
-    "\n",
-    "    elif analysis_mode == \"vol_mult\":\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "        # 8.8.d) Vol_Mult mode: Sweep SD multiple; other params fixed at midpoint.\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "\n",
-    "        E_mm = get_num(raw_params, \"external_pa_capital\", None)\n",
-    "        A_mm = get_num(raw_params, \"active_ext_capital\",  None)\n",
-    "        Z_mm = get_num(raw_params, \"internal_pa_capital\", None)\n",
-    "        if any(v is None for v in [E_mm, A_mm, Z_mm]):\n",
-    "            raise RuntimeError(\n",
-    "                \"In 'vol_mult' mode, supply: External PA capital (mm), \"\n",
-    "                \"Active Extension capital (mm), Internal PA capital (mm).\"\n",
-    "            )\n",
-    "\n",
-    "        sd_list = build_range_int(\"sd_of_vol_mult\", default_midpoint=default_sd_mult)\n",
-    "\n",
-    "        mu_H_list    = [default_mu_H]\n",
-    "        sigma_H_list = [default_sigma_H]\n",
-    "        mu_E_list    = [default_mu_E]\n",
-    "        sigma_E_list = [default_sigma_E]\n",
-    "        mu_M_list    = [default_mu_M]\n",
-    "        sigma_M_list = [default_sigma_M]\n",
-    "        ext_alpha_list = [default_ext_alpha_frac]\n",
-    "        act_share_list = [default_act_share]\n",
-    "\n",
-    "        all_summaries = []\n",
-    "        all_raw_returns = {}\n",
-    "\n",
-    "        for sd_mult in sd_list:\n",
-    "            # Use global Monte‑Carlo cube and broadcast financing vectors\n",
-    "            sims = mc_paths  # shape (N_SIMULATIONS, 12, 4)\n",
-    "\n",
-    "            f_int_matrix    = np.broadcast_to(f_internal_vec,  (N_SIMULATIONS, N_MONTHS))\n",
-    "            f_ext_pa_matrix = np.broadcast_to(f_ext_pa_vec,    (N_SIMULATIONS, N_MONTHS))\n",
-    "            f_act_ext_matrix= np.broadcast_to(f_act_ext_vec,   (N_SIMULATIONS, N_MONTHS))\n",
-    "\n",
-    "            r_beta = sims[:, :, 0]   # (n_sim, n_months)\n",
-    "            r_H    = sims[:, :, 1]\n",
-    "            r_E    = sims[:, :, 2]\n",
-    "            r_M    = sims[:, :, 3]\n",
-    "\n",
-    "            R_base   = (r_beta - f_int_matrix)   * Z_frac + r_H * Z_frac\n",
-    "            R_extpa  = (r_beta - f_ext_pa_matrix)* E_pct  + r_M * E_pct\n",
-    "            R_actext = (r_beta - f_act_ext_matrix)* A_pct + r_E * A_pct\n",
-    "\n",
-    "            results = {\n",
-    "                \"Base\":       np.prod(1 + R_base  , axis=1) - 1,\n",
-    "                \"ExternalPA\": np.prod(1 + R_extpa , axis=1) - 1,\n",
-    "                \"ActiveExt\":  np.prod(1 + R_actext, axis=1) - 1,\n",
-    "            }\n",
-    "\n",
-    "            dates_sim = pd.date_range(\n",
-    "                start=idx_series.index[-1] + pd.DateOffset(months=1),\n",
-    "                periods=N_MONTHS, freq=\"ME\"\n",
-    "            )\n",
-    "\n",
-    "            # Keep first simulation’s path for raw-return sheets\n",
-    "            raw_returns = {\n",
-    "                \"Base\":       pd.DataFrame({\"Base\":       R_base[0]},   index=dates_sim),\n",
-    "                \"ExternalPA\": pd.DataFrame({\"ExternalPA\": R_extpa[0]},  index=dates_sim),\n",
-    "                \"ActiveExt\":  pd.DataFrame({\"ActiveExt\":  R_actext[0]}, index=dates_sim),\n",
-    "            }\n",
-    "\n",
-    "            df_yearly = pd.DataFrame(results)\n",
-    "            summary_rows = []\n",
-    "            for cfg, arr in df_yearly.items():\n",
-    "                ann_ret = np.mean(arr)\n",
-    "                ann_vol = np.std(arr, ddof=1)\n",
-    "                var_95  = np.percentile(arr, 5)\n",
-    "                te      = np.nan\n",
-    "\n",
-    "                mr_series = raw_returns[cfg].iloc[:, 0]\n",
-    "                threshold = - (sd_mult * idx_sigma)\n",
-    "                breach_pct = np.mean(mr_series < threshold) * 100\n",
-    "\n",
-    "                summary_rows.append({\n",
-    "                    \"Config\":        cfg,\n",
-    "                    \"SD mult\":       sd_mult,\n",
-    "                    \"Internal PA (mm)\": Z_mm,\n",
-    "                    \"External PA (mm)\": E_mm,\n",
-    "                    \"Active Ext (mm)\":  A_mm,\n",
-    "                    \"Annual Return\":      ann_ret,\n",
-    "                    \"Annual Vol\":         ann_vol,\n",
-    "                    \"VaR 95\":             var_95,\n",
-    "                    \"TE (est.)\":          te,\n",
-    "                    \"Breach %\":           breach_pct\n",
-    "                })\n",
-    "\n",
-    "            summary_df = pd.DataFrame(summary_rows)\n",
-    "            all_summaries.append(summary_df)\n",
-    "\n",
-    "            for key, df_r in raw_returns.items():\n",
-    "                sheet_key = f\"{key}_SD{sd_mult}\"\n",
-    "                all_raw_returns[sheet_key] = df_r\n",
-    "\n",
-    "        final_summary = pd.concat(all_summaries, ignore_index=True)\n",
-    "\n",
-    "        inputs_dict = {\n",
-    "            \"Analysis mode\":        \"vol_mult\",\n",
-    "            \"SD multiple min\":      get_num(raw_params, \"sd_of_vol_mult_min\", \"\"),\n",
-    "            \"SD multiple max\":      get_num(raw_params, \"sd_of_vol_mult_max\", \"\"),\n",
-    "            \"SD multiple step\":     get_num(raw_params, \"sd_of_vol_mult_step\", \"\"),\n",
-    "            \"External PA capital (mm)\":     E_mm,\n",
-    "            \"Active Extension capital (mm)\":A_mm,\n",
-    "            \"Internal PA capital (mm)\":     Z_mm,\n",
-    "            \"Buffer multiple\":     buffer_multiple\n",
-    "        }\n",
-    "\n",
-    "        export_to_excel(inputs_dict, final_summary, all_raw_returns)\n",
-    "\n",
-    "        display_df = final_summary.copy()\n",
-    "        display_df = display_df.rename(columns={\n",
-    "            \"Annual Return\": \"Annual Return (%)\",\n",
-    "            \"Annual Vol\":    \"Annual Volatility (%)\",\n",
-    "            \"VaR 95\":        \"95%-VaR (%)\",\n",
-    "            \"TE (est.)\":     \"Tracking Error (%)\",\n",
-    "            \"Breach %\":      \"Breach Probability (%)\"\n",
-    "        })\n",
-    "        pct_cols = [\n",
-    "            \"Annual Return (%)\", \"Annual Volatility (%)\", \"95%-VaR (%)\",\n",
-    "            \"Tracking Error (%)\", \"Breach Probability (%)\"\n",
-    "        ]\n",
-    "        for col in pct_cols:\n",
-    "            display_df[col] = display_df[col].map(\"{:.1f}%\".format)\n",
-    "\n",
-    "        pd.set_option(\"display.max_rows\", None)\n",
-    "        print(\"\\n=== Summary Table (Vol_Mult Mode) ===\\n\")\n",
-    "        print(display_df.to_string(index=False))\n",
-    "        print()\n",
-    "\n",
-    "    else:\n",
-    "        raise RuntimeError(f\"Unexpected analysis mode: '{analysis_mode}'\")"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "bb81508f-1ca5-4604-918f-869890401c9e",
-   "metadata": {},
-   "outputs": [],
-   "source": []
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "ff0ff261-33e0-4623-86c6-7c24c1c78c51",
-   "metadata": {
-    "jp-MarkdownHeadingCollapsed": true
-   },
-   "outputs": [],
-   "source": [
-    "export_to_excel(\n",
-    "    inputs_dict,\n",
-    "    final_summary,\n",
-    "    all_raw_returns,\n",
-    "    filename=\"/Users/teacher/Library/CloudStorage/Dropbox/Learning/Code/Portable\\ Alpha-Extension\\ Model/Outputs.xlsx\"\n",
-    ")\n",
-    "\n",
-    "print(\"Wrote Outputs.xlsx\")"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "1e3414b6-e952-4ed6-8097-7dc7ea975528",
-   "metadata": {},
-   "source": [
-    "# Portable Alpha + Active Extension Model Specification\n",
-    "\n",
-    "Below is a comprehensive description of the updated portable‐alpha + active‐extension model, ready to paste into a Markdown cell. Every section is clearly labeled, and all equations use LaTeX delimiters.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 1. Purpose and High-Level Overview\n",
-    "\n",
-    "**Goal:**  \n",
-    "Construct a Monte Carlo framework that allocates a fixed pool of capital (e.g. \\$1 b) across three “sleeves” (Internal, External Portable-Alpha, and Active Extension), simulates joint returns on Index, In-House α, Extension α, and External PA α, and then reports portfolio metrics (annual return, volatility, VaR, tracking error, breach probability).\n",
-    "\n",
-    "Key innovations vs. a simpler portable-alpha model:  \n",
-    "1. **Separate “reference period”** used to compute index volatility σₙ, which in turn determines the cash/margin needed to synthetically hold 1:1 index exposure.  \n",
-    "2. **Three explicit buckets** whose dollar-amounts sum to \\$ 1 b, avoiding any double-counting of β + α exposures.  \n",
-    "3. **Active Extension bucket** that can be “150/50” or “170/70” long/short, specified by an “Active share (%)” input. By default, we assume 150/50 (i.e. Active share = 50 %) unless the user overrides.\n",
-    "\n",
-    "Everything ultimately flows into a set of formulas—one per bucket—that map monthly draws of\n",
-    "\\[\n",
-    "(r_{\\beta},\\,r_{H},\\,r_{E},\\,r_{M}) \n",
-    "\\quad\\text{and}\\quad\n",
-    "f_t\n",
-    "\\]\n",
-    "into portfolio returns.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 2. Core Assumptions and Variables\n",
-    "\n",
-    "1. **Index (β) returns**  \n",
-    "   - We load a historical time series of monthly total returns on the S&P 500 TR (or whichever index) from a CSV.  \n",
-    "   - We partition that series into:  \n",
-    "     1. A **reference window** (e.g. 2010 – 2014) used to compute “reference volatility” σₙ.  \n",
-    "     2. An **analysis window** (e.g. 2015 – 2020) used to compute the actual mean (μₙ) and volatility (σₙ) that drive our Monte Carlo draws.\n",
-    "\n",
-    "2. **Three α-streams** (simulated jointly with β)  \n",
-    "   - **In-House α** \\($r_H$\\):  \n",
-    "     - Mean = μ_H/12  \n",
-    "     - Vol = σ_H / √12  \n",
-    "     - Correlation ρ_{β,H} with β.  \n",
-    "   - **Extension α** \\($r_E$\\):  \n",
-    "     - Mean = μ_E/12  \n",
-    "     - Vol = σ_E / √12  \n",
-    "     - Correlation ρ_{β,E} with β.  \n",
-    "   - **External PA α** \\($r_M$\\):  \n",
-    "     - Mean = μ_M/12  \n",
-    "     - Vol = σ_M / √12  \n",
-    "     - Correlation ρ_{β,M} with β.\n",
-    "\n",
-    "3. **Financing spread** \\($f_t$\\)  \n",
-    "   - A month-by-month random draw around a drift (financing_mean/12) with vol (financing_vol/12) and occasional jumps of size (spike_factor × (financing_vol/12)), happening with probability spike_prob.  \n",
-    "   - In each month, any bucket that holds \\((r_{\\beta} − f_t)\\) is charged that financing cost.\n",
-    "\n",
-    "4. **Total fund capital** (in millions, default = 1000)  \n",
-    "   - We allocate exactly \\$ 1 b across three buckets (plus any residual “cash-leftover” after margin).\n",
-    "\n",
-    "5. **Standard-deviation multiple** (sd_of_vol_mult, default = 3)  \n",
-    "   - “To hold \\$ 1 b of index exposure, you must keep aside cash = σₙ × (sd_of_vol_mult) × \\$ 1 b.”  \n",
-    "   - That cash is the **internal beta-backing** or “margin cash,” needed for futures/swaps.\n",
-    "\n",
-    "6. **Three capital buckets** (all in \\$ mm, must sum to 1000)  \n",
-    "   1. **External PA capital** \\($X$\\)  \n",
-    "      - Manager takes \\$ X m; buys \\$ X m of index (β) and \\((external_pa_alpha_frac × X m)\\) of α.  \n",
-    "      - Default α fraction = 50 % (\\(\\theta_{\\mathrm{ExtPA}}=0.50\\)).  \n",
-    "   2. **Active Extension capital** \\($Y$\\)  \n",
-    "      - Manager runs a long/short portfolio with **Active share** \\(S\\).  \n",
-    "      - By default, “150/50” means \\(S=0.50\\) (i.e. 150 % long, 50 % short → net 100 %).  \n",
-    "   3. **Internal PA capital** \\($Z$\\)  \n",
-    "      - Runs in-house α; the remainder of internal cash (beyond margin) is used here.\n",
-    "\n",
-    "7. **Internal beta backing** \\($W$\\) (computed, not user-entered)  \n",
-    "   \\[\n",
-    "     W = \\sigma_{\\text{ref}} \\times (\\mathrm{sd\\_of\\_vol\\_mult}) \\times 1000 \\quad (\\text{\\$ mm}).\n",
-    "   \\]\n",
-    "   - That cash sits in reserve to back a \\$ 1 b index position via futures/swaps.  \n",
-    "   - Because the external PA and active-extension managers each hold index exposure “inside” their \\$ X m or \\$ Y m, **you do not hold margin for that portion**. You only hold \\(W\\) for the total \\$ 1 b.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 3. Capital-Allocation Equations\n",
-    "\n",
-    "1. **Check**:  \n",
-    "   \\[\n",
-    "     X + Y + Z \\;=\\; 1000 \\quad(\\text{\\$ mm}),\n",
-    "   \\]  \n",
-    "   where  \n",
-    "   - \\(X = \\text{external\\_pa\\_capital},\\)  \n",
-    "   - \\(Y = \\text{active\\_ext\\_capital},\\)  \n",
-    "   - \\(Z = \\text{internal\\_pa\\_capital}.\\)\n",
-    "\n",
-    "2. **Margin (internal beta backing)**:  \n",
-    "   \\[\n",
-    "     W = \\sigma_{\\text{ref}} \\times (\\mathrm{sd\\_of\\_vol\\_mult}) \\times 1000 \\quad (\\text{\\$ mm}).\n",
-    "   \\]\n",
-    "\n",
-    "3. **Internal cash leftover (runs In-House PA)**:  \n",
-    "   \\[\n",
-    "     \\text{internal\\_cash\\_leftover} \n",
-    "     = 1000 - W - Z \\quad (\\text{\\$ mm}).\n",
-    "   \\]\n",
-    "\n",
-    "   - If \\(W + Z > 1000\\), the capital structure is infeasible (you cannot hold margin + in-house PA + external buckets all on \\$ 1 b).\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 4. Return Equations\n",
-    "\n",
-    "We simulate, for each month \\(t\\):\n",
-    "\n",
-    "\\[\n",
-    "(r_{\\beta,t},\\,r_{H,t},\\,r_{E,t},\\,r_{M,t}) \n",
-    "\\;\\sim\\;\\text{MVN}\\bigl([\\mu_{\\beta},\\,\\mu_H,\\,\\mu_E,\\,\\mu_M],\\,\\Sigma\\bigr),\n",
-    "\\]\n",
-    "with\n",
-    "- \\(\\mu_{\\beta} = \\mu_{\\text{idx}}\\) (monthly mean from analysis window),  \n",
-    "- \\(\\mu_H = \\frac{\\mu_H^{(\\text{annual})}}{12}\\),  \n",
-    "- \\(\\mu_E = \\frac{\\mu_E^{(\\text{annual})}}{12}\\),  \n",
-    "- \\(\\mu_M = \\frac{\\mu_M^{(\\text{annual})}}{12}\\).  \n",
-    "\n",
-    "Covariance \\(\\Sigma\\) built from:  \n",
-    "- \\(\\sigma_{\\beta} = \\sigma_{\\text{ref}}\\) (monthly vol from reference window),  \n",
-    "- \\(\\sigma_H = \\sigma_H^{(\\text{annual})}/\\sqrt{12}\\),  \n",
-    "- \\(\\sigma_E = \\sigma_E^{(\\text{annual})}/\\sqrt{12}\\),  \n",
-    "- \\(\\sigma_M = \\sigma_M^{(\\text{annual})}/\\sqrt{12}\\),  \n",
-    "- Pairwise correlations \\(\\rho_{\\beta,H},\\,\\rho_{\\beta,E},\\,\\rho_{\\beta,M},\\,\\rho_{H,E},\\,\\dots\\).  \n",
-    "\n",
-    "Additionally, each month we draw a financing cost:\n",
-    "\\[\n",
-    "f_t = \\frac{\\text{financing_mean}}{12} + \\varepsilon_t,\\quad\n",
-    "\\varepsilon_t \\sim \\mathcal{N}\\bigl(0,\\;(\\tfrac{\\text{financing_vol}}{12})^2\\bigr),\n",
-    "\\]\n",
-    "with probability \\(\\text{spike_prob}\\) of a jump \\(=\\text{spike_factor} \\times \\frac{\\text{financing_vol}}{12}\\).\n",
-    "\n",
-    "---\n",
-    "\n",
-    "### 4.1. Base (All In-House) Strategy\n",
-    "\n",
-    "\\[\n",
-    "R_{\\text{Base},t}\n",
-    "= \\; (r_{\\beta,t} - f_t)\\,\\times\\,w_{\\beta_H}\n",
-    "\\;+\\; r_{H,t}\\,\\times\\,w_{\\alpha_H}.\n",
-    "\\]\n",
-    "By default, \\(w_{\\beta_H} = 0.50\\) and \\(w_{\\alpha_H} = 0.50\\).\n",
-    "\n",
-    "---\n",
-    "\n",
-    "### 4.2. External PA Strategy\n",
-    "\n",
-    "- Capital allocated: \\(X = \\text{external_pa_capital}\\).  \n",
-    "- Manager buys \\$ X m of index (β) and allocates \\(\\theta_{\\mathrm{ExtPA}} = \\text{external_pa_alpha_frac}\\) of that \\$ X m to α.  \n",
-    "\n",
-    "Return formula:\n",
-    "\\[\n",
-    "R_{\\text{ExtPA},t}\n",
-    "= \\underbrace{\\frac{X}{1000}}_{w_{\\beta}^{\\text{ExtPA}}}\\,(r_{\\beta,t} - f_t)\n",
-    "\\;+\\;\\underbrace{\\tfrac{X}{1000} \\,\\times\\,\\theta_{\\mathrm{ExtPA}}}_{w_{\\alpha}^{\\text{ExtPA}}}\\;(r_{M,t}).\n",
-    "\\]\n",
-    "- If \\(\\theta_{\\mathrm{ExtPA}} = 0.50\\), then half of \\$ X m is alpha, half is index.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "### 4.3. Active Extension Strategy\n",
-    "\n",
-    "- Capital allocated: \\(Y = \\text{active_ext_capital}\\).  \n",
-    "- Manager runs a long/short portfolio with **Active share** \\(S = \\frac{\\text{active_share_percent}}{100}\\).  \n",
-    "  - E.g. 150/50 → \\(S = 0.50\\).  \n",
-    "  - 170/70 → \\(S = 0.70\\).\n",
-    "\n",
-    "Return formula:\n",
-    "\\[\n",
-    "R_{\\text{ActExt},t}\n",
-    "= \\underbrace{\\frac{Y}{1000}}_{w_{\\beta}^{\\text{ActExt}}}\\,(r_{\\beta,t} - f_t)\n",
-    "\\;+\\;\\underbrace{\\frac{Y}{1000}\\,\\times\\,S}_{w_{\\alpha}^{\\text{ActExt}}}\\;(r_{E,t}).\n",
-    "\\]\n",
-    "- The manager’s long/short is embedded in \\(r_{E,t}\\).  \n",
-    "\n",
-    "---\n",
-    "\n",
-    "### 4.4. Internal Margin & Internal PA\n",
-    "\n",
-    "Because both external PA and active-extension managers hold their own index exposure, on your books you only need to hold margin for a single \\$ 1 b of index. That is:\n",
-    "\\[\n",
-    "W = \\sigma_{\\text{ref}} \\times (\\mathrm{sd\\_of\\_vol\\_mult}) \\times 1000 \\quad (\\text{\\$ mm}).\n",
-    "\\]\n",
-    "Then you also decide to run \\(Z = \\text{internal_pa_capital}\\) in-house PA:\n",
-    "\n",
-    "- **Internal Beta (margin):**  \n",
-    "  \\[\n",
-    "  R_{\\text{IntBet},t}\n",
-    "  = \\Bigl(\\tfrac{W}{1000}\\Bigr)\\,(r_{\\beta,t} - f_t).\n",
-    "  \\]\n",
-    "- **Internal PA alpha:**  \n",
-    "  \\[\n",
-    "  R_{\\text{IntPA},t}\n",
-    "  = \\Bigl(\\tfrac{Z}{1000}\\Bigr)\\,(r_{H,t}).\n",
-    "  \\]\n",
-    "- **Internal cash leftover:**  \n",
-    "  \\[\n",
-    "  \\text{internal\\_cash\\_leftover} = 1000 - W - Z \\quad (\\text{if positive, earns 0}).\n",
-    "  \\]\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 5. Putting It All Together in Simulation\n",
-    "\n",
-    "1. **Read user inputs** (via `load_parameters()`):\n",
-    "   - Dates: `start_date`, `end_date`, `ref_start_date`, `ref_end_date`\n",
-    "   - Vol/risk: `sd_of_vol_mult`\n",
-    "   - Returns: `financing_mean`, `financing_vol`, `μ_H`, `σ_H`, `μ_E`, `σ_E`, `μ_M`, `σ_M`\n",
-    "   - Correlations: `ρ_{β,H}`, `ρ_{β,E}`, `ρ_{β,M}`, `ρ_{H,E}`, `ρ_{H,M}`, `ρ_{E,M}`\n",
-    "   - Capital buckets: `external_pa_capital`, `external_pa_alpha_frac`, `active_ext_capital`, `active_share_percent`, `internal_pa_capital`\n",
-    "   - Total fund capital (mm): default = 1000\n",
-    "\n",
-    "2. **Load index CSV** → `idx_full` (monthly total returns).\n",
-    "\n",
-    "3. **Filter**  \n",
-    "   - **`idx_series`** = `idx_full[ start_date : end_date ]` → used for μ_β and σ_β.  \n",
-    "   - **`idx_ref`** = `idx_full[ ref_start_date : ref_end_date ]` → used for σ_ref.\n",
-    "\n",
-    "4. **Compute**  \n",
-    "   \\[\n",
-    "     \\mu_{\\beta} = \\mathrm{mean}(idx\\_series), \n",
-    "     \\quad\n",
-    "     \\sigma_{\\beta} = \\mathrm{std}(idx\\_series),\n",
-    "     \\quad\n",
-    "     \\sigma_{\\text{ref}} = \\mathrm{std}(idx\\_ref).\n",
-    "   \\]\n",
-    "\n",
-    "5. **Margin-backing**  \n",
-    "   \\[\n",
-    "     W = \\sigma_{\\text{ref}} \\times \\mathrm{sd\\_of\\_vol\\_mult} \\times 1000.\n",
-    "   \\]\n",
-    "   If \\(W + Z > 1000\\), error. Else compute\n",
-    "   \\[\n",
-    "     \\text{internal\\_cash\\_leftover} = 1000 - W - Z.\n",
-    "   \\]\n",
-    "\n",
-    "6. **Build covariance matrix** \\(\\Sigma\\) for \\((r_{\\beta}, r_H, r_E, r_M)\\) using  \n",
-    "   \\(\\sigma_{\\beta} = \\sigma_{\\text{ref}},\\; \\sigma_H = \\frac{\\sigma_H^{(\\text{annual})}}{\\sqrt{12}},\\; \\sigma_E = \\frac{\\sigma_E^{(\\text{annual})}}{\\sqrt{12}},\\; \\sigma_M = \\frac{\\sigma_M^{(\\text{annual})}}{\\sqrt{12}},\\)  \n",
-    "   and correlations.\n",
-    "\n",
-    "7. **Monte Carlo draws**:  \n",
-    "   For each of \\(N_{\\text{SIMULATIONS}}\\) trials, simulate a \\(T=N_{\\text{MONTHS}}\\)-month path of \\(\\,(r_{\\beta,t},\\,r_{H,t},\\,r_{E,t},\\,r_{M,t})\\) and financing \\(f_t\\).\n",
-    "\n",
-    "8. **Compute monthly returns** for each bucket:\n",
-    "   - **Base**:  \n",
-    "     \\[\n",
-    "       R_{\\text{Base},t} \n",
-    "       = (r_{\\beta,t} - f_t)\\,w_{\\beta_H} \\;+\\; r_{H,t}\\,w_{\\alpha_H}.\n",
-    "     \\]\n",
-    "   - **External PA**:  \n",
-    "     \\[\n",
-    "       R_{\\text{ExtPA},t} \n",
-    "       = \\bigl(\\tfrac{X}{1000}\\bigr)(r_{\\beta,t} - f_t) \n",
-    "       \\;+\\; \\bigl(\\tfrac{X}{1000}\\,\\theta_{\\mathrm{ExtPA}}\\bigr)(r_{M,t}).\n",
-    "     \\]\n",
-    "   - **Active Extension**:  \n",
-    "     \\[\n",
-    "       R_{\\text{ActExt},t} \n",
-    "       = \\bigl(\\tfrac{Y}{1000}\\bigr)(r_{\\beta,t} - f_t) \n",
-    "       \\;+\\; \\bigl(\\tfrac{Y}{1000}\\,S\\bigr)(r_{E,t}).\n",
-    "     \\]\n",
-    "   - **Internal Beta**:  \n",
-    "     \\[\n",
-    "       R_{\\text{IntBet},t} \n",
-    "       = \\bigl(\\tfrac{W}{1000}\\bigr)(r_{\\beta,t} - f_t).\n",
-    "     \\]\n",
-    "   - **Internal PA α**:  \n",
-    "     \\[\n",
-    "       R_{\\text{IntPA},t} \n",
-    "       = \\bigl(\\tfrac{Z}{1000}\\bigr)(r_{H,t}).\n",
-    "     \\]\n",
-    "\n",
-    "   Note: We only report three portfolios—“Base,” “ExternalPA,” and “ActiveExt.” Each one compounds its own monthly returns for a 12-month horizon:\n",
-    "   \\[\n",
-    "     R_{\\text{bucket}}^{\\text{(year)}} \n",
-    "     = \\prod_{t=1}^{12} (1 + R_{\\text{bucket},t}) - 1.\n",
-    "   \\]\n",
-    "\n",
-    "9. **Compute performance metrics** for each portfolio’s annual returns:\n",
-    "   - **Ann Return** = sample mean.  \n",
-    "   - **Ann Vol** = sample standard deviation.  \n",
-    "   - **VaR 95%** = 5th percentile.  \n",
-    "   - **Tracking Error** = std of (bucket_return − index_return).  \n",
-    "   - **Breach Probability** = % of months (in the first sim path) where \\((r_{\\text{bucket},t} < -\\,\\mathrm{buffer\\_multiple}\\times\\sigma_{\\beta})\\).\n",
-    "\n",
-    "10. **Export**  \n",
-    "    - **Inputs sheet:** all parameters (dates, vol caps, bucket sizes, α fractions, active share, σ_ref, W, internal cash leftover, etc.).  \n",
-    "    - **Summary sheet:** metrics for “Base,” “ExternalPA,” and “ActiveExt.”  \n",
-    "    - **Raw returns sheets:** monthly paths for each bucket (first simulation) so users can inspect breach months.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 6. Input Parameters Summary\n",
-    "\n",
-    "Below is a consolidated list of every input variable that must appear in the “friendly” CSV:\n",
-    "\n",
-    "1. **Date ranges**  \n",
-    "   - `Start date` → `start_date` (analysis window begin).  \n",
-    "   - `End date` → `end_date` (analysis window end).  \n",
-    "   - `Reference start date` → `ref_start_date` (for σ_ref).  \n",
-    "   - `Reference end date` → `ref_end_date` (for σ_ref).  \n",
-    "\n",
-    "2. **Financing parameters**  \n",
-    "   - `Annual financing mean (%)` → `financing_mean_annual` (default = 0.50 %).  \n",
-    "   - `Annual financing vol (%)` → `financing_vol_annual` (default = 0.10 %).  \n",
-    "   - `Monthly spike probability` → `spike_prob` (default = 2 %).  \n",
-    "   - `Spike size (σ × multiplier)` → `spike_factor` (default = 2.25).  \n",
-    "\n",
-    "3. **In-House PA parameters**  \n",
-    "   - `In-House annual return (%)` → `mu_H` (default = 4.00 %).  \n",
-    "   - `In-House annual vol (%)` → `sigma_H` (default = 1.00 %).  \n",
-    "   - `In-House β` → `w_beta_H` (default = 0.50).  \n",
-    "   - `In-House α` → `w_alpha_H` (default = 0.50).  \n",
-    "\n",
-    "4. **Extension α parameters**  \n",
-    "   - `Alpha-Extension annual return (%)` → `mu_E` (default = 5.00 %).  \n",
-    "   - `Alpha-Extension annual vol (%)` → `sigma_E` (default = 2.00 %).  \n",
-    "   - `Active Extension capital (mm)` → `active_ext_capital` (default = 0).  \n",
-    "   - `Active share (%)` → `active_share_percent` (default = 50 % ⇒ a 150/50 program).  \n",
-    "\n",
-    "5. **External PA α parameters**  \n",
-    "   - `External annual return (%)` → `mu_M` (default = 3.00 %).  \n",
-    "   - `External annual vol (%)` → `sigma_M` (default = 2.00 %).  \n",
-    "   - `External PA capital (mm)` → `external_pa_capital` (default = 0).  \n",
-    "   - `External PA α fraction (%)` → `external_pa_alpha_frac` (default = 50 %).  \n",
-    "\n",
-    "6. **Correlations**  \n",
-    "   - `Corr index–In-House` → `rho_idx_H` (default = 0.05).  \n",
-    "   - `Corr index–Alpha-Extension` → `rho_idx_E` (default = 0.00).  \n",
-    "   - `Corr index–External` → `rho_idx_M` (default = 0.00).  \n",
-    "   - `Corr In-House–Alpha-Extension` → `rho_H_E` (default = 0.10).  \n",
-    "   - `Corr In-House–External` → `rho_H_M` (default = 0.10).  \n",
-    "   - `Corr Alpha-Extension–External` → `rho_E_M` (default = 0.00).  \n",
-    "\n",
-    "7. **Capital & risk backing**  \n",
-    "   - `Total fund capital (mm)` → `total_fund_capital` (default = 1000).  \n",
-    "   - `Standard deviation multiple` → `sd_of_vol_mult` (default = 3).  \n",
-    "   - `Internal PA capital (mm)` → `internal_pa_capital` (default = 0).  \n",
-    "   - `Buffer multiple` → `buffer_multiple` (default = 3).  \n",
-    "\n",
-    "8. **Legacy/Optional**  \n",
-    "   - `X grid (mm)` → `X_grid_list` (list of X values).  \n",
-    "   - `External manager α fractions` → `EM_thetas_list`.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 7. Output Considerations\n",
-    "\n",
-    "1. **Inputs sheet (Excel):**  \n",
-    "   List every single parameter, including:  \n",
-    "   - Date windows (analysis and reference),  \n",
-    "   - Financing parameters,  \n",
-    "   - α-stream parameters,  \n",
-    "   - Correlations,  \n",
-    "   - Capital buckets (X, Y, Z),  \n",
-    "   - SD multiple, margin backing \\(W\\), internal cash leftover,  \n",
-    "   - Active share, etc.\n",
-    "\n",
-    "2. **Summary sheet (Excel):**  \n",
-    "   For each portfolio (“Base,” “ExternalPA,” “ActiveExt”), show:  \n",
-    "   - Annual Return (%),  \n",
-    "   - Annual Volatility (%),  \n",
-    "   - 95 % VaR (%),  \n",
-    "   - Tracking Error (%),  \n",
-    "   - Breach Probability (%).\n",
-    "\n",
-    "3. **Raw returns sheets (Excel):**  \n",
-    "   Monthly paths for each bucket (first simulation), so users can inspect “breach” months where \\(R_{t} < -(\\text{buffer_multiple} × σ_{\\beta})\\).\n",
-    "\n",
-    "4. **Console output:**  \n",
-    "   A “human‐friendly” summary, e.g.:  \n",
-    "   > For “ExternalPA (X = 300, 50 % α)”:  \n",
-    "   > • Expected annual return: 10.2 %  \n",
-    "   > • Annual volatility: 12.3 %  \n",
-    "   > • 95 % VaR: −3.4 %  \n",
-    "   > • Tracking error: 8.7 %  \n",
-    "   > • Breach probability: 2.0 %.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 8. Intuition Behind Key Pieces\n",
-    "\n",
-    "1. **Why a separate reference period?**  \n",
-    "   - If you measure index volatility over the same window you analyze (e.g. 2015–2020), you capture “current regime” vol. Often, managers prefer a longer/different window (e.g. 2010–2014) to gauge typical funding volatility. That reference σₙ, times a multiple (e.g. 3×), tells you how much cash to set aside to back \\$ 1 b of index exposure.\n",
-    "\n",
-    "2. **Why Active share as a percentage?**  \n",
-    "   - A “150/50” program has 150 % long and 50 % short = net 100 %. Its “active share” is reported as 50 %.  \n",
-    "   - If you want “170/70,” then active share = 70 %.  \n",
-    "   - The code converts “Active share (%)” to decimal \\(S\\). For a 150/50 program, the default is 50 % (\\(S = 0.50\\)).\n",
-    "\n",
-    "3. **Why each bucket’s formula ensures no double-counting**  \n",
-    "   - Whenever you give \\$ X m to External PA, that manager holds the index exposure on your behalf. You do not hold margin for that portion. Similarly, the Active Extension manager holds their own index.  \n",
-    "   - On your books, you only need to hold margin for a single \\$ 1 b index. That is \\(W\\).  \n",
-    "   - Once you hand \\$ X m to external PA and \\$ Y m to active ext, **both managers** hold \\((X + Y)\\) of index on your behalf. So your margin \\(W\\) backs the *entire* \\$ 1 b, not just the “leftover” portion.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 9. Step-by-Step Implementation Checklist\n",
-    "\n",
-    "1. **Read and parse user parameters** (dates, vols, α fractions, active share, capital buckets, etc.).  \n",
-    "2. **Load index CSV** → `idx_full`.  \n",
-    "3. **Filter** → `idx_ref` for σ_ref; `idx_series` for μ_β and σ_β.  \n",
-    "4. **Compute**:  \n",
-    "   \\[\n",
-    "     μ_β = \\mathrm{mean}(idx\\_series), \n",
-    "     \\quad\n",
-    "     σ_β = \\mathrm{std}(idx\\_series), \n",
-    "     \\quad\n",
-    "     σ_{\\text{ref}} = \\mathrm{std}(idx\\_ref).\n",
-    "   \\]\n",
-    "5. **Margin-backing**:  \n",
-    "   \\[\n",
-    "     W = σ_{\\text{ref}} × (\\mathrm{sd\\_of\\_vol\\_mult}) × 1000.\n",
-    "   \\]\n",
-    "   Check \\(W + Z ≤ 1000\\). Compute leftover internal cash = \\(1000 - W - Z\\).\n",
-    "\n",
-    "6. **Build covariance matrix** using \\((σ_{\\text{ref}},\\,σ_H/√{12},\\,σ_E/√{12},\\,σ_M/√{12})\\) plus correlations.\n",
-    "\n",
-    "7. **Monte Carlo draws**:  \n",
-    "   For each of \\(N_{\\mathrm{SIM}}\\) trials, simulate a path of length \\(T = N_{\\mathrm{MONTHS}}\\) for \\((r_{\\beta,t},\\,r_{H,t},\\,r_{E,t},\\,r_{M,t})\\) and financing \\(f_t\\).\n",
-    "\n",
-    "8. **Compute monthly returns**:\n",
-    "   - **Base**:  \n",
-    "     \\[\n",
-    "       R_{\\text{Base},t} = (r_{\\beta,t} - f_t)\\,w_{\\beta_H} + r_{H,t}\\,w_{\\alpha_H}.\n",
-    "     \\]\n",
-    "   - **External PA**:  \n",
-    "     \\[\n",
-    "       R_{\\text{ExtPA},t}\n",
-    "       = \\Bigl(\\tfrac{X}{1000}\\Bigr)(r_{\\beta,t} - f_t)\n",
-    "       \\;+\\;\\Bigl(\\tfrac{X}{1000}\\,\\theta_{\\mathrm{ExtPA}}\\Bigr)(r_{M,t}).\n",
-    "     \\]\n",
-    "   - **Active Extension**:  \n",
-    "     \\[\n",
-    "       R_{\\text{ActExt},t}\n",
-    "       = \\Bigl(\\tfrac{Y}{1000}\\Bigr)(r_{\\beta,t} - f_t)\n",
-    "       \\;+\\;\\Bigl(\\tfrac{Y}{1000}\\,S\\Bigr)(r_{E,t}).\n",
-    "     \\]\n",
-    "   - **Internal Beta**:  \n",
-    "     \\[\n",
-    "       R_{\\text{IntBet},t} \n",
-    "       = \\Bigl(\\tfrac{W}{1000}\\Bigr)(r_{\\beta,t} - f_t).\n",
-    "     \\]\n",
-    "   - **Internal PA α**:  \n",
-    "     \\[\n",
-    "       R_{\\text{IntPA},t} \n",
-    "       = \\Bigl(\\tfrac{Z}{1000}\\Bigr)(r_{H,t}).\n",
-    "     \\]\n",
-    "\n",
-    "9. **Aggregate monthly → annual returns** for “Base,” “ExternalPA,” “ActiveExt.”  \n",
-    "10. **Compute metrics**:  \n",
-    "    - Ann Return, Ann Vol, VaR 95, Tracking Error, Breach Probability.  \n",
-    "11. **Export** Inputs, Summary, Raw returns to Excel + print narrative.\n",
-    "\n",
-    "---"
-   ]
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python (base)",
-   "language": "python",
-   "name": "base"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.12.2"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
diff --git a/.ipynb_checkpoints/Portable_Alpha_Visualizations-checkpoint.ipynb b/.ipynb_checkpoints/Portable_Alpha_Visualizations-checkpoint.ipynb
deleted file mode 100644
index 34cbc58d4e19d910703e18c928175895ddd3301f..0000000000000000000000000000000000000000
--- a/.ipynb_checkpoints/Portable_Alpha_Visualizations-checkpoint.ipynb
+++ /dev/null
@@ -1,2090 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "markdown",
-   "id": "094e50b2-1387-44d0-b1ca-c10c0db9289e",
-   "metadata": {},
-   "source": [
-    "**_🚨 IMPORTANT: BEFORE RUNNING THE PROGRAM, SAVE THIS SHEET AS A CSV FILE! 🚨_**\n",
-    "\n",
-    "import pandas as pd\n",
-    "\n",
-    "rows = [\n",
-    "    (\"Parameter\", \"Value\", \"Notes\"),  # Header row\n",
-    "    (\"Analysis mode\", \"\", \"Choose one: capital, returns, alpha_shares, vol_mult\"),\n",
-    "    # Capital mode\n",
-    "    (\"Max external combined (%)\", \"\", \"capital mode: max % for (External PA + Active Ext)\"),\n",
-    "    (\"External step size (%)\", \"\", \"capital mode: increment for external %\"),\n",
-    "    # Fixed capital (for returns / alpha_shares / vol_mult)\n",
-    "    (\"External PA capital (mm)\", \"\", \"returns/alpha_shares/vol_mult modes: allocation in mm\"),\n",
-    "    (\"Active Extension capital (mm)\", \"\", \"\"),\n",
-    "    (\"Internal PA capital (mm)\", \"\", \"\"),\n",
-    "    # Returns mode ranges (min/max/step)\n",
-    "    (\"In-House return min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"In-House return max (%)\", \"\", \"\"),\n",
-    "    (\"In-House return step (%)\", \"\", \"\"),\n",
-    "    (\"In-House vol min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"In-House vol max (%)\", \"\", \"\"),\n",
-    "    (\"In-House vol step (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension return min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"Alpha-Extension return max (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension return step (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension vol min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"Alpha-Extension vol max (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension vol step (%)\", \"\", \"\"),\n",
-    "    (\"External return min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"External return max (%)\", \"\", \"\"),\n",
-    "    (\"External return step (%)\", \"\", \"\"),\n",
-    "    (\"External vol min (%)\", \"\", \"returns mode\"),\n",
-    "    (\"External vol max (%)\", \"\", \"\"),\n",
-    "    (\"External vol step (%)\", \"\", \"\"),\n",
-    "    # Alpha_Shares mode ranges\n",
-    "    (\"External PA α fraction min (%)\", \"\", \"alpha_shares mode\"),\n",
-    "    (\"External PA α fraction max (%)\", \"\", \"\"),\n",
-    "    (\"External PA α fraction step (%)\", \"\", \"\"),\n",
-    "    (\"Active share min (%)\", \"\", \"alpha_shares mode\"),\n",
-    "    (\"Active share max (%)\", \"\", \"\"),\n",
-    "    (\"Active share step (%)\", \"\", \"\"),\n",
-    "    # Vol_Mult mode ranges\n",
-    "    (\"SD multiple min\", \"\", \"vol_mult mode\"),\n",
-    "    (\"SD multiple max\", \"\", \"\"),\n",
-    "    (\"SD multiple step\", \"\", \"\"),\n",
-    "    # Financing & overrides\n",
-    "    (\"Annual financing mean (%)\", \"\", \"global financing\"),\n",
-    "    (\"Annual financing vol (%)\", \"\", \"\"),\n",
-    "    (\"Monthly spike probability\", \"\", \"\"),\n",
-    "    (\"Spike size (σ × multiplier)\", \"\", \"\"),\n",
-    "    (\"Internal financing mean (%)\", \"\", \"internal override\"),\n",
-    "    (\"Internal financing vol (%)\", \"\", \"\"),\n",
-    "    (\"Internal monthly spike probability\", \"\", \"\"),\n",
-    "    (\"Internal spike size (σ × multiplier)\", \"\", \"\"),\n",
-    "    (\"External PA financing mean (%)\", \"\", \"ext PA override\"),\n",
-    "    (\"External PA financing vol (%)\", \"\", \"\"),\n",
-    "    (\"External PA monthly spike probability\", \"\", \"\"),\n",
-    "    (\"External PA spike size (σ × multiplier)\", \"\", \"\"),\n",
-    "    (\"Active Extension financing mean (%)\", \"\", \"active ext override\"),\n",
-    "    (\"Active Extension financing vol (%)\", \"\", \"\"),\n",
-    "    (\"Active Extension monthly spike probability\", \"\", \"\"),\n",
-    "    (\"Active Extension spike size (σ × multiplier)\", \"\", \"\"),\n",
-    "    # Alpha stream fallbacks\n",
-    "    (\"In-House annual return (%)\", \"\", \"fallback if no range\"),\n",
-    "    (\"In-House annual vol (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension annual return (%)\", \"\", \"\"),\n",
-    "    (\"Alpha-Extension annual vol (%)\", \"\", \"\"),\n",
-    "    (\"External annual return (%)\", \"\", \"\"),\n",
-    "    (\"External annual vol (%)\", \"\", \"\"),\n",
-    "    # Correlations\n",
-    "    (\"Corr index–In-House\", \"\", \"\"),\n",
-    "    (\"Corr index–Alpha-Extension\", \"\", \"\"),\n",
-    "    (\"Corr index–External\", \"\", \"\"),\n",
-    "    (\"Corr In-House–Alpha-Extension\", \"\", \"\"),\n",
-    "    (\"Corr In-House–External\", \"\", \"\"),\n",
-    "    (\"Corr Alpha-Extension–External\", \"\", \"\"),\n",
-    "    # Buffer multiple & total capital\n",
-    "    (\"Buffer multiple\", \"\", \"cash‐buffer multiple\"),\n",
-    "    (\"Total fund capital (mm)\", \"\", \"total fund size in mm\")\n",
-    "]\n",
-    "\n",
-    "# Build DataFrame and save\n",
-    "df_template = pd.DataFrame(rows, columns=[\"Parameter\", \"Value\", \"Notes\"])\n",
-    "file_path = \"/mnt/data/parameters_template.xlsx\"\n",
-    "df_template.to_excel(file_path, index=False)\n",
-    "print(f\"Created template: {file_path}\")\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 1,
-   "id": "d761e9b0-f4cd-4591-896c-cafb9ba79b96",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# portable_alpha_model.py\n",
-    "\n",
-    "import sys\n",
-    "import csv\n",
-    "import numpy as np\n",
-    "import pandas as pd\n",
-    "from pathlib import Path\n",
-    "import tkinter as tk\n",
-    "from tkinter import filedialog\n",
-    "import openpyxl\n",
-    "import matplotlib.pyplot as plt\n",
-    "from mpl_toolkits.mplot3d import Axes3D  # noqa: F401\n",
-    "import openpyxl\n",
-    "\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 1. MAPPING: User-friendly labels → Internal variable names\n",
-    "# =============================================================================\n",
-    "\n",
-    "LABEL_MAP = {\n",
-    "    \"Analysis mode\":                           \"analysis_mode\",\n",
-    "    # Capital mode inputs\n",
-    "    \"Max external combined (%)\":               \"max_external_combined_percent\",\n",
-    "    \"External step size (%)\":                  \"external_step_size_percent\",\n",
-    "    # Fixed-capital (for non-capital modes)\n",
-    "    \"External PA capital (mm)\":                \"external_pa_capital\",\n",
-    "    \"Active Extension capital (mm)\":           \"active_ext_capital\",\n",
-    "    \"Internal PA capital (mm)\":                \"internal_pa_capital\",\n",
-    "    # Returns mode ranges\n",
-    "    \"In-House return min (%)\":                 \"mu_H_min\",\n",
-    "    \"In-House return max (%)\":                 \"mu_H_max\",\n",
-    "    \"In-House return step (%)\":                \"mu_H_step\",\n",
-    "    \"In-House vol min (%)\":                    \"sigma_H_min\",\n",
-    "    \"In-House vol max (%)\":                    \"sigma_H_max\",\n",
-    "    \"In-House vol step (%)\":                   \"sigma_H_step\",\n",
-    "    \"Alpha-Extension return min (%)\":          \"mu_E_min\",\n",
-    "    \"Alpha-Extension return max (%)\":          \"mu_E_max\",\n",
-    "    \"Alpha-Extension return step (%)\":         \"mu_E_step\",\n",
-    "    \"Alpha-Extension vol min (%)\":             \"sigma_E_min\",\n",
-    "    \"Alpha-Extension vol max (%)\":             \"sigma_E_max\",\n",
-    "    \"Alpha-Extension vol step (%)\":            \"sigma_E_step\",\n",
-    "    \"External return min (%)\":                 \"mu_M_min\",\n",
-    "    \"External return max (%)\":                 \"mu_M_max\",\n",
-    "    \"External return step (%)\":                \"mu_M_step\",\n",
-    "    \"External vol min (%)\":                    \"sigma_M_min\",\n",
-    "    \"External vol max (%)\":                    \"sigma_M_max\",\n",
-    "    \"External vol step (%)\":                   \"sigma_M_step\",\n",
-    "    # Alpha_Shares mode ranges\n",
-    "    \"External PA α fraction min (%)\":          \"external_pa_alpha_frac_min\",\n",
-    "    \"External PA α fraction max (%)\":          \"external_pa_alpha_frac_max\",\n",
-    "    \"External PA α fraction step (%)\":         \"external_pa_alpha_frac_step\",\n",
-    "    \"Active share min (%)\":                    \"active_share_min\",\n",
-    "    \"Active share max (%)\":                    \"active_share_max\",\n",
-    "    \"Active share step (%)\":                   \"active_share_step\",\n",
-    "    # Vol_Mult mode range\n",
-    "    \"SD multiple min\":                         \"sd_of_vol_mult_min\",\n",
-    "    \"SD multiple max\":                         \"sd_of_vol_mult_max\",\n",
-    "    \"SD multiple step\":                        \"sd_of_vol_mult_step\",\n",
-    "    # Financing & bucket overrides\n",
-    "    \"Annual financing mean (%)\":               \"financing_mean_annual\",\n",
-    "    \"Annual financing vol (%)\":                \"financing_vol_annual\",\n",
-    "    \"Monthly spike probability\":               \"spike_prob\",\n",
-    "    \"Spike size (σ × multiplier)\":             \"spike_factor\",\n",
-    "    \"Internal financing mean (%)\":             \"internal_financing_mean_annual\",\n",
-    "    \"Internal financing vol (%)\":              \"internal_financing_vol_annual\",\n",
-    "    \"Internal monthly spike probability\":      \"internal_spike_prob\",\n",
-    "    \"Internal spike size (σ × multiplier)\":    \"internal_spike_factor\",\n",
-    "    \"External PA financing mean (%)\":          \"ext_pa_financing_mean_annual\",\n",
-    "    \"External PA financing vol (%)\":           \"ext_pa_financing_vol_annual\",\n",
-    "    \"External PA monthly spike probability\":   \"ext_pa_spike_prob\",\n",
-    "    \"External PA spike size (σ × multiplier)\": \"ext_pa_spike_factor\",\n",
-    "    \"Active Extension financing mean (%)\":     \"act_ext_financing_mean_annual\",\n",
-    "    \"Active Extension financing vol (%)\":      \"act_ext_financing_vol_annual\",\n",
-    "    \"Active Extension monthly spike probability\":\"act_ext_spike_prob\",\n",
-    "    \"Active Extension spike size (σ × multiplier)\":\"act_ext_spike_factor\",\n",
-    "    # Fallback alpha stream defaults\n",
-    "    \"In-House annual return (%)\":              \"mu_H\",\n",
-    "    \"In-House annual vol (%)\":                 \"sigma_H\",\n",
-    "    \"Alpha-Extension annual return (%)\":       \"mu_E\",\n",
-    "    \"Alpha-Extension annual vol (%)\":          \"sigma_E\",\n",
-    "    \"External annual return (%)\":              \"mu_M\",\n",
-    "    \"External annual vol (%)\":                 \"sigma_M\",\n",
-    "    # Correlations\n",
-    "    \"Corr index–In-House\":                     \"rho_idx_H\",\n",
-    "    \"Corr index–Alpha-Extension\":              \"rho_idx_E\",\n",
-    "    \"Corr index–External\":                     \"rho_idx_M\",\n",
-    "    \"Corr In-House–Alpha-Extension\":           \"rho_H_E\",\n",
-    "    \"Corr In-House–External\":                  \"rho_H_M\",\n",
-    "    \"Corr Alpha-Extension–External\":            \"rho_E_M\",\n",
-    "    # Other risk controls\n",
-    "    \"Buffer multiple\":                         \"buffer_multiple\",\n",
-    "    \"Total fund capital (mm)\":                 \"total_fund_capital\",\n",
-    "    # Visualization toggles\n",
-    "    \"Plot heatmap\":                            \"plot_heatmap\",\n",
-    "    \"Plot line\":                               \"plot_line\",\n",
-    "    \"Plot boxplot\":                            \"plot_boxplot\",\n",
-    "    \"Plot scatter\":                            \"plot_scatter\",\n",
-    "    \"Plot time series\":                        \"plot_time_series\",\n",
-    "    \"Plot histogram\":                          \"plot_histogram\",\n",
-    "    \"Plot surface\":                            \"plot_surface\",\n",
-    "}"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 2,
-   "id": "97eb2b0f-f62a-4164-baff-cd1dbc0872d1",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# =============================================================================\n",
-    "# 2. FILE‐PICKER FOR CSV SELECTION\n",
-    "# =============================================================================\n",
-    "\n",
-    "def select_csv_file():\n",
-    "    \"\"\"\n",
-    "    Pop up a file‐picker dialog so the user can choose a CSV file.\n",
-    "    Returns a pathlib.Path to the selected file.\n",
-    "    Raises FileNotFoundError if the user cancels.\n",
-    "    \"\"\"\n",
-    "    root = tk.Tk()\n",
-    "    root.withdraw()\n",
-    "    file_path = filedialog.askopenfilename(\n",
-    "        title=\"Select CSV File\",\n",
-    "        filetypes=[(\"CSV files\", \"*.csv\"), (\"All files\", \"*.*\")]\n",
-    "    )\n",
-    "    root.destroy()\n",
-    "    if not file_path:\n",
-    "        raise FileNotFoundError(\"No file selected.\")\n",
-    "    return Path(file_path)\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 3. LOAD PARAMETERS USING MAPPING\n",
-    "# =============================================================================\n",
-    "\n",
-    "def load_parameters(csv_filepath, label_map):\n",
-    "    \"\"\"\n",
-    "    Read a CSV that may have leading instruction rows, then a header row \"Parameter,Value\".\n",
-    "    Skip all rows until the header, then parse friendly labels → internal names via label_map.\n",
-    "    Returns a dict {internal_var_name: parsed_value}.\n",
-    "    \"\"\"\n",
-    "    params = {}\n",
-    "    lines = Path(csv_filepath).read_text(encoding=\"utf-8\").splitlines()\n",
-    "    header_idx = None\n",
-    "    for i, line in enumerate(lines):\n",
-    "        if line.strip().startswith(\"Parameter,\"):\n",
-    "            header_idx = i\n",
-    "            break\n",
-    "\n",
-    "    if header_idx is None:\n",
-    "        raise ValueError(f\"No header row starting with 'Parameter,' found in {csv_filepath}\")\n",
-    "\n",
-    "    header_and_data = lines[header_idx:]\n",
-    "    reader = csv.DictReader(header_and_data)\n",
-    "\n",
-    "    for row in reader:\n",
-    "        friendly_key = row.get(\"Parameter\", \"\").strip()\n",
-    "        if not friendly_key or friendly_key not in label_map:\n",
-    "            continue\n",
-    "\n",
-    "        internal_key = label_map[friendly_key]\n",
-    "        raw_val = row.get(\"Value\", \"\").strip()\n",
-    "\n",
-    "        # If semicolon is present, parse as a list (legacy fallback)\n",
-    "        if \";\" in raw_val:\n",
-    "            parts = [p.strip() for p in raw_val.split(\";\") if p.strip() != \"\"]\n",
-    "            parsed_list = []\n",
-    "            for p in parts:\n",
-    "                try:\n",
-    "                    if \".\" in p:\n",
-    "                        parsed_list.append(float(p))\n",
-    "                    else:\n",
-    "                        parsed_list.append(int(p))\n",
-    "                except ValueError:\n",
-    "                    parsed_list.append(p)\n",
-    "            params[internal_key] = parsed_list\n",
-    "        else:\n",
-    "            # Try int → float → string\n",
-    "            try:\n",
-    "                params[internal_key] = int(raw_val)\n",
-    "            except ValueError:\n",
-    "                try:\n",
-    "                    params[internal_key] = float(raw_val)\n",
-    "                except ValueError:\n",
-    "                    # Could be blank string; store as-is\n",
-    "                    params[internal_key] = raw_val\n",
-    "\n",
-    "    return params\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 4. UTILITY: “SAFE GET” FOR NUMERIC PARAMETERS\n",
-    "# =============================================================================\n",
-    "\n",
-    "def get_num(raw_params, key, default):\n",
-    "    \"\"\"\n",
-    "    Return raw_params[key] if it's already int or float; otherwise default.\n",
-    "    \"\"\"\n",
-    "    v = raw_params.get(key, None)\n",
-    "    if isinstance(v, (int, float)):\n",
-    "        return v\n",
-    "    return default"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "id": "d094bd11-1e45-4870-92ff-6a9b3bb9b2fd",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# =============================================================================\n",
-    "# 5. HELPER FUNCTIONS TO BUILD RANGES OR FALLBACK TO MIDPOINT\n",
-    "# =============================================================================\n",
-    "\n",
-    "def build_range(key_base, default_midpoint):\n",
-    "    \"\"\"\n",
-    "    If raw_params contains key_base_min & key_base_max (and optionally key_base_step),\n",
-    "    return a list of decimals from min→max (in steps).\n",
-    "    Otherwise, if key_base_list exists (legacy semicolon list), return that.\n",
-    "    Else, return [default_midpoint].\n",
-    "    We divide by 100 because these are “percent” inputs.\n",
-    "    \"\"\"\n",
-    "    k_min  = get_num(raw_params, f\"{key_base}_min\", None)\n",
-    "    k_max  = get_num(raw_params, f\"{key_base}_max\", None)\n",
-    "    k_step = get_num(raw_params, f\"{key_base}_step\", None)\n",
-    "\n",
-    "    if (k_min is not None) and (k_max is not None):\n",
-    "        step = k_step if (k_step is not None) else (k_max - k_min)\n",
-    "        if step <= 0:\n",
-    "            raise RuntimeError(f\"Step for '{key_base}' must be positive.\")\n",
-    "        start = k_min / 100.0\n",
-    "        stop  = k_max / 100.0\n",
-    "        stepd = step / 100.0\n",
-    "        arr = np.arange(start, stop + 1e-9, stepd)\n",
-    "        return list(arr)\n",
-    "\n",
-    "    # Legacy semicolon‐list fallback\n",
-    "    flat_list = raw_params.get(f\"{key_base}_list\", None)\n",
-    "    if isinstance(flat_list, list):\n",
-    "        return flat_list\n",
-    "\n",
-    "    return [default_midpoint]\n",
-    "\n",
-    "def build_range_int(key_base, default_midpoint):\n",
-    "    \"\"\"\n",
-    "    Like build_range but for integer inputs (e.g. SD multiple).\n",
-    "    If key_base_min & key_base_max exist, return list(range(min, max+1, step)).\n",
-    "    Else if key_base_list exists, return it. Else [default_midpoint].\n",
-    "    \"\"\"\n",
-    "    k_min  = get_num(raw_params, f\"{key_base}_min\", None)\n",
-    "    k_max  = get_num(raw_params, f\"{key_base}_max\", None)\n",
-    "    k_step = get_num(raw_params, f\"{key_base}_step\", None)\n",
-    "\n",
-    "    if (k_min is not None) and (k_max is not None):\n",
-    "        step = k_step if (k_step is not None) else (k_max - k_min)\n",
-    "        if step <= 0:\n",
-    "            raise RuntimeError(f\"Step for '{key_base}' must be positive.\")\n",
-    "        return list(range(k_min, k_max + 1, step))\n",
-    "\n",
-    "    flat_list = raw_params.get(f\"{key_base}_list\", None)\n",
-    "    if isinstance(flat_list, list):\n",
-    "        return flat_list\n",
-    "\n",
-    "    return [default_midpoint]\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 6. HELPER TO LOAD INDEX RETURNS\n",
-    "# =============================================================================\n",
-    "\n",
-    "def load_index_returns(csv_path):\n",
-    "    \"\"\"\n",
-    "    Load a CSV of monthly index returns into a pandas Series.\n",
-    "    Expects columns: \"Date\" and either \"Monthly_TR\" or \"Return\".\n",
-    "    Returns a pd.Series indexed by Date (datetime).\n",
-    "    \"\"\"\n",
-    "    csv_path = Path(csv_path)\n",
-    "    if not csv_path.exists() or not csv_path.is_file():\n",
-    "        raise FileNotFoundError(f\"Index CSV not found at {csv_path}\")\n",
-    "    df = pd.read_csv(csv_path, parse_dates=[\"Date\"])\n",
-    "    if \"Date\" not in df.columns:\n",
-    "        raise ValueError(f\"'Date' column is missing from {csv_path}\")\n",
-    "    if \"Monthly_TR\" in df.columns:\n",
-    "        col = \"Monthly_TR\"\n",
-    "    elif \"Return\" in df.columns:\n",
-    "        col = \"Return\"\n",
-    "    else:\n",
-    "        raise ValueError(f\"CSV must contain 'Monthly_TR' or 'Return'; found: {df.columns.tolist()}\")\n",
-    "\n",
-    "    df = df.sort_values(\"Date\").reset_index(drop=True)\n",
-    "    df.set_index(\"Date\", inplace=True)\n",
-    "    series = df[col].dropna().copy()\n",
-    "    series.index = pd.to_datetime(series.index)\n",
-    "    return series\n",
-    "\n",
-    "# =============================================================================\n",
-    "# 7. SIMULATION + UTILITY FUNCTIONS\n",
-    "# =============================================================================\n",
-    "\n",
-    "def simulate_financing(T, financing_mean, financing_sigma, spike_prob, spike_factor):\n",
-    "    \"\"\"\n",
-    "    Simulate a series of financing spreads f_t for T months,\n",
-    "    using a Normal + occasional jump model.\n",
-    "    \"\"\"\n",
-    "    f = np.zeros(T)\n",
-    "    for t in range(T):\n",
-    "        base = financing_mean + np.random.normal(0, financing_sigma)\n",
-    "        jump = 0.0\n",
-    "        if np.random.rand() < spike_prob:\n",
-    "            jump = spike_factor * financing_sigma\n",
-    "        f[t] = max(base + jump, 0.0)\n",
-    "    return f\n",
-    "\n",
-    "def build_cov_matrix(rho_idx_H, rho_idx_E, rho_idx_M,\n",
-    "                     rho_H_E, rho_H_M, rho_E_M,\n",
-    "                     idx_sigma, sigma_H, sigma_E, sigma_M):\n",
-    "    \"\"\"\n",
-    "    Build the 4×4 covariance matrix for (Index, H, E, M).\n",
-    "    \"\"\"\n",
-    "    sds = np.array([idx_sigma, sigma_H, sigma_E, sigma_M])\n",
-    "    rho = np.array([\n",
-    "        [1.0,       rho_idx_H, rho_idx_E, rho_idx_M],\n",
-    "        [rho_idx_H, 1.0,       rho_H_E,   rho_H_M],\n",
-    "        [rho_idx_E, rho_H_E,   1.0,       rho_E_M],\n",
-    "        [rho_idx_M, rho_H_M,   rho_E_M,   1.0    ]\n",
-    "    ])\n",
-    "    return np.outer(sds, sds) * rho\n",
-    "\n",
-    "def simulate_alpha_streams(T, cov, mu_idx, mu_H, mu_E, mu_M):\n",
-    "    \"\"\"\n",
-    "    Simulate T joint observations of (Index_return, H, E, M)\n",
-    "    from a multivariate Normal with given means and covariance.\n",
-    "    Returns shape (T, 4).\n",
-    "    \"\"\"\n",
-    "    means = np.array([mu_idx, mu_H, mu_E, mu_M])\n",
-    "    return np.random.multivariate_normal(means, cov, size=T)\n",
-    "\n",
-    "def export_to_excel(inputs_dict, summary_df, raw_returns_dict, filename=\"Outputs.xlsx\"):\n",
-    "    \"\"\"\n",
-    "    Write inputs, summary, and raw returns into an Excel workbook.\n",
-    "    \"\"\"\n",
-    "    with pd.ExcelWriter(filename, engine=\"openpyxl\") as writer:\n",
-    "        # 1) Inputs sheet\n",
-    "        df_inputs = pd.DataFrame.from_dict(inputs_dict, orient=\"index\", columns=[\"Value\"])\n",
-    "        df_inputs.index.name = \"Parameter\"\n",
-    "        df_inputs.reset_index(inplace=True)\n",
-    "        df_inputs.to_excel(writer, sheet_name=\"Inputs\", index=False)\n",
-    "\n",
-    "        # 2) Summary sheet\n",
-    "        summary_df.to_excel(writer, sheet_name=\"Summary\", index=False)\n",
-    "\n",
-    "        # 3) Raw Returns sheets\n",
-    "        for sheet_name, df in raw_returns_dict.items():\n",
-    "            safe_name = sheet_name if len(sheet_name) <= 31 else sheet_name[:31]\n",
-    "            df.to_excel(writer, sheet_name=safe_name, index=True)\n",
-    "\n",
-    "    print(f\"Exported results to {filename}\")\n",
-    "\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "id": "31baeb9e-27d9-440e-89d0-a0defac70c65",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "2025-06-11 05:31:40.041 python[51612:4056983] The class 'NSOpenPanel' overrides the method identifier.  This method is implemented by class 'NSWindow'\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Parameters CSV selected: /Users/teacher/Library/CloudStorage/Dropbox/Learning/Code/Portable Alpha-Extension Model/parameters.csv\n",
-      "Please select the INDEX CSV (monthly total returns).\n",
-      "Index CSV selected: /Users/teacher/Library/CloudStorage/Dropbox/Learning/Code/Portable Alpha-Extension Model/sp500tr_fred_divyield.csv\n",
-      "Loaded 663 months from the raw index CSV.\n",
-      "Using idx_series from 1970-01-01 to 2025-03-01 (n=663)\n",
-      "Analysis-window: μ_idx = 0.0096, σ_idx = 0.0458\n"
-     ]
-    }
-   ],
-   "source": [
-    "# =============================================================================\n",
-    "# 8. MAIN EXECUTION\n",
-    "# =============================================================================\n",
-    "\n",
-    "if __name__ == \"__main__\":\n",
-    "    # 8.1) Prompt user to select the parameters CSV\n",
-    "    try:\n",
-    "        params_csv_path = select_csv_file()\n",
-    "        print(f\"Parameters CSV selected: {params_csv_path}\")\n",
-    "    except FileNotFoundError:\n",
-    "        raise RuntimeError(\"No parameter CSV selected; exiting.\")\n",
-    "\n",
-    "    # 8.2) Load raw parameters\n",
-    "    raw_params = load_parameters(params_csv_path, LABEL_MAP)\n",
-    "\n",
-    "    # 8.3) “Safe get” for numeric scalars and defaults\n",
-    "    total_fund_capital = get_num(raw_params, \"total_fund_capital\", 1000)\n",
-    "\n",
-    "    financing_mean_annual = get_num(raw_params, \"financing_mean_annual\", 0.005)\n",
-    "    financing_vol_annual  = get_num(raw_params, \"financing_vol_annual\", 0.001)\n",
-    "    spike_prob            = get_num(raw_params, \"spike_prob\", 0.02)\n",
-    "    spike_factor          = get_num(raw_params, \"spike_factor\", 2.25)\n",
-    "\n",
-    "    internal_financing_mean_annual = get_num(raw_params, \"internal_financing_mean_annual\", financing_mean_annual)\n",
-    "    internal_financing_vol_annual  = get_num(raw_params, \"internal_financing_vol_annual\",  financing_vol_annual)\n",
-    "    internal_spike_prob            = get_num(raw_params, \"internal_spike_prob\",            spike_prob)\n",
-    "    internal_spike_factor          = get_num(raw_params, \"internal_spike_factor\",          spike_factor)\n",
-    "\n",
-    "    ext_pa_financing_mean_annual = get_num(raw_params, \"ext_pa_financing_mean_annual\", financing_mean_annual)\n",
-    "    ext_pa_financing_vol_annual  = get_num(raw_params, \"ext_pa_financing_vol_annual\",  financing_vol_annual)\n",
-    "    ext_pa_spike_prob            = get_num(raw_params, \"ext_pa_spike_prob\",            spike_prob)\n",
-    "    ext_pa_spike_factor          = get_num(raw_params, \"ext_pa_spike_factor\",          spike_factor)\n",
-    "\n",
-    "    act_ext_financing_mean_annual = get_num(raw_params, \"act_ext_financing_mean_annual\", financing_mean_annual)\n",
-    "    act_ext_financing_vol_annual  = get_num(raw_params, \"act_ext_financing_vol_annual\",  financing_vol_annual)\n",
-    "    act_ext_spike_prob            = get_num(raw_params, \"act_ext_spike_prob\",            spike_prob)\n",
-    "    act_ext_spike_factor          = get_num(raw_params, \"act_ext_spike_factor\",          spike_factor)\n",
-    "\n",
-    "    mu_H    = get_num(raw_params, \"mu_H\",    0.04)\n",
-    "    sigma_H = get_num(raw_params, \"sigma_H\", 0.01)\n",
-    "    mu_E    = get_num(raw_params, \"mu_E\",    0.05)\n",
-    "    sigma_E = get_num(raw_params, \"sigma_E\", 0.02)\n",
-    "    mu_M    = get_num(raw_params, \"mu_M\",    0.03)\n",
-    "    sigma_M = get_num(raw_params, \"sigma_M\", 0.02)\n",
-    "\n",
-    "    rho_idx_H = get_num(raw_params, \"rho_idx_H\", 0.05)\n",
-    "    rho_idx_E = get_num(raw_params, \"rho_idx_E\", 0.00)\n",
-    "    rho_idx_M = get_num(raw_params, \"rho_idx_M\", 0.00)\n",
-    "    rho_H_E   = get_num(raw_params, \"rho_H_E\",   0.10)\n",
-    "    rho_H_M   = get_num(raw_params, \"rho_H_M\",   0.10)\n",
-    "    rho_E_M   = get_num(raw_params, \"rho_E_M\",   0.00)\n",
-    "\n",
-    "    buffer_multiple = get_num(raw_params, \"buffer_multiple\", 3.0)\n",
-    "\n",
-    "    default_mu_H    = mu_H / 12\n",
-    "    default_sigma_H = sigma_H / 12\n",
-    "    default_mu_E    = mu_E / 12\n",
-    "    default_sigma_E = sigma_E / 12\n",
-    "    default_mu_M    = mu_M / 12\n",
-    "    default_sigma_M = sigma_M / 12\n",
-    "\n",
-    "    default_ext_alpha_frac = get_num(raw_params, \"external_pa_alpha_frac\", 50) / 100.0\n",
-    "    default_act_share      = get_num(raw_params, \"active_share\",            50) / 100.0\n",
-    "\n",
-    "    default_sd_mult = get_num(raw_params, \"sd_of_vol_mult\", 3)\n",
-    "\n",
-    "    financing_mean  = financing_mean_annual / 12\n",
-    "    financing_sigma = financing_vol_annual / 12\n",
-    "\n",
-    "    # 8.4) Extract visualization flags (each “Plot X” row)\n",
-    "    plot_heatmap_flag     = bool(str(raw_params.get(\"plot_heatmap\", \"\")).strip())\n",
-    "    plot_line_flag        = bool(str(raw_params.get(\"plot_line\", \"\")).strip())\n",
-    "    plot_boxplot_flag     = bool(str(raw_params.get(\"plot_boxplot\", \"\")).strip())\n",
-    "    plot_scatter_flag     = bool(str(raw_params.get(\"plot_scatter\", \"\")).strip())\n",
-    "    plot_time_series_flag = bool(str(raw_params.get(\"plot_time_series\", \"\")).strip())\n",
-    "    plot_histogram_flag   = bool(str(raw_params.get(\"plot_histogram\", \"\")).strip())\n",
-    "    plot_surface_flag     = bool(str(raw_params.get(\"plot_surface\", \"\")).strip())\n",
-    "\n",
-    "    # 8.5) Determine analysis_mode\n",
-    "    analysis_mode = str(raw_params.get(\"analysis_mode\", \"\")).strip().lower()\n",
-    "    valid_modes = {\"capital\", \"returns\", \"alpha_shares\", \"vol_mult\"}\n",
-    "    if analysis_mode not in valid_modes:\n",
-    "        raise RuntimeError(f\"Analysis mode must be one of {valid_modes}, but got '{analysis_mode}'\")\n",
-    "\n",
-    "    # 8.6) Prompt user to select the INDEX CSV\n",
-    "    print(\"Please select the INDEX CSV (monthly total returns).\")\n",
-    "    try:\n",
-    "        INDEX_CSV_PATH = select_csv_file()\n",
-    "        print(f\"Index CSV selected: {INDEX_CSV_PATH}\")\n",
-    "    except FileNotFoundError:\n",
-    "        raise RuntimeError(\"Index CSV was not selected; exiting.\")\n",
-    "\n",
-    "    # 8.7) Load idx_series and compute reference stats\n",
-    "    try:\n",
-    "        idx_series = load_index_returns(INDEX_CSV_PATH)\n",
-    "        print(f\"Loaded {len(idx_series)} months from the raw index CSV.\")\n",
-    "    except Exception as e:\n",
-    "        raise RuntimeError(f\"Failed to load index returns: {e}\")\n",
-    "\n",
-    "    mu_idx   = idx_series.mean()\n",
-    "    idx_sigma = idx_series.std(ddof=1)\n",
-    "    print(f\"Using idx_series from {idx_series.index.min().date()} to {idx_series.index.max().date()} (n={len(idx_series)})\")\n",
-    "    print(f\"Analysis-window: μ_idx = {mu_idx:.4f}, σ_idx = {idx_sigma:.4f}\")\n",
-    "\n",
-    "    # 8.8) Convert bucket financing overrides to monthly decimals\n",
-    "    internal_financing_mean  = internal_financing_mean_annual / 12\n",
-    "    internal_financing_sigma = internal_financing_vol_annual / 12\n",
-    "\n",
-    "    ext_pa_financing_mean  = ext_pa_financing_mean_annual / 12\n",
-    "    ext_pa_financing_sigma = ext_pa_financing_vol_annual / 12\n",
-    "\n",
-    "    act_ext_financing_mean  = act_ext_financing_mean_annual / 12\n",
-    "    act_ext_financing_sigma = act_ext_financing_vol_annual / 12\n",
-    "\n",
-    "    # -------------------------------------------------------------------\n",
-    "    # 8.9) Branch on analysis_mode\n",
-    "    # -------------------------------------------------------------------\n",
-    "\n",
-    "    if analysis_mode == \"capital\":\n",
-    "        # --------------------------------------\n",
-    "        # 8.9.a) Capital mode: Sweep ext_pct→act_pct\n",
-    "        # --------------------------------------\n",
-    "        max_ext_pct  = get_num(raw_params, \"max_external_combined_percent\", 50) / 100.0\n",
-    "        ext_step_pct = get_num(raw_params, \"external_step_size_percent\",   1) / 100.0\n",
-    "\n",
-    "        # Other “sweepable” params collapse to midpoint\n",
-    "        mu_H_list    = [default_mu_H]\n",
-    "        sigma_H_list = [default_sigma_H]\n",
-    "        mu_E_list    = [default_mu_E]\n",
-    "        sigma_E_list = [default_sigma_E]\n",
-    "        mu_M_list    = [default_mu_M]\n",
-    "        sigma_M_list = [default_sigma_M]\n",
-    "\n",
-    "        ext_alpha_list = [default_ext_alpha_frac]\n",
-    "        act_share_list = [default_act_share]\n",
-    "        sd_list        = [default_sd_mult]\n",
-    "\n",
-    "        all_summaries = []\n",
-    "        all_raw_returns = {}\n",
-    "\n",
-    "        ext_range = np.arange(0.0, max_ext_pct + 1e-9, ext_step_pct)\n",
-    "        for ext_pct in ext_range:\n",
-    "            act_range = np.arange(0.0, ext_pct + 1e-9, ext_step_pct)\n",
-    "            for act_pct in act_range:\n",
-    "                E_pct = ext_pct - act_pct\n",
-    "                A_pct = act_pct\n",
-    "                Z_frac = 1.0 - ext_pct\n",
-    "                E_mm = E_pct * total_fund_capital\n",
-    "                A_mm = A_pct * total_fund_capital\n",
-    "                Z_mm = Z_frac * total_fund_capital\n",
-    "\n",
-    "                # 1-year financing paths\n",
-    "                f_internal = simulate_financing(\n",
-    "                    12,\n",
-    "                    internal_financing_mean, internal_financing_sigma,\n",
-    "                    internal_spike_prob, internal_spike_factor\n",
-    "                )\n",
-    "                f_ext_pa = simulate_financing(\n",
-    "                    12,\n",
-    "                    ext_pa_financing_mean, ext_pa_financing_sigma,\n",
-    "                    ext_pa_spike_prob, ext_pa_spike_factor\n",
-    "                )\n",
-    "                f_act_ext = simulate_financing(\n",
-    "                    12,\n",
-    "                    act_ext_financing_mean, act_ext_financing_sigma,\n",
-    "                    act_ext_spike_prob, act_ext_spike_factor\n",
-    "                )\n",
-    "\n",
-    "                cov_mat = build_cov_matrix(\n",
-    "                    rho_idx_H, rho_idx_E, rho_idx_M,\n",
-    "                    rho_H_E, rho_H_M, rho_E_M,\n",
-    "                    idx_sigma, default_sigma_H, default_sigma_E, default_sigma_M\n",
-    "                )\n",
-    "\n",
-    "                N_SIMULATIONS = get_num(raw_params, \"N_SIMULATIONS\", 5000)\n",
-    "                N_MONTHS      = get_num(raw_params, \"N_MONTHS\",    12)\n",
-    "\n",
-    "                sims = np.random.multivariate_normal(\n",
-    "                    [mu_idx, default_mu_H, default_mu_E, default_mu_M],\n",
-    "                    cov_mat,\n",
-    "                    size=(N_SIMULATIONS, N_MONTHS)\n",
-    "                )\n",
-    "\n",
-    "                f_int_matrix    = np.tile(f_internal, (N_SIMULATIONS, 1))\n",
-    "                f_ext_pa_matrix = np.tile(f_ext_pa,    (N_SIMULATIONS, 1))\n",
-    "                f_act_ext_matrix= np.tile(f_act_ext,   (N_SIMULATIONS, 1))\n",
-    "\n",
-    "                results = {\n",
-    "                    \"Base\":       np.zeros(N_SIMULATIONS),\n",
-    "                    \"ExternalPA\": np.zeros(N_SIMULATIONS),\n",
-    "                    \"ActiveExt\":  np.zeros(N_SIMULATIONS)\n",
-    "                }\n",
-    "                dates_sim = pd.date_range(\n",
-    "                    start=idx_series.index[-1] + pd.DateOffset(months=1),\n",
-    "                    periods=N_MONTHS, freq=\"ME\"\n",
-    "                )\n",
-    "                raw_returns = {\n",
-    "                    \"Base\":       pd.DataFrame(index=dates_sim),\n",
-    "                    \"ExternalPA\": pd.DataFrame(index=dates_sim),\n",
-    "                    \"ActiveExt\":  pd.DataFrame(index=dates_sim),\n",
-    "                }\n",
-    "\n",
-    "                for sim_i in range(N_SIMULATIONS):\n",
-    "                    r_beta = sims[sim_i, :, 0]\n",
-    "                    r_H    = sims[sim_i, :, 1]\n",
-    "                    r_E    = sims[sim_i, :, 2]\n",
-    "                    r_M    = sims[sim_i, :, 3]\n",
-    "\n",
-    "                    # Base (internal)\n",
-    "                    R_base = (r_beta - f_int_matrix[sim_i]) * Z_frac + r_H * Z_frac\n",
-    "                    results[\"Base\"][sim_i] = np.prod(1 + R_base) - 1\n",
-    "\n",
-    "                    # External PA\n",
-    "                    R_extpa = (r_beta - f_ext_pa_matrix[sim_i]) * E_pct + r_M * E_pct\n",
-    "                    results[\"ExternalPA\"][sim_i] = np.prod(1 + R_extpa) - 1\n",
-    "\n",
-    "                    # Active Extension\n",
-    "                    R_actext = (r_beta - f_act_ext_matrix[sim_i]) * A_pct + r_E * A_pct\n",
-    "                    results[\"ActiveExt\"][sim_i] = np.prod(1 + R_actext) - 1\n",
-    "\n",
-    "                    if sim_i == 0:\n",
-    "                        raw_returns[\"Base\"]       = pd.DataFrame({\"Base\": R_base}, index=dates_sim)\n",
-    "                        raw_returns[\"ExternalPA\"] = pd.DataFrame({\"ExternalPA\": R_extpa}, index=dates_sim)\n",
-    "                        raw_returns[\"ActiveExt\"]  = pd.DataFrame({\"ActiveExt\": R_actext}, index=dates_sim)\n",
-    "\n",
-    "                df_yearly = pd.DataFrame(results)\n",
-    "                summary_rows = []\n",
-    "                for cfg, arr in df_yearly.items():\n",
-    "                    ann_ret = np.mean(arr)\n",
-    "                    ann_vol = np.std(arr, ddof=1)\n",
-    "                    var_95  = np.percentile(arr, 5)\n",
-    "                    te      = np.nan\n",
-    "\n",
-    "                    mr_series = raw_returns[cfg].iloc[:, 0]\n",
-    "                    threshold = -buffer_multiple * idx_sigma\n",
-    "                    breach_pct = np.mean(mr_series < threshold) * 100\n",
-    "\n",
-    "                    summary_rows.append({\n",
-    "                        \"Config\":            cfg,\n",
-    "                        \"Ext %\":             ext_pct * 100.0,\n",
-    "                        \"Act %\":             act_pct * 100.0,\n",
-    "                        \"Internal PA (mm)\":  Z_mm,\n",
-    "                        \"Annual Return\":     ann_ret,\n",
-    "                        \"Annual Vol\":        ann_vol,\n",
-    "                        \"VaR 95\":            var_95,\n",
-    "                        \"TE (est.)\":         te,\n",
-    "                        \"Breach %\":          breach_pct\n",
-    "                    })\n",
-    "\n",
-    "                summary_df = pd.DataFrame(summary_rows)\n",
-    "                all_summaries.append(summary_df)\n",
-    "\n",
-    "                for key, df_r in raw_returns.items():\n",
-    "                    sheet_key = f\"{key}_E{int(ext_pct*100)}_A{int(act_pct*100)}\"\n",
-    "                    all_raw_returns[sheet_key] = df_r\n",
-    "\n",
-    "        final_summary = pd.concat(all_summaries, ignore_index=True)\n",
-    "\n",
-    "        inputs_dict = {\n",
-    "            \"Analysis mode\":               \"capital\",\n",
-    "            \"Total fund capital (mm)\":     total_fund_capital,\n",
-    "            \"Max external combined (%)\":   get_num(raw_params, \"max_external_combined_percent\", \"\"),\n",
-    "            \"External step size (%)\":      get_num(raw_params, \"external_step_size_percent\", \"\"),\n",
-    "            \"Annual financing mean (%)\":   financing_mean_annual,\n",
-    "            \"Annual financing vol (%)\":    financing_vol_annual,\n",
-    "            \"Monthly spike probability\":   spike_prob,\n",
-    "            \"Spike size (σ × multiplier)\": spike_factor,\n",
-    "            \"Buffer multiple\":             buffer_multiple\n",
-    "        }\n",
-    "\n",
-    "        export_to_excel(inputs_dict, final_summary, all_raw_returns)\n",
-    "\n",
-    "        # Convert numeric summary columns to human-friendly format\n",
-    "        display_df = final_summary.copy()\n",
-    "        display_df = display_df.rename(columns={\n",
-    "            \"Annual Return\": \"Annual Return (%)\",\n",
-    "            \"Annual Vol\":    \"Annual Volatility (%)\",\n",
-    "            \"VaR 95\":        \"95%-VaR (%)\",\n",
-    "            \"TE (est.)\":     \"Tracking Error (%)\",\n",
-    "            \"Breach %\":      \"Breach Probability (%)\"\n",
-    "        })\n",
-    "        # Format percentages\n",
-    "        for col in [\"Annual Return (%)\", \"Annual Volatility (%)\", \"95%-VaR (%)\", \"Tracking Error (%)\", \"Breach Probability (%)\"]:\n",
-    "            display_df[col] = display_df[col].map(\"{:.1f}%\".format)\n",
-    "\n",
-    "        pd.set_option(\"display.max_rows\", None)\n",
-    "        print(\"\\n=== Summary Table (Capital Mode) ===\\n\")\n",
-    "        print(display_df.to_string(index=False))\n",
-    "        print()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "9cf4f1dc-f8cc-4df1-9294-db2f40b1a76b",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "\n",
-    "\n",
-    "        # ─── PLOTTING DISPATCH ────────────────────────────────────────────────────\n",
-    "        # Helper to pivot decimals to percentages for axes\n",
-    "        def perc(x): return x * 100.0\n",
-    "\n",
-    "        if plot_heatmap_flag:\n",
-    "            # Heatmap of Annual Return vs Ext % & Act %\n",
-    "            pivot = final_summary.pivot(index=\"Act %\", columns=\"Ext %\", values=\"Annual Return\")\n",
-    "            X = np.array(sorted(final_summary[\"Ext %\"].unique()))\n",
-    "            Y = np.array(sorted(final_summary[\"Act %\"].unique()))\n",
-    "            Z = pivot.values\n",
-    "            fig, ax = plt.subplots(figsize=(6,5))\n",
-    "            hm = ax.imshow(\n",
-    "                Z,\n",
-    "                origin=\"lower\",\n",
-    "                aspect=\"auto\",\n",
-    "                cmap=\"viridis\",\n",
-    "                extent=[X.min(), X.max(), Y.min(), Y.max()]\n",
-    "            )\n",
-    "            ax.set_xlabel(\"Ext %\")\n",
-    "            ax.set_ylabel(\"Act %\")\n",
-    "            ax.set_title(\"Heatmap: Annual Return vs Ext% & Act%\")\n",
-    "            fig.colorbar(hm, ax=ax, label=\"Annual Return (decimal)\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_line_flag:\n",
-    "            # Line plot: Annual Return vs Ext % for each Act % slice\n",
-    "            fig, ax = plt.subplots(figsize=(6,4))\n",
-    "            for act_level in sorted(final_summary[\"Act %\"].unique()):\n",
-    "                sub = final_summary[final_summary[\"Act %\"] == act_level]\n",
-    "                x_vals = sub[\"Ext %\"].values\n",
-    "                y_vals = sub[\"Annual Return\"].values * 100.0\n",
-    "                ax.plot(x_vals, y_vals, marker=\"o\", label=f\"Act % = {act_level:.1f}\")\n",
-    "            ax.set_xlabel(\"Ext %\")\n",
-    "            ax.set_ylabel(\"Annual Return (%)\")\n",
-    "            ax.set_title(\"Line: Return vs Ext % by Active %\")\n",
-    "            ax.legend()\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_boxplot_flag:\n",
-    "            # Boxplot of first-simulation Monthly Returns vs Ext % at Act% = 0%\n",
-    "            sim_list = []\n",
-    "            for sheet_key, df_r in all_raw_returns.items():\n",
-    "                parts = sheet_key.split(\"_\")\n",
-    "                cfg   = parts[0]\n",
-    "                try:\n",
-    "                    ext_pct = float(parts[1].replace(\"E\",\"\")) / 100.0\n",
-    "                    act_pct = float(parts[2].replace(\"A\",\"\")) / 100.0\n",
-    "                except:\n",
-    "                    continue\n",
-    "                for val in df_r.iloc[:, 0].values:\n",
-    "                    sim_list.append({\n",
-    "                        \"Config\":       cfg,\n",
-    "                        \"Ext %\":        ext_pct * 100.0,\n",
-    "                        \"Act %\":        act_pct * 100.0,\n",
-    "                        \"Monthly return\": val * 100.0\n",
-    "                    })\n",
-    "            sim_df = pd.DataFrame(sim_list)\n",
-    "            subset = sim_df[sim_df[\"Act %\"] == 0.0]\n",
-    "            groups = [g[\"Monthly return\"].values for _, g in subset.groupby(\"Ext %\")]\n",
-    "            labels = sorted(subset[\"Ext %\"].unique())\n",
-    "            fig, ax = plt.subplots(figsize=(6,4))\n",
-    "            ax.boxplot(groups, labels=[f\"{l:.0f}\" for l in labels])\n",
-    "            ax.set_xlabel(\"Ext %\")\n",
-    "            ax.set_ylabel(\"Monthly Return (%)\")\n",
-    "            ax.set_title(\"Boxplot: Monthly Return by Ext % (Act%=0%)\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_scatter_flag:\n",
-    "            fig, ax = plt.subplots(figsize=(5,4))\n",
-    "            te_vals     = final_summary[\"Tracking Error (%)\"].astype(float) * 100.0\n",
-    "            breach_vals = final_summary[\"Breach %\"].astype(float)\n",
-    "            ax.scatter(te_vals, breach_vals, alpha=0.6)\n",
-    "            ax.set_xlabel(\"Tracking Error (%)\")\n",
-    "            ax.set_ylabel(\"Breach Probability (%)\")\n",
-    "            ax.set_title(\"Scatter: TE vs Breach Probability\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_time_series_flag:\n",
-    "            threshold = -buffer_multiple * idx_sigma\n",
-    "            for sample_key in all_raw_returns.keys():\n",
-    "                if sample_key.startswith(\"Base_\"):\n",
-    "                    df_path = all_raw_returns[sample_key]\n",
-    "                    fig, ax = plt.subplots(figsize=(6,3))\n",
-    "                    ax.plot(df_path.index, df_path.iloc[:, 0], label=sample_key)\n",
-    "                    ax.axhline(y=threshold, color=\"red\", linestyle=\"--\", label=\"Threshold\")\n",
-    "                    ax.set_title(f\"Time Series (first-sim) for {sample_key}\")\n",
-    "                    ax.set_xlabel(\"Month\")\n",
-    "                    ax.set_ylabel(\"Monthly return\")\n",
-    "                    ax.legend()\n",
-    "                    plt.tight_layout()\n",
-    "                    plt.show()\n",
-    "                    break  # only show one example\n",
-    "\n",
-    "        if plot_histogram_flag:\n",
-    "            # Pick a representative ExternalPA_E25_A25 if exists\n",
-    "            target = None\n",
-    "            for key in all_raw_returns:\n",
-    "                if key.startswith(\"ExternalPA_E25_A25\"):\n",
-    "                    target = key\n",
-    "                    break\n",
-    "            if target:\n",
-    "                data = all_raw_returns[target].iloc[:, 0].values * 100.0\n",
-    "                fig, ax = plt.subplots(figsize=(5,4))\n",
-    "                ax.hist(data, bins=30, alpha=0.7)\n",
-    "                ax.set_xlabel(\"Monthly Return (%)\")\n",
-    "                ax.set_ylabel(\"Frequency\")\n",
-    "                ax.set_title(f\"Histogram: {target}\")\n",
-    "                plt.tight_layout()\n",
-    "                plt.show()\n",
-    "\n",
-    "        if plot_surface_flag:\n",
-    "            xv = sorted(final_summary[\"Ext %\"].unique())\n",
-    "            yv = sorted(final_summary[\"Act %\"].unique())\n",
-    "            Z = final_summary.pivot(index=\"Act %\", columns=\"Ext %\", values=\"Breach %\").values\n",
-    "            X, Y = np.meshgrid(np.array(xv), np.array(yv))\n",
-    "            fig = plt.figure(figsize=(6,5))\n",
-    "            ax3 = fig.add_subplot(111, projection=\"3d\")\n",
-    "            surf = ax3.plot_surface(X, Y, Z, cmap=\"viridis\", edgecolor=\"none\")\n",
-    "            ax3.set_xlabel(\"Ext %\")\n",
-    "            ax3.set_ylabel(\"Act %\")\n",
-    "            ax3.set_zlabel(\"Breach %\")\n",
-    "            ax3.set_title(\"Surface: Breach vs Ext & Act\")\n",
-    "            fig.colorbar(surf, shrink=0.5, aspect=5, label=\"Breach %\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "    elif analysis_mode == \"returns\":\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "        # 8.9.b) Returns mode: Sweep over μ_H, σ_H, μ_E, σ_E, μ_M, σ_M. Other params fixed at midpoint.\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "\n",
-    "        E_mm = get_num(raw_params, \"external_pa_capital\", None)\n",
-    "        A_mm = get_num(raw_params, \"active_ext_capital\",  None)\n",
-    "        Z_mm = get_num(raw_params, \"internal_pa_capital\", None)\n",
-    "        if any(v is None for v in [E_mm, A_mm, Z_mm]):\n",
-    "            raise RuntimeError(\n",
-    "                \"In 'returns' mode, please supply: External PA capital (mm), \"\n",
-    "                \"Active Extension capital (mm), Internal PA capital (mm).\"\n",
-    "            )\n",
-    "\n",
-    "        mu_H_list    = build_range(\"mu_H\",    default_midpoint=default_mu_H)\n",
-    "        sigma_H_list = build_range(\"sigma_H\", default_midpoint=default_sigma_H)\n",
-    "        mu_E_list    = build_range(\"mu_E\",    default_midpoint=default_mu_E)\n",
-    "        sigma_E_list = build_range(\"sigma_E\", default_midpoint=default_sigma_E)\n",
-    "        mu_M_list    = build_range(\"mu_M\",    default_midpoint=default_mu_M)\n",
-    "        sigma_M_list = build_range(\"sigma_M\", default_midpoint=default_sigma_M)\n",
-    "\n",
-    "        ext_alpha_list = [default_ext_alpha_frac]\n",
-    "        act_share_list = [default_act_share]\n",
-    "        sd_list        = [default_sd_mult]\n",
-    "\n",
-    "        all_summaries = []\n",
-    "        all_raw_returns = {}\n",
-    "\n",
-    "        for muH in mu_H_list:\n",
-    "            for sH in sigma_H_list:\n",
-    "                for muE in mu_E_list:\n",
-    "                    for sE in sigma_E_list:\n",
-    "                        for muM_ in mu_M_list:\n",
-    "                            for sM in sigma_M_list:\n",
-    "                                f_internal = simulate_financing(\n",
-    "                                    12,\n",
-    "                                    internal_financing_mean_annual/12,\n",
-    "                                    internal_financing_vol_annual/12,\n",
-    "                                    internal_spike_prob,\n",
-    "                                    internal_spike_factor\n",
-    "                                )\n",
-    "                                f_ext_pa = simulate_financing(\n",
-    "                                    12,\n",
-    "                                    ext_pa_financing_mean_annual/12,\n",
-    "                                    ext_pa_financing_vol_annual/12,\n",
-    "                                    ext_pa_spike_prob,\n",
-    "                                    ext_pa_spike_factor\n",
-    "                                )\n",
-    "                                f_act_ext = simulate_financing(\n",
-    "                                    12,\n",
-    "                                    act_ext_financing_mean_annual/12,\n",
-    "                                    act_ext_financing_vol_annual/12,\n",
-    "                                    act_ext_spike_prob,\n",
-    "                                    act_ext_spike_factor\n",
-    "                                )\n",
-    "\n",
-    "                                cov_mat = build_cov_matrix(\n",
-    "                                    rho_idx_H, rho_idx_E, rho_idx_M,\n",
-    "                                    rho_H_E, rho_H_M, rho_E_M,\n",
-    "                                    idx_sigma, sH, sE, sM\n",
-    "                                )\n",
-    "\n",
-    "                                N_SIMULATIONS = get_num(raw_params, \"N_SIMULATIONS\", 5000)\n",
-    "                                N_MONTHS      = get_num(raw_params, \"N_MONTHS\",    12)\n",
-    "\n",
-    "                                sims = np.random.multivariate_normal(\n",
-    "                                    [mu_idx, muH, muE, muM_],\n",
-    "                                    cov_mat,\n",
-    "                                    size=(N_SIMULATIONS, N_MONTHS)\n",
-    "                                )\n",
-    "\n",
-    "                                f_int_matrix    = np.tile(f_internal, (N_SIMULATIONS, 1))\n",
-    "                                f_ext_pa_matrix = np.tile(f_ext_pa,    (N_SIMULATIONS, 1))\n",
-    "                                f_act_ext_matrix= np.tile(f_act_ext,   (N_SIMULATIONS, 1))\n",
-    "\n",
-    "                                results = {\n",
-    "                                    \"Base\":       np.zeros(N_SIMULATIONS),\n",
-    "                                    \"ExternalPA\": np.zeros(N_SIMULATIONS),\n",
-    "                                    \"ActiveExt\":  np.zeros(N_SIMULATIONS)\n",
-    "                                }\n",
-    "                                dates_sim = pd.date_range(\n",
-    "                                    start=idx_series.index[-1] + pd.DateOffset(months=1),\n",
-    "                                    periods=N_MONTHS, freq=\"ME\"\n",
-    "                                )\n",
-    "                                raw_returns = {\n",
-    "                                    \"Base\":       pd.DataFrame(index=dates_sim),\n",
-    "                                    \"ExternalPA\": pd.DataFrame(index=dates_sim),\n",
-    "                                    \"ActiveExt\":  pd.DataFrame(index=dates_sim),\n",
-    "                                }\n",
-    "\n",
-    "                                for sim_i in range(N_SIMULATIONS):\n",
-    "                                    r_beta = sims[sim_i, :, 0]\n",
-    "                                    r_H    = sims[sim_i, :, 1]\n",
-    "                                    r_E    = sims[sim_i, :, 2]\n",
-    "                                    r_M    = sims[sim_i, :, 3]\n",
-    "\n",
-    "                                    R_base   = (r_beta - f_int_matrix[sim_i]) + r_H\n",
-    "                                    R_extpa  = (r_beta - f_ext_pa_matrix[sim_i]) + r_M\n",
-    "                                    R_actext = (r_beta - f_act_ext_matrix[sim_i]) + r_E\n",
-    "\n",
-    "                                    results[\"Base\"][sim_i]       = np.prod(1 + R_base) - 1\n",
-    "                                    results[\"ExternalPA\"][sim_i] = np.prod(1 + R_extpa) - 1\n",
-    "                                    results[\"ActiveExt\"][sim_i]  = np.prod(1 + R_actext) - 1\n",
-    "\n",
-    "                                    if sim_i == 0:\n",
-    "                                        raw_returns[\"Base\"]       = pd.DataFrame({\"Base\": R_base}, index=dates_sim)\n",
-    "                                        raw_returns[\"ExternalPA\"] = pd.DataFrame({\"ExternalPA\": R_extpa}, index=dates_sim)\n",
-    "                                        raw_returns[\"ActiveExt\"]  = pd.DataFrame({\"ActiveExt\": R_actext}, index=dates_sim)\n",
-    "\n",
-    "                                df_yearly = pd.DataFrame(results)\n",
-    "                                summary_rows = []\n",
-    "                                for cfg, arr in df_yearly.items():\n",
-    "                                    ann_ret = np.mean(arr)\n",
-    "                                    ann_vol = np.std(arr, ddof=1)\n",
-    "                                    var_95  = np.percentile(arr, 5)\n",
-    "                                    te      = np.nan\n",
-    "\n",
-    "                                    mr_series = raw_returns[cfg].iloc[:, 0]\n",
-    "                                    threshold = -buffer_multiple * idx_sigma\n",
-    "                                    breach_pct = np.mean(mr_series < threshold) * 100\n",
-    "\n",
-    "                                    summary_rows.append({\n",
-    "                                        \"Config\":            cfg,\n",
-    "                                        \"μ_H (%)\":           muH * 100.0,\n",
-    "                                        \"σ_H (%)\":           sH * 100.0,\n",
-    "                                        \"μ_E (%)\":           muE * 100.0,\n",
-    "                                        \"σ_E (%)\":           sE * 100.0,\n",
-    "                                        \"μ_M (%)\":           muM_ * 100.0,\n",
-    "                                        \"σ_M (%)\":           sM * 100.0,\n",
-    "                                        \"Internal PA (mm)\":  Z_mm,\n",
-    "                                        \"External PA (mm)\":  E_mm,\n",
-    "                                        \"Active Ext (mm)\":   A_mm,\n",
-    "                                        \"Annual Return\":     ann_ret,\n",
-    "                                        \"Annual Vol\":        ann_vol,\n",
-    "                                        \"VaR 95\":            var_95,\n",
-    "                                        \"TE (est.)\":         te,\n",
-    "                                        \"Breach %\":          breach_pct\n",
-    "                                    })\n",
-    "\n",
-    "                                summary_df = pd.DataFrame(summary_rows)\n",
-    "                                all_summaries.append(summary_df)\n",
-    "\n",
-    "                                for key, df_r in raw_returns.items():\n",
-    "                                    sheet_key = (\n",
-    "                                        f\"{key}_H{int(muH*100)}\"\n",
-    "                                        f\"_sH{int(sH*100)}\"\n",
-    "                                        f\"_E{int(muE*100)}\"\n",
-    "                                        f\"_sE{int(sE*100)}\"\n",
-    "                                        f\"_M{int(muM_*100)}\"\n",
-    "                                        f\"_sM{int(sM*100)}\"\n",
-    "                                    )\n",
-    "                                    all_raw_returns[sheet_key] = df_r\n",
-    "\n",
-    "        final_summary = pd.concat(all_summaries, ignore_index=True)\n",
-    "\n",
-    "        inputs_dict = {\n",
-    "            \"Analysis mode\":                    \"returns\",\n",
-    "            \"In-House return min (%)\":          get_num(raw_params, \"mu_H_min\",    \"\"),\n",
-    "            \"In-House return max (%)\":          get_num(raw_params, \"mu_H_max\",    \"\"),\n",
-    "            \"In-House return step (%)\":         get_num(raw_params, \"mu_H_step\",   \"\"),\n",
-    "            \"In-House vol min (%)\":             get_num(raw_params, \"sigma_H_min\", \"\"),\n",
-    "            \"In-House vol max (%)\":             get_num(raw_params, \"sigma_H_max\", \"\"),\n",
-    "            \"In-House vol step (%)\":            get_num(raw_params, \"sigma_H_step\",\"\"),\n",
-    "            \"Alpha-Extension return min (%)\":   get_num(raw_params, \"mu_E_min\",    \"\"),\n",
-    "            \"Alpha-Extension return max (%)\":   get_num(raw_params, \"mu_E_max\",    \"\"),\n",
-    "            \"Alpha-Extension return step (%)\":  get_num(raw_params, \"mu_E_step\",   \"\"),\n",
-    "            \"Alpha-Extension vol min (%)\":      get_num(raw_params, \"sigma_E_min\", \"\"),\n",
-    "            \"Alpha-Extension vol max (%)\":      get_num(raw_params, \"sigma_E_max\", \"\"),\n",
-    "            \"Alpha-Extension vol step (%)\":     get_num(raw_params, \"sigma_E_step\",\"\"),\n",
-    "            \"External return min (%)\":          get_num(raw_params, \"mu_M_min\",    \"\"),\n",
-    "            \"External return max (%)\":          get_num(raw_params, \"mu_M_max\",    \"\"),\n",
-    "            \"External return step (%)\":         get_num(raw_params, \"mu_M_step\",   \"\"),\n",
-    "            \"External vol min (%)\":             get_num(raw_params, \"sigma_M_min\", \"\"),\n",
-    "            \"External vol max (%)\":             get_num(raw_params, \"sigma_M_max\", \"\"),\n",
-    "            \"External vol step (%)\":            get_num(raw_params, \"sigma_M_step\",\"\"),\n",
-    "            \"External PA capital (mm)\":         E_mm,\n",
-    "            \"Active Extension capital (mm)\":    A_mm,\n",
-    "            \"Internal PA capital (mm)\":         Z_mm,\n",
-    "            \"Buffer multiple\":                  buffer_multiple\n",
-    "        }\n",
-    "\n",
-    "        export_to_excel(inputs_dict, final_summary, all_raw_returns)\n",
-    "\n",
-    "        display_df = final_summary.copy()\n",
-    "        display_df = display_df.rename(columns={\n",
-    "            \"Annual Return\": \"Annual Return (%)\",\n",
-    "            \"Annual Vol\":    \"Annual Volatility (%)\",\n",
-    "            \"VaR 95\":        \"95%-VaR (%)\",\n",
-    "            \"TE (est.)\":     \"Tracking Error (%)\",\n",
-    "            \"Breach %\":      \"Breach Probability (%)\"\n",
-    "        })\n",
-    "        for col in [\"Annual Return (%)\", \"Annual Volatility (%)\", \"95%-VaR (%)\", \"Tracking Error (%)\", \"Breach Probability (%)\"]:\n",
-    "            display_df[col] = display_df[col].map(\"{:.1f}%\".format)\n",
-    "\n",
-    "        pd.set_option(\"display.max_rows\", None)\n",
-    "        print(\"\\n=== Summary Table (Returns Mode) ===\\n\")\n",
-    "        print(display_df.to_string(index=False))\n",
-    "        print()\n",
-    "\n",
-    "        # ─── PLOTTING DISPATCH ────────────────────────────────────────────────────\n",
-    "\n",
-    "        if plot_heatmap_flag:\n",
-    "            # Heatmap: pick two parameters to visualize, e.g. μ_H vs σ_H → Annual Return\n",
-    "            pivot = final_summary.pivot(index=\"σ_H (%)\", columns=\"μ_H (%)\", values=\"Annual Return\")\n",
-    "            X = np.array(sorted(final_summary[\"μ_H (%)\"].unique()))\n",
-    "            Y = np.array(sorted(final_summary[\"σ_H (%)\"].unique()))\n",
-    "            Z = pivot.values\n",
-    "            fig, ax = plt.subplots(figsize=(6,5))\n",
-    "            hm = ax.imshow(\n",
-    "                Z,\n",
-    "                origin=\"lower\",\n",
-    "                aspect=\"auto\",\n",
-    "                cmap=\"viridis\",\n",
-    "                extent=[X.min(), X.max(), Y.min(), Y.max()]\n",
-    "            )\n",
-    "            ax.set_xlabel(\"μ_H (%)\")\n",
-    "            ax.set_ylabel(\"σ_H (%)\")\n",
-    "            ax.set_title(\"Heatmap: Annual Return vs μ_H & σ_H\")\n",
-    "            fig.colorbar(hm, ax=ax, label=\"Annual Return (decimal)\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_line_flag:\n",
-    "            # Line: sweep μ_H for fixed σ_H (take first σ_H level)\n",
-    "            first_sigma = sorted(final_summary[\"σ_H (%)\"].unique())[0]\n",
-    "            sub = final_summary[final_summary[\"σ_H (%)\"] == first_sigma]\n",
-    "            x_vals = sub[\"μ_H (%)\"].values\n",
-    "            y_vals = sub[\"Annual Return\"].values * 100.0\n",
-    "            fig, ax = plt.subplots(figsize=(6,4))\n",
-    "            ax.plot(x_vals, y_vals, marker=\"o\")\n",
-    "            ax.set_xlabel(\"μ_H (%)\")\n",
-    "            ax.set_ylabel(\"Annual Return (%)\")\n",
-    "            ax.set_title(f\"Line: μ_H vs Return (σ_H={first_sigma:.1f}%)\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_boxplot_flag:\n",
-    "            # Boxplot of monthly returns for one parameter combination, e.g. first in grid\n",
-    "            sample_key = list(all_raw_returns.keys())[0]\n",
-    "            data = all_raw_returns[sample_key].iloc[:, 0].values * 100.0\n",
-    "            fig, ax = plt.subplots(figsize=(5,4))\n",
-    "            ax.boxplot(data, labels=[sample_key])\n",
-    "            ax.set_ylabel(\"Monthly Return (%)\")\n",
-    "            ax.set_title(f\"Boxplot: {sample_key}\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_scatter_flag:\n",
-    "            fig, ax = plt.subplots(figsize=(5,4))\n",
-    "            te_vals     = final_summary[\"Tracking Error (%)\"].astype(float) * 100.0\n",
-    "            breach_vals = final_summary[\"Breach %\"].astype(float)\n",
-    "            ax.scatter(te_vals, breach_vals, alpha=0.6)\n",
-    "            ax.set_xlabel(\"Tracking Error (%)\")\n",
-    "            ax.set_ylabel(\"Breach Probability (%)\")\n",
-    "            ax.set_title(\"Scatter: TE vs Breach Probability\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_time_series_flag:\n",
-    "            threshold = -buffer_multiple * idx_sigma\n",
-    "            sample_key = list(all_raw_returns.keys())[0]\n",
-    "            df_path = all_raw_returns[sample_key]\n",
-    "            fig, ax = plt.subplots(figsize=(6,3))\n",
-    "            ax.plot(df_path.index, df_path.iloc[:, 0], label=sample_key)\n",
-    "            ax.axhline(y=threshold, color=\"red\", linestyle=\"--\", label=\"Threshold\")\n",
-    "            ax.set_title(f\"Time Series (first-sim) for {sample_key}\")\n",
-    "            ax.set_xlabel(\"Month\")\n",
-    "            ax.set_ylabel(\"Monthly return\")\n",
-    "            ax.legend()\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_histogram_flag:\n",
-    "            sample_key = list(all_raw_returns.keys())[0]\n",
-    "            data = all_raw_returns[sample_key].iloc[:, 0].values * 100.0\n",
-    "            fig, ax = plt.subplots(figsize=(5,4))\n",
-    "            ax.hist(data, bins=30, alpha=0.7)\n",
-    "            ax.set_xlabel(\"Monthly Return (%)\")\n",
-    "            ax.set_ylabel(\"Frequency\")\n",
-    "            ax.set_title(f\"Histogram: {sample_key}\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_surface_flag:\n",
-    "            xv = sorted(final_summary[\"μ_H (%)\"].unique())\n",
-    "            yv = sorted(final_summary[\"σ_H (%)\"].unique())\n",
-    "            Z = final_summary.pivot(index=\"σ_H (%)\", columns=\"μ_H (%)\", values=\"Breach %\").values\n",
-    "            X, Y = np.meshgrid(np.array(xv), np.array(yv))\n",
-    "            fig = plt.figure(figsize=(6,5))\n",
-    "            ax3 = fig.add_subplot(111, projection=\"3d\")\n",
-    "            surf = ax3.plot_surface(X, Y, Z, cmap=\"viridis\", edgecolor=\"none\")\n",
-    "            ax3.set_xlabel(\"μ_H (%)\")\n",
-    "            ax3.set_ylabel(\"σ_H (%)\")\n",
-    "            ax3.set_zlabel(\"Breach %\")\n",
-    "            ax3.set_title(\"Surface: Breach vs μ_H & σ_H\")\n",
-    "            fig.colorbar(surf, shrink=0.5, aspect=5, label=\"Breach %\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "    elif analysis_mode == \"alpha_shares\":\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "        # 8.9.c) Alpha_Shares mode: Sweep over external_pa_alpha_frac, active_share. Others fixed.\n",
-    "        # ---------------------------------------------------------------------------------------\n",
-    "\n",
-    "        E_mm = get_num(raw_params, \"external_pa_capital\", None)\n",
-    "        A_mm = get_num(raw_params, \"active_ext_capital\",  None)\n",
-    "        Z_mm = get_num(raw_params, \"internal_pa_capital\", None)\n",
-    "        if any(v is None for v in [E_mm, A_mm, Z_mm]):\n",
-    "            raise RuntimeError(\n",
-    "                \"In 'alpha_shares' mode, supply: External PA capital (mm), \"\n",
-    "                \"Active Extension capital (mm), Internal PA capital (mm).\"\n",
-    "            )\n",
-    "\n",
-    "        external_pa_alpha_frac_list = build_range(\"external_pa_alpha_frac\", default_midpoint=default_ext_alpha_frac)\n",
-    "        active_share_list           = build_range(\"active_share\",            default_midpoint=default_act_share)\n",
-    "\n",
-    "        mu_H_list    = [default_mu_H]\n",
-    "        sigma_H_list = [default_sigma_H]\n",
-    "        mu_E_list    = [default_mu_E]\n",
-    "        sigma_E_list = [default_sigma_E]\n",
-    "        mu_M_list    = [default_mu_M]\n",
-    "        sigma_M_list = [default_sigma_M]\n",
-    "        sd_list      = [default_sd_mult]\n",
-    "\n",
-    "        all_summaries = []\n",
-    "        all_raw_returns = {}\n",
-    "\n",
-    "        for ext_alpha in external_pa_alpha_frac_list:\n",
-    "            for act_share in active_share_list:\n",
-    "                f_internal = simulate_financing(\n",
-    "                    12,\n",
-    "                    internal_financing_mean_annual/12,\n",
-    "                    internal_financing_vol_annual/12,\n",
-    "                    internal_spike_prob,\n",
-    "                    internal_spike_factor\n",
-    "                )\n",
-    "                f_ext_pa = simulate_financing(\n",
-    "                    12,\n",
-    "                    ext_pa_financing_mean_annual/12,\n",
-    "                    ext_pa_financing_vol_annual/12,\n",
-    "                    ext_pa_spike_prob,\n",
-    "                    ext_pa_spike_factor\n",
-    "                )\n",
-    "                f_act_ext = simulate_financing(\n",
-    "                    12,\n",
-    "                    act_ext_financing_mean_annual/12,\n",
-    "                    act_ext_financing_vol_annual/12,\n",
-    "                    act_ext_spike_prob,\n",
-    "                    act_ext_spike_factor\n",
-    "                )\n",
-    "\n",
-    "                cov_mat = build_cov_matrix(\n",
-    "                    rho_idx_H, rho_idx_E, rho_idx_M,\n",
-    "                    rho_H_E, rho_H_M, rho_E_M,\n",
-    "                    idx_sigma, default_sigma_H, default_sigma_E, default_sigma_M\n",
-    "                )\n",
-    "\n",
-    "                N_SIMULATIONS = get_num(raw_params, \"N_SIMULATIONS\", 5000)\n",
-    "                N_MONTHS      = get_num(raw_params, \"N_MONTHS\",    12)\n",
-    "\n",
-    "                sims = np.random.multivariate_normal(\n",
-    "                    [mu_idx, default_mu_H, default_mu_E, default_mu_M],\n",
-    "                    cov_mat,\n",
-    "                    size=(N_SIMULATIONS, N_MONTHS)\n",
-    "                )\n",
-    "\n",
-    "                f_int_matrix    = np.tile(f_internal, (N_SIMULATIONS, 1))\n",
-    "                f_ext_pa_matrix = np.tile(f_ext_pa,    (N_SIMULATIONS, 1))\n",
-    "                f_act_ext_matrix= np.tile(f_act_ext,   (N_SIMULATIONS, 1))\n",
-    "\n",
-    "                results = {\n",
-    "                    \"Base\":       np.zeros(N_SIMULATIONS),\n",
-    "                    \"ExternalPA\": np.zeros(N_SIMULATIONS),\n",
-    "                    \"ActiveExt\":  np.zeros(N_SIMULATIONS)\n",
-    "                }\n",
-    "                dates_sim = pd.date_range(\n",
-    "                    start=idx_series.index[-1] + pd.DateOffset(months=1),\n",
-    "                    periods=N_MONTHS, freq=\"ME\"\n",
-    "                )\n",
-    "                raw_returns = {\n",
-    "                    \"Base\":       pd.DataFrame(index=dates_sim),\n",
-    "                    \"ExternalPA\": pd.DataFrame(index=dates_sim),\n",
-    "                    \"ActiveExt\":  pd.DataFrame(index=dates_sim),\n",
-    "                }\n",
-    "\n",
-    "                for sim_i in range(N_SIMULATIONS):\n",
-    "                    r_beta = sims[sim_i, :, 0]\n",
-    "                    r_H    = sims[sim_i, :, 1]\n",
-    "                    r_E    = sims[sim_i, :, 2]\n",
-    "                    r_M    = sims[sim_i, :, 3]\n",
-    "\n",
-    "                    R_base   = (r_beta - f_int_matrix[sim_i]) + r_H\n",
-    "                    R_extpa  = (r_beta - f_ext_pa_matrix[sim_i]) * ext_alpha + r_M * ext_alpha\n",
-    "                    R_actext = (r_beta - f_act_ext_matrix[sim_i]) * act_share + r_E * act_share\n",
-    "\n",
-    "                    results[\"Base\"][sim_i]       = np.prod(1 + R_base) - 1\n",
-    "                    results[\"ExternalPA\"][sim_i] = np.prod(1 + R_extpa) - 1\n",
-    "                    results[\"ActiveExt\"][sim_i]  = np.prod(1 + R_actext) - 1\n",
-    "\n",
-    "                    if sim_i == 0:\n",
-    "                        raw_returns[\"Base\"]       = pd.DataFrame({\"Base\": R_base}, index=dates_sim)\n",
-    "                        raw_returns[\"ExternalPA\"] = pd.DataFrame({\"ExternalPA\": R_extpa}, index=dates_sim)\n",
-    "                        raw_returns[\"ActiveExt\"]  = pd.DataFrame({\"ActiveExt\": R_actext}, index=dates_sim)\n",
-    "\n",
-    "                df_yearly = pd.DataFrame(results)\n",
-    "                summary_rows = []\n",
-    "                for cfg, arr in df_yearly.items():\n",
-    "                    ann_ret = np.mean(arr)\n",
-    "                    ann_vol = np.std(arr, ddof=1)\n",
-    "                    var_95  = np.percentile(arr, 5)\n",
-    "                    te      = np.nan\n",
-    "\n",
-    "                    mr_series = raw_returns[cfg].iloc[:, 0]\n",
-    "                    threshold = -buffer_multiple * idx_sigma\n",
-    "                    breach_pct = np.mean(mr_series < threshold) * 100\n",
-    "\n",
-    "                    summary_rows.append({\n",
-    "                        \"Config\":            cfg,\n",
-    "                        \"External PA α (%)\": ext_alpha * 100.0,\n",
-    "                        \"Active share (%)\":  act_share * 100.0,\n",
-    "                        \"Internal PA (mm)\":  Z_mm,\n",
-    "                        \"External PA (mm)\":  E_mm,\n",
-    "                        \"Active Ext (mm)\":   A_mm,\n",
-    "                        \"Annual Return\":     ann_ret,\n",
-    "                        \"Annual Vol\":        ann_vol,\n",
-    "                        \"VaR 95\":            var_95,\n",
-    "                        \"TE (est.)\":         te,\n",
-    "                        \"Breach %\":          breach_pct\n",
-    "                    })\n",
-    "\n",
-    "                summary_df = pd.DataFrame(summary_rows)\n",
-    "                all_summaries.append(summary_df)\n",
-    "\n",
-    "                for key, df_r in raw_returns.items():\n",
-    "                    sheet_key = f\"{key}_α{int(ext_alpha*100)}_act{int(act_share*100)}\"\n",
-    "                    all_raw_returns[sheet_key] = df_r\n",
-    "\n",
-    "        final_summary = pd.concat(all_summaries, ignore_index=True)\n",
-    "\n",
-    "        inputs_dict = {\n",
-    "            \"Analysis mode\":                  \"alpha_shares\",\n",
-    "            \"External PA α fraction min (%)\": get_num(raw_params, \"external_pa_alpha_frac_min\", \"\"),\n",
-    "            \"External PA α fraction max (%)\": get_num(raw_params, \"external_pa_alpha_frac_max\", \"\"),\n",
-    "            \"External PA α fraction step (%)\":get_num(raw_params, \"external_pa_alpha_frac_step\", \"\"),\n",
-    "            \"Active share min (%)\":          get_num(raw_params, \"active_share_min\", \"\"),\n",
-    "            \"Active share max (%)\":          get_num(raw_params, \"active_share_max\", \"\"),\n",
-    "            \"Active share step (%)\":         get_num(raw_params, \"active_share_step\", \"\"),\n",
-    "            \"External PA capital (mm)\":      E_mm,\n",
-    "            \"Active Extension capital (mm)\": A_mm,\n",
-    "            \"Internal PA capital (mm)\":      Z_mm,\n",
-    "            \"Buffer multiple\":               buffer_multiple\n",
-    "        }\n",
-    "\n",
-    "        export_to_excel(inputs_dict, final_summary, all_raw_returns)\n",
-    "\n",
-    "        display_df = final_summary.copy()\n",
-    "        display_df = display_df.rename(columns={\n",
-    "            \"Annual Return\": \"Annual Return (%)\",\n",
-    "            \"Annual Vol\":    \"Annual Volatility (%)\",\n",
-    "            \"VaR 95\":        \"95%-VaR (%)\",\n",
-    "            \"TE (est.)\":     \"Tracking Error (%)\",\n",
-    "            \"Breach %\":      \"Breach Probability (%)\"\n",
-    "        })\n",
-    "        for col in [\"Annual Return (%)\", \"Annual Volatility (%)\", \"95%-VaR (%)\", \"Tracking Error (%)\", \"Breach Probability (%)\"]:\n",
-    "            display_df[col] = display_df[col].map(\"{:.1f}%\".format)\n",
-    "\n",
-    "        pd.set_option(\"display.max_rows\", None)\n",
-    "        print(\"\\n=== Summary Table (Alpha_Shares Mode) ===\\n\")\n",
-    "        print(display_df.to_string(index=False))\n",
-    "        print()\n",
-    "\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "ac9a590c-9b6b-4643-9cdd-33df412c3afe",
-   "metadata": {},
-   "outputs": [],
-   "source": []
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "0c1c9d5b-ff4f-4d5a-b810-e41fcea8aad3",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "        "
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
-   "id": "a3fd85fb-a02f-47f8-8d1b-e65f6b198013",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "def export_everything_to_excel(\n",
-    "    inputs_dict: dict,\n",
-    "    summary_df: pd.DataFrame,\n",
-    "    raw_returns_dict: dict,\n",
-    "    index_csv_path: Path,\n",
-    "    python_code_path: Path,\n",
-    "    documentation_path: Path,\n",
-    "    output_filename: str = \"Everything.xlsx\"\n",
-    "):\n",
-    "    \"\"\"\n",
-    "    Write a single Excel workbook with multiple tabs:\n",
-    "      1) Inputs         → inputs_dict + a row for index_csv_path\n",
-    "      2) Summary        → summary_df\n",
-    "      3+) Raw Returns   → one sheet per key in raw_returns_dict\n",
-    "      n-1) Code        → full contents of python_code_path (one line/cell)\n",
-    "      n  ) Documentation → full contents of documentation_path (one line/cell)\n",
-    "\n",
-    "    - inputs_dict:      { parameter_name: value }\n",
-    "    - summary_df:       pandas DataFrame of human‐friendly summary (no index)\n",
-    "    - raw_returns_dict: { sheet_name: DataFrame } (each DataFrame indexed by Date)\n",
-    "    - index_csv_path:   Path to the index CSV file (we’ll dump that path into the Inputs tab)\n",
-    "    - python_code_path: Path to “portable_alpha_model.py”\n",
-    "    - documentation_path: Path to “model_documentation.md”\n",
-    "    - output_filename:  Name of the final Excel file to write\n",
-    "    \"\"\"\n",
-    "    # 1) Build a DataFrame for Inputs, inserting “Index CSV (full path)” at the top\n",
-    "    df_inputs = pd.DataFrame.from_dict(inputs_dict, orient=\"index\", columns=[\"Value\"])\n",
-    "    df_inputs.index.name = \"Parameter\"\n",
-    "    df_inputs.reset_index(inplace=True)\n",
-    "\n",
-    "    # Insert the index‐CSV row at the very top\n",
-    "    df_inputs.loc[-1] = [\"Index CSV (full path)\", str(index_csv_path)]\n",
-    "    df_inputs.index = df_inputs.index + 1\n",
-    "    df_inputs.sort_index(inplace=True)\n",
-    "\n",
-    "    # 2) Prepare to write everything into one Excel file\n",
-    "    with pd.ExcelWriter(output_filename, engine=\"openpyxl\") as writer:\n",
-    "        # --- Inputs tab ---\n",
-    "        df_inputs.to_excel(writer, sheet_name=\"Inputs\", index=False)\n",
-    "\n",
-    "        # --- Summary tab ---\n",
-    "        summary_df.to_excel(writer, sheet_name=\"Summary\", index=False)\n",
-    "\n",
-    "        # --- Raw Returns tabs ---\n",
-    "        # Excel limits sheet names to 31 characters; truncate if needed.\n",
-    "        for sheet_name, df_rr in raw_returns_dict.items():\n",
-    "            safe_name = sheet_name if len(sheet_name) <= 31 else sheet_name[:28] + \"...\"\n",
-    "            df_rr.to_excel(writer, sheet_name=safe_name, index=True)\n",
-    "\n",
-    "        # --- Code tab ---\n",
-    "        # Read the .py file line by line and dump into “Code” sheet, column A\n",
-    "        code_lines = Path(python_code_path).read_text(encoding=\"utf-8\").splitlines()\n",
-    "        wb = writer.book\n",
-    "        ws_code = wb.create_sheet(title=\"Code\")\n",
-    "        for row_idx, line in enumerate(code_lines, start=1):\n",
-    "            ws_code.cell(row=row_idx, column=1, value=line)\n",
-    "        # Widen column A so code is readable\n",
-    "        ws_code.column_dimensions[\"A\"].width = 100\n",
-    "        ws_code.sheet_view.showGridLines = False\n",
-    "\n",
-    "        # --- Documentation tab ---\n",
-    "        # Read the Markdown (or plain‐text) file and dump into “Documentation” sheet\n",
-    "        doc_lines = Path(documentation_path).read_text(encoding=\"utf-8\").splitlines()\n",
-    "        ws_doc = wb.create_sheet(title=\"Documentation\")\n",
-    "        for row_idx, line in enumerate(doc_lines, start=1):\n",
-    "            ws_doc.cell(row=row_idx, column=1, value=line)\n",
-    "        ws_doc.column_dimensions[\"A\"].width = 80\n",
-    "        ws_doc.sheet_view.showGridLines = False\n",
-    "\n",
-    "    print(f\"All tabs exported to {output_filename}.\")\n",
-    "\n"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "024d190f-8426-4d2b-9199-401b979a673f",
-   "metadata": {},
-   "source": []
-  },
-  {
-   "cell_type": "markdown",
-   "id": "2dad59d4-1066-41fc-ac4b-63b3e0ae41ff",
-   "metadata": {},
-   "source": [
-    "# ─── PLOTTING DISPATCH ────────────────────────────────────────────────────\n",
-    "\n",
-    "        if plot_heatmap_flag:\n",
-    "            pivot = final_summary.pivot(index=\"SD mult\", columns=\"Config\", values=\"Annual Return\")\n",
-    "            # Example: heatmap of SD mult vs Config (Base, ExternalPA, ActiveExt) → annual return\n",
-    "            X = np.arange(len(pivot.columns))\n",
-    "            Y = pivot.index.values\n",
-    "            Z = pivot.values\n",
-    "            fig, ax = plt.subplots(figsize=(6,5))\n",
-    "            hm = ax.imshow(\n",
-    "                Z,\n",
-    "                origin=\"lower\",\n",
-    "                aspect=\"auto\",\n",
-    "                cmap=\"viridis\",\n",
-    "                extent=[0, len(X)-1, Y.min(), Y.max()]\n",
-    "            )\n",
-    "            ax.set_xticks(X)\n",
-    "            ax.set_xticklabels(pivot.columns, rotation=45, ha=\"right\")\n",
-    "            ax.set_ylabel(\"SD mult\")\n",
-    "            ax.set_title(\"Heatmap: Annual Return vs Config & SD mult\")\n",
-    "            fig.colorbar(hm, ax=ax, label=\"Annual Return (decimal)\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_line_flag:\n",
-    "            # Line: For each Config, plot Annual Return vs SD mult\n",
-    "            fig, ax = plt.subplots(figsize=(6,4))\n",
-    "            for cfg in final_summary[\"Config\"].unique():\n",
-    "                sub = final_summary[final_summary[\"Config\"] == cfg]\n",
-    "                x_vals = sub[\"SD mult\"].values\n",
-    "                y_vals = sub[\"Annual Return\"].values * 100.0\n",
-    "                ax.plot(x_vals, y_vals, marker=\"o\", label=cfg)\n",
-    "            ax.set_xlabel(\"SD mult\")\n",
-    "            ax.set_ylabel(\"Annual Return (%)\")\n",
-    "            ax.set_title(\"Line: Return vs SD mult by Config\")\n",
-    "            ax.legend()\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_boxplot_flag:\n",
-    "            sample_key = list(all_raw_returns.keys())[0]\n",
-    "            data = all_raw_returns[sample_key].iloc[:, 0].values * 100.0\n",
-    "            fig, ax = plt.subplots(figsize=(5,4))\n",
-    "            ax.boxplot(data, labels=[sample_key])\n",
-    "            ax.set_ylabel(\"Monthly Return (%)\")\n",
-    "            ax.set_title(f\"Boxplot: {sample_key}\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_scatter_flag:\n",
-    "            fig, ax = plt.subplots(figsize=(5,4))\n",
-    "            te_vals     = final_summary[\"Tracking Error (%)\"].astype(float) * 100.0\n",
-    "            breach_vals = final_summary[\"Breach %\"].astype(float)\n",
-    "            ax.scatter(te_vals, breach_vals, alpha=0.6)\n",
-    "            ax.set_xlabel(\"Tracking Error (%)\")\n",
-    "            ax.set_ylabel(\"Breach Probability (%)\")\n",
-    "            ax.set_title(\"Scatter: TE vs Breach Probability\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_time_series_flag:\n",
-    "            threshold = -buffer_multiple * idx_sigma\n",
-    "            sample_key = list(all_raw_returns.keys())[0]\n",
-    "            df_path = all_raw_returns[sample_key]\n",
-    "            fig, ax = plt.subplots(figsize=(6,3))\n",
-    "            ax.plot(df_path.index, df_path.iloc[:, 0], label=sample_key)\n",
-    "            ax.axhline(y=threshold, color=\"red\", linestyle=\"--\", label=\"Threshold\")\n",
-    "            ax.set_title(f\"Time Series (first-sim) for {sample_key}\")\n",
-    "            ax.set_xlabel(\"Month\")\n",
-    "            ax.set_ylabel(\"Monthly return\")\n",
-    "            ax.legend()\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_histogram_flag:\n",
-    "            sample_key = list(all_raw_returns.keys())[0]\n",
-    "            data = all_raw_returns[sample_key].iloc[:, 0].values * 100.0\n",
-    "            fig, ax = plt.subplots(figsize=(5,4))\n",
-    "            ax.hist(data, bins=30, alpha=0.7)\n",
-    "            ax.set_xlabel(\"Monthly Return (%)\")\n",
-    "            ax.set_ylabel(\"Frequency\")\n",
-    "            ax.set_title(f\"Histogram: {sample_key}\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "        if plot_surface_flag:\n",
-    "            xv = sorted(final_summary[\"SD mult\"].unique())\n",
-    "            configs = final_summary[\"Config\"].unique()\n",
-    "            Z = final_summary.pivot(index=\"SD mult\", columns=\"Config\", values=\"Breach %\").values\n",
-    "            X, Y = np.meshgrid(np.array(range(len(configs))), np.array(xv))\n",
-    "            fig = plt.figure(figsize=(6,5))\n",
-    "            ax3 = fig.add_subplot(111, projection=\"3d\")\n",
-    "            surf = ax3.plot_surface(X, Y, Z, cmap=\"viridis\", edgecolor=\"none\")\n",
-    "            ax3.set_xticks(range(len(configs)))\n",
-    "            ax3.set_xticklabels(configs, rotation=45, ha=\"right\")\n",
-    "            ax3.set_ylabel(\"SD mult\")\n",
-    "            ax3.set_zlabel(\"Breach %\")\n",
-    "            ax3.set_title(\"Surface: Breach vs Config & SD mult\")\n",
-    "            fig.colorbar(surf, shrink=0.5, aspect=5, label=\"Breach %\")\n",
-    "            plt.tight_layout()\n",
-    "            plt.show()\n",
-    "\n",
-    "    else:\n",
-    "        raise RuntimeError(f\"Unexpected analysis mode: '{analysis_mode}'\")"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "828a3d69-ce6a-4a9c-b617-12b9c328b119",
-   "metadata": {},
-   "source": [
-    "# Portable Alpha + Active Extension Model Specification\n",
-    "\n",
-    "Below is a comprehensive description of the updated portable‐alpha + active‐extension model, ready to paste into a Markdown cell. Every section is clearly labeled, and all equations use LaTeX delimiters.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 1. Purpose and High-Level Overview\n",
-    "\n",
-    "**Goal:**  \n",
-    "Construct a Monte Carlo framework that allocates a fixed pool of capital (e.g. \\$1 b) across three “sleeves” (Internal, External Portable-Alpha, and Active Extension), simulates joint returns on Index, In-House α, Extension α, and External PA α, and then reports portfolio metrics (annual return, volatility, VaR, tracking error, breach probability).\n",
-    "\n",
-    "Key innovations vs. a simpler portable-alpha model:  \n",
-    "1. **Separate “reference period”** used to compute index volatility σₙ, which in turn determines the cash/margin needed to synthetically hold 1:1 index exposure.  \n",
-    "2. **Three explicit buckets** whose dollar-amounts sum to \\$ 1 b, avoiding any double-counting of β + α exposures.  \n",
-    "3. **Active Extension bucket** that can be “150/50” or “170/70” long/short, specified by an “Active share (%)” input. By default, we assume 150/50 (i.e. Active share = 50 %) unless the user overrides.\n",
-    "\n",
-    "Everything ultimately flows into a set of formulas—one per bucket—that map monthly draws of\n",
-    "\\[\n",
-    "(r_{\\beta},\\,r_{H},\\,r_{E},\\,r_{M}) \n",
-    "\\quad\\text{and}\\quad\n",
-    "f_t\n",
-    "\\]\n",
-    "into portfolio returns.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 2. Core Assumptions and Variables\n",
-    "\n",
-    "1. **Index (β) returns**  \n",
-    "   - We load a historical time series of monthly total returns on the S&P 500 TR (or whichever index) from a CSV.  \n",
-    "   - We partition that series into:  \n",
-    "     1. A **reference window** (e.g. 2010 – 2014) used to compute “reference volatility” σₙ.  \n",
-    "     2. An **analysis window** (e.g. 2015 – 2020) used to compute the actual mean (μₙ) and volatility (σₙ) that drive our Monte Carlo draws.\n",
-    "\n",
-    "2. **Three α-streams** (simulated jointly with β)  \n",
-    "   - **In-House α** \\($r_H$\\):  \n",
-    "     - Mean = μ_H/12  \n",
-    "     - Vol = σ_H / √12  \n",
-    "     - Correlation ρ_{β,H} with β.  \n",
-    "   - **Extension α** \\($r_E$\\):  \n",
-    "     - Mean = μ_E/12  \n",
-    "     - Vol = σ_E / √12  \n",
-    "     - Correlation ρ_{β,E} with β.  \n",
-    "   - **External PA α** \\($r_M$\\):  \n",
-    "     - Mean = μ_M/12  \n",
-    "     - Vol = σ_M / √12  \n",
-    "     - Correlation ρ_{β,M} with β.\n",
-    "\n",
-    "3. **Financing spread** \\($f_t$\\)  \n",
-    "   - A month-by-month random draw around a drift (financing_mean/12) with vol (financing_vol/12) and occasional jumps of size (spike_factor × (financing_vol/12)), happening with probability spike_prob.  \n",
-    "   - In each month, any bucket that holds \\((r_{\\beta} − f_t)\\) is charged that financing cost.\n",
-    "\n",
-    "4. **Total fund capital** (in millions, default = 1000)  \n",
-    "   - We allocate exactly \\$ 1 b across three buckets (plus any residual “cash-leftover” after margin).\n",
-    "\n",
-    "5. **Standard-deviation multiple** (sd_of_vol_mult, default = 3)  \n",
-    "   - “To hold \\$ 1 b of index exposure, you must keep aside cash = σₙ × (sd_of_vol_mult) × \\$ 1 b.”  \n",
-    "   - That cash is the **internal beta-backing** or “margin cash,” needed for futures/swaps.\n",
-    "\n",
-    "6. **Three capital buckets** (all in \\$ mm, must sum to 1000)  \n",
-    "   1. **External PA capital** \\($X$\\)  \n",
-    "      - Manager takes \\$ X m; buys \\$ X m of index (β) and \\((external_pa_alpha_frac × X m)\\) of α.  \n",
-    "      - Default α fraction = 50 % (\\(\\theta_{\\mathrm{ExtPA}}=0.50\\)).  \n",
-    "   2. **Active Extension capital** \\($Y$\\)  \n",
-    "      - Manager runs a long/short portfolio with **Active share** \\(S\\).  \n",
-    "      - By default, “150/50” means \\(S=0.50\\) (i.e. 150 % long, 50 % short → net 100 %).  \n",
-    "   3. **Internal PA capital** \\($Z$\\)  \n",
-    "      - Runs in-house α; the remainder of internal cash (beyond margin) is used here.\n",
-    "\n",
-    "7. **Internal beta backing** \\($W$\\) (computed, not user-entered)  \n",
-    "   \\[\n",
-    "     W = \\sigma_{\\text{ref}} \\times (\\mathrm{sd\\_of\\_vol\\_mult}) \\times 1000 \\quad (\\text{\\$ mm}).\n",
-    "   \\]\n",
-    "   - That cash sits in reserve to back a \\$ 1 b index position via futures/swaps.  \n",
-    "   - Because the external PA and active-extension managers each hold index exposure “inside” their \\$ X m or \\$ Y m, **you do not hold margin for that portion**. You only hold \\(W\\) for the total \\$ 1 b.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 3. Capital-Allocation Equations\n",
-    "\n",
-    "1. **Check**:  \n",
-    "   \\[\n",
-    "     X + Y + Z \\;=\\; 1000 \\quad(\\text{\\$ mm}),\n",
-    "   \\]  \n",
-    "   where  \n",
-    "   - \\(X = \\text{external\\_pa\\_capital},\\)  \n",
-    "   - \\(Y = \\text{active\\_ext\\_capital},\\)  \n",
-    "   - \\(Z = \\text{internal\\_pa\\_capital}.\\)\n",
-    "\n",
-    "2. **Margin (internal beta backing)**:  \n",
-    "   \\[\n",
-    "     W = \\sigma_{\\text{ref}} \\times (\\mathrm{sd\\_of\\_vol\\_mult}) \\times 1000 \\quad (\\text{\\$ mm}).\n",
-    "   \\]\n",
-    "\n",
-    "3. **Internal cash leftover (runs In-House PA)**:  \n",
-    "   \\[\n",
-    "     \\text{internal\\_cash\\_leftover} \n",
-    "     = 1000 - W - Z \\quad (\\text{\\$ mm}).\n",
-    "   \\]\n",
-    "\n",
-    "   - If \\(W + Z > 1000\\), the capital structure is infeasible (you cannot hold margin + in-house PA + external buckets all on \\$ 1 b).\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 4. Return Equations\n",
-    "\n",
-    "We simulate, for each month \\(t\\):\n",
-    "\n",
-    "\\[\n",
-    "(r_{\\beta,t},\\,r_{H,t},\\,r_{E,t},\\,r_{M,t}) \n",
-    "\\;\\sim\\;\\text{MVN}\\bigl([\\mu_{\\beta},\\,\\mu_H,\\,\\mu_E,\\,\\mu_M],\\,\\Sigma\\bigr),\n",
-    "\\]\n",
-    "with\n",
-    "- \\(\\mu_{\\beta} = \\mu_{\\text{idx}}\\) (monthly mean from analysis window),  \n",
-    "- \\(\\mu_H = \\frac{\\mu_H^{(\\text{annual})}}{12}\\),  \n",
-    "- \\(\\mu_E = \\frac{\\mu_E^{(\\text{annual})}}{12}\\),  \n",
-    "- \\(\\mu_M = \\frac{\\mu_M^{(\\text{annual})}}{12}\\).  \n",
-    "\n",
-    "Covariance \\(\\Sigma\\) built from:  \n",
-    "- \\(\\sigma_{\\beta} = \\sigma_{\\text{ref}}\\) (monthly vol from reference window),  \n",
-    "- \\(\\sigma_H = \\sigma_H^{(\\text{annual})}/\\sqrt{12}\\),  \n",
-    "- \\(\\sigma_E = \\sigma_E^{(\\text{annual})}/\\sqrt{12}\\),  \n",
-    "- \\(\\sigma_M = \\sigma_M^{(\\text{annual})}/\\sqrt{12}\\),  \n",
-    "- Pairwise correlations \\(\\rho_{\\beta,H},\\,\\rho_{\\beta,E},\\,\\rho_{\\beta,M},\\,\\rho_{H,E},\\,\\dots\\).  \n",
-    "\n",
-    "Additionally, each month we draw a financing cost:\n",
-    "\\[\n",
-    "f_t = \\frac{\\text{financing_mean}}{12} + \\varepsilon_t,\\quad\n",
-    "\\varepsilon_t \\sim \\mathcal{N}\\bigl(0,\\;(\\tfrac{\\text{financing_vol}}{12})^2\\bigr),\n",
-    "\\]\n",
-    "with probability \\(\\text{spike_prob}\\) of a jump \\(=\\text{spike_factor} \\times \\frac{\\text{financing_vol}}{12}\\).\n",
-    "\n",
-    "---\n",
-    "\n",
-    "### 4.1. Base (All In-House) Strategy\n",
-    "\n",
-    "\\[\n",
-    "R_{\\text{Base},t}\n",
-    "= \\; (r_{\\beta,t} - f_t)\\,\\times\\,w_{\\beta_H}\n",
-    "\\;+\\; r_{H,t}\\,\\times\\,w_{\\alpha_H}.\n",
-    "\\]\n",
-    "By default, \\(w_{\\beta_H} = 0.50\\) and \\(w_{\\alpha_H} = 0.50\\).\n",
-    "\n",
-    "---\n",
-    "\n",
-    "### 4.2. External PA Strategy\n",
-    "\n",
-    "- Capital allocated: \\(X = \\text{external_pa_capital}\\).  \n",
-    "- Manager buys \\$ X m of index (β) and allocates \\(\\theta_{\\mathrm{ExtPA}} = \\text{external_pa_alpha_frac}\\) of that \\$ X m to α.  \n",
-    "\n",
-    "Return formula:\n",
-    "\\[\n",
-    "R_{\\text{ExtPA},t}\n",
-    "= \\underbrace{\\frac{X}{1000}}_{w_{\\beta}^{\\text{ExtPA}}}\\,(r_{\\beta,t} - f_t)\n",
-    "\\;+\\;\\underbrace{\\tfrac{X}{1000} \\,\\times\\,\\theta_{\\mathrm{ExtPA}}}_{w_{\\alpha}^{\\text{ExtPA}}}\\;(r_{M,t}).\n",
-    "\\]\n",
-    "- If \\(\\theta_{\\mathrm{ExtPA}} = 0.50\\), then half of \\$ X m is alpha, half is index.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "### 4.3. Active Extension Strategy\n",
-    "\n",
-    "- Capital allocated: \\(Y = \\text{active_ext_capital}\\).  \n",
-    "- Manager runs a long/short portfolio with **Active share** \\(S = \\frac{\\text{active_share_percent}}{100}\\).  \n",
-    "  - E.g. 150/50 → \\(S = 0.50\\).  \n",
-    "  - 170/70 → \\(S = 0.70\\).\n",
-    "\n",
-    "Return formula:\n",
-    "\\[\n",
-    "R_{\\text{ActExt},t}\n",
-    "= \\underbrace{\\frac{Y}{1000}}_{w_{\\beta}^{\\text{ActExt}}}\\,(r_{\\beta,t} - f_t)\n",
-    "\\;+\\;\\underbrace{\\frac{Y}{1000}\\,\\times\\,S}_{w_{\\alpha}^{\\text{ActExt}}}\\;(r_{E,t}).\n",
-    "\\]\n",
-    "- The manager’s long/short is embedded in \\(r_{E,t}\\).  \n",
-    "\n",
-    "---\n",
-    "\n",
-    "### 4.4. Internal Margin & Internal PA\n",
-    "\n",
-    "Because both external PA and active-extension managers hold their own index exposure, on your books you only need to hold margin for a single \\$ 1 b of index. That is:\n",
-    "\\[\n",
-    "W = \\sigma_{\\text{ref}} \\times (\\mathrm{sd\\_of\\_vol\\_mult}) \\times 1000 \\quad (\\text{\\$ mm}).\n",
-    "\\]\n",
-    "Then you also decide to run \\(Z = \\text{internal_pa_capital}\\) in-house PA:\n",
-    "\n",
-    "- **Internal Beta (margin):**  \n",
-    "  \\[\n",
-    "  R_{\\text{IntBet},t}\n",
-    "  = \\Bigl(\\tfrac{W}{1000}\\Bigr)\\,(r_{\\beta,t} - f_t).\n",
-    "  \\]\n",
-    "- **Internal PA alpha:**  \n",
-    "  \\[\n",
-    "  R_{\\text{IntPA},t}\n",
-    "  = \\Bigl(\\tfrac{Z}{1000}\\Bigr)\\,(r_{H,t}).\n",
-    "  \\]\n",
-    "- **Internal cash leftover:**  \n",
-    "  \\[\n",
-    "  \\text{internal\\_cash\\_leftover} = 1000 - W - Z \\quad (\\text{if positive, earns 0}).\n",
-    "  \\]\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 5. Putting It All Together in Simulation\n",
-    "\n",
-    "1. **Read user inputs** (via `load_parameters()`):\n",
-    "   - Dates: `start_date`, `end_date`, `ref_start_date`, `ref_end_date`\n",
-    "   - Vol/risk: `sd_of_vol_mult`\n",
-    "   - Returns: `financing_mean`, `financing_vol`, `μ_H`, `σ_H`, `μ_E`, `σ_E`, `μ_M`, `σ_M`\n",
-    "   - Correlations: `ρ_{β,H}`, `ρ_{β,E}`, `ρ_{β,M}`, `ρ_{H,E}`, `ρ_{H,M}`, `ρ_{E,M}`\n",
-    "   - Capital buckets: `external_pa_capital`, `external_pa_alpha_frac`, `active_ext_capital`, `active_share_percent`, `internal_pa_capital`\n",
-    "   - Total fund capital (mm): default = 1000\n",
-    "\n",
-    "2. **Load index CSV** → `idx_full` (monthly total returns).\n",
-    "\n",
-    "3. **Filter**  \n",
-    "   - **`idx_series`** = `idx_full[ start_date : end_date ]` → used for μ_β and σ_β.  \n",
-    "   - **`idx_ref`** = `idx_full[ ref_start_date : ref_end_date ]` → used for σ_ref.\n",
-    "\n",
-    "4. **Compute**  \n",
-    "   \\[\n",
-    "     \\mu_{\\beta} = \\mathrm{mean}(idx\\_series), \n",
-    "     \\quad\n",
-    "     \\sigma_{\\beta} = \\mathrm{std}(idx\\_series),\n",
-    "     \\quad\n",
-    "     \\sigma_{\\text{ref}} = \\mathrm{std}(idx\\_ref).\n",
-    "   \\]\n",
-    "\n",
-    "5. **Margin-backing**  \n",
-    "   \\[\n",
-    "     W = \\sigma_{\\text{ref}} \\times \\mathrm{sd\\_of\\_vol\\_mult} \\times 1000.\n",
-    "   \\]\n",
-    "   If \\(W + Z > 1000\\), error. Else compute\n",
-    "   \\[\n",
-    "     \\text{internal\\_cash\\_leftover} = 1000 - W - Z.\n",
-    "   \\]\n",
-    "\n",
-    "6. **Build covariance matrix** \\(\\Sigma\\) for \\((r_{\\beta}, r_H, r_E, r_M)\\) using  \n",
-    "   \\(\\sigma_{\\beta} = \\sigma_{\\text{ref}},\\; \\sigma_H = \\frac{\\sigma_H^{(\\text{annual})}}{\\sqrt{12}},\\; \\sigma_E = \\frac{\\sigma_E^{(\\text{annual})}}{\\sqrt{12}},\\; \\sigma_M = \\frac{\\sigma_M^{(\\text{annual})}}{\\sqrt{12}},\\)  \n",
-    "   and correlations.\n",
-    "\n",
-    "7. **Monte Carlo draws**:  \n",
-    "   For each of \\(N_{\\text{SIMULATIONS}}\\) trials, simulate a \\(T=N_{\\text{MONTHS}}\\)-month path of \\(\\,(r_{\\beta,t},\\,r_{H,t},\\,r_{E,t},\\,r_{M,t})\\) and financing \\(f_t\\).\n",
-    "\n",
-    "8. **Compute monthly returns** for each bucket:\n",
-    "   - **Base**:  \n",
-    "     \\[\n",
-    "       R_{\\text{Base},t} \n",
-    "       = (r_{\\beta,t} - f_t)\\,w_{\\beta_H} \\;+\\; r_{H,t}\\,w_{\\alpha_H}.\n",
-    "     \\]\n",
-    "   - **External PA**:  \n",
-    "     \\[\n",
-    "       R_{\\text{ExtPA},t} \n",
-    "       = \\bigl(\\tfrac{X}{1000}\\bigr)(r_{\\beta,t} - f_t) \n",
-    "       \\;+\\; \\bigl(\\tfrac{X}{1000}\\,\\theta_{\\mathrm{ExtPA}}\\bigr)(r_{M,t}).\n",
-    "     \\]\n",
-    "   - **Active Extension**:  \n",
-    "     \\[\n",
-    "       R_{\\text{ActExt},t} \n",
-    "       = \\bigl(\\tfrac{Y}{1000}\\bigr)(r_{\\beta,t} - f_t) \n",
-    "       \\;+\\; \\bigl(\\tfrac{Y}{1000}\\,S\\bigr)(r_{E,t}).\n",
-    "     \\]\n",
-    "   - **Internal Beta**:  \n",
-    "     \\[\n",
-    "       R_{\\text{IntBet},t} \n",
-    "       = \\bigl(\\tfrac{W}{1000}\\bigr)(r_{\\beta,t} - f_t).\n",
-    "     \\]\n",
-    "   - **Internal PA α**:  \n",
-    "     \\[\n",
-    "       R_{\\text{IntPA},t} \n",
-    "       = \\bigl(\\tfrac{Z}{1000}\\bigr)(r_{H,t}).\n",
-    "     \\]\n",
-    "\n",
-    "   Note: We only report three portfolios—“Base,” “ExternalPA,” and “ActiveExt.” Each one compounds its own monthly returns for a 12-month horizon:\n",
-    "   \\[\n",
-    "     R_{\\text{bucket}}^{\\text{(year)}} \n",
-    "     = \\prod_{t=1}^{12} (1 + R_{\\text{bucket},t}) - 1.\n",
-    "   \\]\n",
-    "\n",
-    "9. **Compute performance metrics** for each portfolio’s annual returns:\n",
-    "   - **Ann Return** = sample mean.  \n",
-    "   - **Ann Vol** = sample standard deviation.  \n",
-    "   - **VaR 95%** = 5th percentile.  \n",
-    "   - **Tracking Error** = std of (bucket_return − index_return).  \n",
-    "   - **Breach Probability** = % of months (in the first sim path) where \\((r_{\\text{bucket},t} < -\\,\\mathrm{buffer\\_multiple}\\times\\sigma_{\\beta})\\).\n",
-    "\n",
-    "10. **Export**  \n",
-    "    - **Inputs sheet:** all parameters (dates, vol caps, bucket sizes, α fractions, active share, σ_ref, W, internal cash leftover, etc.).  \n",
-    "    - **Summary sheet:** metrics for “Base,” “ExternalPA,” and “ActiveExt.”  \n",
-    "    - **Raw returns sheets:** monthly paths for each bucket (first simulation) so users can inspect breach months.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 6. Input Parameters Summary\n",
-    "\n",
-    "Below is a consolidated list of every input variable that must appear in the “friendly” CSV:\n",
-    "\n",
-    "1. **Date ranges**  \n",
-    "   - `Start date` → `start_date` (analysis window begin).  \n",
-    "   - `End date` → `end_date` (analysis window end).  \n",
-    "   - `Reference start date` → `ref_start_date` (for σ_ref).  \n",
-    "   - `Reference end date` → `ref_end_date` (for σ_ref).  \n",
-    "\n",
-    "2. **Financing parameters**  \n",
-    "   - `Annual financing mean (%)` → `financing_mean_annual` (default = 0.50 %).  \n",
-    "   - `Annual financing vol (%)` → `financing_vol_annual` (default = 0.10 %).  \n",
-    "   - `Monthly spike probability` → `spike_prob` (default = 2 %).  \n",
-    "   - `Spike size (σ × multiplier)` → `spike_factor` (default = 2.25).  \n",
-    "\n",
-    "3. **In-House PA parameters**  \n",
-    "   - `In-House annual return (%)` → `mu_H` (default = 4.00 %).  \n",
-    "   - `In-House annual vol (%)` → `sigma_H` (default = 1.00 %).  \n",
-    "   - `In-House β` → `w_beta_H` (default = 0.50).  \n",
-    "   - `In-House α` → `w_alpha_H` (default = 0.50).  \n",
-    "\n",
-    "4. **Extension α parameters**  \n",
-    "   - `Alpha-Extension annual return (%)` → `mu_E` (default = 5.00 %).  \n",
-    "   - `Alpha-Extension annual vol (%)` → `sigma_E` (default = 2.00 %).  \n",
-    "   - `Active Extension capital (mm)` → `active_ext_capital` (default = 0).  \n",
-    "   - `Active share (%)` → `active_share_percent` (default = 50 % ⇒ a 150/50 program).  \n",
-    "\n",
-    "5. **External PA α parameters**  \n",
-    "   - `External annual return (%)` → `mu_M` (default = 3.00 %).  \n",
-    "   - `External annual vol (%)` → `sigma_M` (default = 2.00 %).  \n",
-    "   - `External PA capital (mm)` → `external_pa_capital` (default = 0).  \n",
-    "   - `External PA α fraction (%)` → `external_pa_alpha_frac` (default = 50 %).  \n",
-    "\n",
-    "6. **Correlations**  \n",
-    "   - `Corr index–In-House` → `rho_idx_H` (default = 0.05).  \n",
-    "   - `Corr index–Alpha-Extension` → `rho_idx_E` (default = 0.00).  \n",
-    "   - `Corr index–External` → `rho_idx_M` (default = 0.00).  \n",
-    "   - `Corr In-House–Alpha-Extension` → `rho_H_E` (default = 0.10).  \n",
-    "   - `Corr In-House–External` → `rho_H_M` (default = 0.10).  \n",
-    "   - `Corr Alpha-Extension–External` → `rho_E_M` (default = 0.00).  \n",
-    "\n",
-    "7. **Capital & risk backing**  \n",
-    "   - `Total fund capital (mm)` → `total_fund_capital` (default = 1000).  \n",
-    "   - `Standard deviation multiple` → `sd_of_vol_mult` (default = 3).  \n",
-    "   - `Internal PA capital (mm)` → `internal_pa_capital` (default = 0).  \n",
-    "   - `Buffer multiple` → `buffer_multiple` (default = 3).  \n",
-    "\n",
-    "8. **Legacy/Optional**  \n",
-    "   - `X grid (mm)` → `X_grid_list` (list of X values).  \n",
-    "   - `External manager α fractions` → `EM_thetas_list`.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 7. Output Considerations\n",
-    "\n",
-    "1. **Inputs sheet (Excel):**  \n",
-    "   List every single parameter, including:  \n",
-    "   - Date windows (analysis and reference),  \n",
-    "   - Financing parameters,  \n",
-    "   - α-stream parameters,  \n",
-    "   - Correlations,  \n",
-    "   - Capital buckets (X, Y, Z),  \n",
-    "   - SD multiple, margin backing \\(W\\), internal cash leftover,  \n",
-    "   - Active share, etc.\n",
-    "\n",
-    "2. **Summary sheet (Excel):**  \n",
-    "   For each portfolio (“Base,” “ExternalPA,” “ActiveExt”), show:  \n",
-    "   - Annual Return (%),  \n",
-    "   - Annual Volatility (%),  \n",
-    "   - 95 % VaR (%),  \n",
-    "   - Tracking Error (%),  \n",
-    "   - Breach Probability (%).\n",
-    "\n",
-    "3. **Raw returns sheets (Excel):**  \n",
-    "   Monthly paths for each bucket (first simulation), so users can inspect “breach” months where \\(R_{t} < -(\\text{buffer_multiple} × σ_{\\beta})\\).\n",
-    "\n",
-    "4. **Console output:**  \n",
-    "   A “human‐friendly” summary, e.g.:  \n",
-    "   > For “ExternalPA (X = 300, 50 % α)”:  \n",
-    "   > • Expected annual return: 10.2 %  \n",
-    "   > • Annual volatility: 12.3 %  \n",
-    "   > • 95 % VaR: −3.4 %  \n",
-    "   > • Tracking error: 8.7 %  \n",
-    "   > • Breach probability: 2.0 %.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 8. Intuition Behind Key Pieces\n",
-    "\n",
-    "1. **Why a separate reference period?**  \n",
-    "   - If you measure index volatility over the same window you analyze (e.g. 2015–2020), you capture “current regime” vol. Often, managers prefer a longer/different window (e.g. 2010–2014) to gauge typical funding volatility. That reference σₙ, times a multiple (e.g. 3×), tells you how much cash to set aside to back \\$ 1 b of index exposure.\n",
-    "\n",
-    "2. **Why Active share as a percentage?**  \n",
-    "   - A “150/50” program has 150 % long and 50 % short = net 100 %. Its “active share” is reported as 50 %.  \n",
-    "   - If you want “170/70,” then active share = 70 %.  \n",
-    "   - The code converts “Active share (%)” to decimal \\(S\\). For a 150/50 program, the default is 50 % (\\(S = 0.50\\)).\n",
-    "\n",
-    "3. **Why each bucket’s formula ensures no double-counting**  \n",
-    "   - Whenever you give \\$ X m to External PA, that manager holds the index exposure on your behalf. You do not hold margin for that portion. Similarly, the Active Extension manager holds their own index.  \n",
-    "   - On your books, you only need to hold margin for a single \\$ 1 b index. That is \\(W\\).  \n",
-    "   - Once you hand \\$ X m to external PA and \\$ Y m to active ext, **both managers** hold \\((X + Y)\\) of index on your behalf. So your margin \\(W\\) backs the *entire* \\$ 1 b, not just the “leftover” portion.\n",
-    "\n",
-    "---\n",
-    "\n",
-    "## 9. Step-by-Step Implementation Checklist\n",
-    "\n",
-    "1. **Read and parse user parameters** (dates, vols, α fractions, active share, capital buckets, etc.).  \n",
-    "2. **Load index CSV** → `idx_full`.  \n",
-    "3. **Filter** → `idx_ref` for σ_ref; `idx_series` for μ_β and σ_β.  \n",
-    "4. **Compute**:  \n",
-    "   \\[\n",
-    "     μ_β = \\mathrm{mean}(idx\\_series), \n",
-    "     \\quad\n",
-    "     σ_β = \\mathrm{std}(idx\\_series), \n",
-    "     \\quad\n",
-    "     σ_{\\text{ref}} = \\mathrm{std}(idx\\_ref).\n",
-    "   \\]\n",
-    "5. **Margin-backing**:  \n",
-    "   \\[\n",
-    "     W = σ_{\\text{ref}} × (\\mathrm{sd\\_of\\_vol\\_mult}) × 1000.\n",
-    "   \\]\n",
-    "   Check \\(W + Z ≤ 1000\\). Compute leftover internal cash = \\(1000 - W - Z\\).\n",
-    "\n",
-    "6. **Build covariance matrix** using \\((σ_{\\text{ref}},\\,σ_H/√{12},\\,σ_E/√{12},\\,σ_M/√{12})\\) plus correlations.\n",
-    "\n",
-    "7. **Monte Carlo draws**:  \n",
-    "   For each of \\(N_{\\mathrm{SIM}}\\) trials, simulate a path of length \\(T = N_{\\mathrm{MONTHS}}\\) for \\((r_{\\beta,t},\\,r_{H,t},\\,r_{E,t},\\,r_{M,t})\\) and financing \\(f_t\\).\n",
-    "\n",
-    "8. **Compute monthly returns**:\n",
-    "   - **Base**:  \n",
-    "     \\[\n",
-    "       R_{\\text{Base},t} = (r_{\\beta,t} - f_t)\\,w_{\\beta_H} + r_{H,t}\\,w_{\\alpha_H}.\n",
-    "     \\]\n",
-    "   - **External PA**:  \n",
-    "     \\[\n",
-    "       R_{\\text{ExtPA},t}\n",
-    "       = \\Bigl(\\tfrac{X}{1000}\\Bigr)(r_{\\beta,t} - f_t)\n",
-    "       \\;+\\;\\Bigl(\\tfrac{X}{1000}\\,\\theta_{\\mathrm{ExtPA}}\\Bigr)(r_{M,t}).\n",
-    "     \\]\n",
-    "   - **Active Extension**:  \n",
-    "     \\[\n",
-    "       R_{\\text{ActExt},t}\n",
-    "       = \\Bigl(\\tfrac{Y}{1000}\\Bigr)(r_{\\beta,t} - f_t)\n",
-    "       \\;+\\;\\Bigl(\\tfrac{Y}{1000}\\,S\\Bigr)(r_{E,t}).\n",
-    "     \\]\n",
-    "   - **Internal Beta**:  \n",
-    "     \\[\n",
-    "       R_{\\text{IntBet},t} \n",
-    "       = \\Bigl(\\tfrac{W}{1000}\\Bigr)(r_{\\beta,t} - f_t).\n",
-    "     \\]\n",
-    "   - **Internal PA α**:  \n",
-    "     \\[\n",
-    "       R_{\\text{IntPA},t} \n",
-    "       = \\Bigl(\\tfrac{Z}{1000}\\Bigr)(r_{H,t}).\n",
-    "     \\]\n",
-    "\n",
-    "9. **Aggregate monthly → annual returns** for “Base,” “ExternalPA,” “ActiveExt.”  \n",
-    "10. **Compute metrics**:  \n",
-    "    - Ann Return, Ann Vol, VaR 95, Tracking Error, Breach Probability.  \n",
-    "11. **Export** Inputs, Summary, Raw returns to Excel + print narrative.\n",
-    "\n",
-    "---"
-   ]
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python (base)",
-   "language": "python",
-   "name": "base"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.12.2"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
diff --git a/.ipynb_checkpoints/Portable_Alpha_Visualizations-checkpoint.py b/.ipynb_checkpoints/Portable_Alpha_Visualizations-checkpoint.py
deleted file mode 100644
index af9c034d32002dcec33f6d54f8c0de0ffc572a8d..0000000000000000000000000000000000000000
--- a/.ipynb_checkpoints/Portable_Alpha_Visualizations-checkpoint.py
+++ /dev/null
@@ -1,2234 +0,0 @@
-#!/usr/bin/env python
-# coding: utf-8
-
-# **_🚨 IMPORTANT: BEFORE RUNNING THE PROGRAM, SAVE THIS SHEET AS A CSV FILE! 🚨_**
-# 
-# import pandas as pd
-# 
-# rows = [
-#     ("Parameter", "Value", "Notes"),  # Header row
-#     ("Analysis mode", "", "Choose one: capital, returns, alpha_shares, vol_mult"),
-#     # Capital mode
-#     ("Max external combined (%)", "", "capital mode: max % for (External PA + Active Ext)"),
-#     ("External step size (%)", "", "capital mode: increment for external %"),
-#     # Fixed capital (for returns / alpha_shares / vol_mult)
-#     ("External PA capital (mm)", "", "returns/alpha_shares/vol_mult modes: allocation in mm"),
-#     ("Active Extension capital (mm)", "", ""),
-#     ("Internal PA capital (mm)", "", ""),
-#     # Returns mode ranges (min/max/step)
-#     ("In-House return min (%)", "", "returns mode"),
-#     ("In-House return max (%)", "", ""),
-#     ("In-House return step (%)", "", ""),
-#     ("In-House vol min (%)", "", "returns mode"),
-#     ("In-House vol max (%)", "", ""),
-#     ("In-House vol step (%)", "", ""),
-#     ("Alpha-Extension return min (%)", "", "returns mode"),
-#     ("Alpha-Extension return max (%)", "", ""),
-#     ("Alpha-Extension return step (%)", "", ""),
-#     ("Alpha-Extension vol min (%)", "", "returns mode"),
-#     ("Alpha-Extension vol max (%)", "", ""),
-#     ("Alpha-Extension vol step (%)", "", ""),
-#     ("External return min (%)", "", "returns mode"),
-#     ("External return max (%)", "", ""),
-#     ("External return step (%)", "", ""),
-#     ("External vol min (%)", "", "returns mode"),
-#     ("External vol max (%)", "", ""),
-#     ("External vol step (%)", "", ""),
-#     # Alpha_Shares mode ranges
-#     ("External PA α fraction min (%)", "", "alpha_shares mode"),
-#     ("External PA α fraction max (%)", "", ""),
-#     ("External PA α fraction step (%)", "", ""),
-#     ("Active share min (%)", "", "alpha_shares mode"),
-#     ("Active share max (%)", "", ""),
-#     ("Active share step (%)", "", ""),
-#     # Vol_Mult mode ranges
-#     ("SD multiple min", "", "vol_mult mode"),
-#     ("SD multiple max", "", ""),
-#     ("SD multiple step", "", ""),
-#     # Financing & overrides
-#     ("Annual financing mean (%)", "", "global financing"),
-#     ("Annual financing vol (%)", "", ""),
-#     ("Monthly spike probability", "", ""),
-#     ("Spike size (σ × multiplier)", "", ""),
-#     ("Internal financing mean (%)", "", "internal override"),
-#     ("Internal financing vol (%)", "", ""),
-#     ("Internal monthly spike probability", "", ""),
-#     ("Internal spike size (σ × multiplier)", "", ""),
-#     ("External PA financing mean (%)", "", "ext PA override"),
-#     ("External PA financing vol (%)", "", ""),
-#     ("External PA monthly spike probability", "", ""),
-#     ("External PA spike size (σ × multiplier)", "", ""),
-#     ("Active Extension financing mean (%)", "", "active ext override"),
-#     ("Active Extension financing vol (%)", "", ""),
-#     ("Active Extension monthly spike probability", "", ""),
-#     ("Active Extension spike size (σ × multiplier)", "", ""),
-#     # Alpha stream fallbacks
-#     ("In-House annual return (%)", "", "fallback if no range"),
-#     ("In-House annual vol (%)", "", ""),
-#     ("Alpha-Extension annual return (%)", "", ""),
-#     ("Alpha-Extension annual vol (%)", "", ""),
-#     ("External annual return (%)", "", ""),
-#     ("External annual vol (%)", "", ""),
-#     # Correlations
-#     ("Corr index–In-House", "", ""),
-#     ("Corr index–Alpha-Extension", "", ""),
-#     ("Corr index–External", "", ""),
-#     ("Corr In-House–Alpha-Extension", "", ""),
-#     ("Corr In-House–External", "", ""),
-#     ("Corr Alpha-Extension–External", "", ""),
-#     # Buffer multiple & total capital
-#     ("Buffer multiple", "", "cash‐buffer multiple"),
-#     ("Total fund capital (mm)", "", "total fund size in mm")
-# ]
-# 
-# # Build DataFrame and save
-# df_template = pd.DataFrame(rows, columns=["Parameter", "Value", "Notes"])
-# file_path = "/mnt/data/parameters_template.xlsx"
-# df_template.to_excel(file_path, index=False)
-# print(f"Created template: {file_path}")
-# 
-
-# In[12]:
-
-
-# portable_alpha_model.py
-
-import sys
-import csv
-import numpy as np
-import pandas as pd
-from pathlib import Path
-import tkinter as tk
-from tkinter import filedialog
-import openpyxl
-import matplotlib.pyplot as plt
-from mpl_toolkits.mplot3d import Axes3D  # noqa: F401
-
-# =============================================================================
-# 1. MAPPING: User-friendly labels → Internal variable names
-# =============================================================================
-
-LABEL_MAP = {
-    "Analysis mode":                           "analysis_mode",
-    # Capital mode inputs
-    "Max external combined (%)":               "max_external_combined_percent",
-    "External step size (%)":                  "external_step_size_percent",
-    # Fixed-capital (for non-capital modes)
-    "External PA capital (mm)":                "external_pa_capital",
-    "Active Extension capital (mm)":           "active_ext_capital",
-    "Internal PA capital (mm)":                "internal_pa_capital",
-    # Returns mode ranges
-    "In-House return min (%)":                 "mu_H_min",
-    "In-House return max (%)":                 "mu_H_max",
-    "In-House return step (%)":                "mu_H_step",
-    "In-House vol min (%)":                    "sigma_H_min",
-    "In-House vol max (%)":                    "sigma_H_max",
-    "In-House vol step (%)":                   "sigma_H_step",
-    "Alpha-Extension return min (%)":          "mu_E_min",
-    "Alpha-Extension return max (%)":          "mu_E_max",
-    "Alpha-Extension return step (%)":         "mu_E_step",
-    "Alpha-Extension vol min (%)":             "sigma_E_min",
-    "Alpha-Extension vol max (%)":             "sigma_E_max",
-    "Alpha-Extension vol step (%)":            "sigma_E_step",
-    "External return min (%)":                 "mu_M_min",
-    "External return max (%)":                 "mu_M_max",
-    "External return step (%)":                "mu_M_step",
-    "External vol min (%)":                    "sigma_M_min",
-    "External vol max (%)":                    "sigma_M_max",
-    "External vol step (%)":                   "sigma_M_step",
-    # Alpha_Shares mode ranges
-    "External PA α fraction min (%)":          "external_pa_alpha_frac_min",
-    "External PA α fraction max (%)":          "external_pa_alpha_frac_max",
-    "External PA α fraction step (%)":         "external_pa_alpha_frac_step",
-    "Active share min (%)":                    "active_share_min",
-    "Active share max (%)":                    "active_share_max",
-    "Active share step (%)":                   "active_share_step",
-    # Vol_Mult mode range
-    "SD multiple min":                         "sd_of_vol_mult_min",
-    "SD multiple max":                         "sd_of_vol_mult_max",
-    "SD multiple step":                        "sd_of_vol_mult_step",
-    # Financing & bucket overrides
-    "Annual financing mean (%)":               "financing_mean_annual",
-    "Annual financing vol (%)":                "financing_vol_annual",
-    "Monthly spike probability":               "spike_prob",
-    "Spike size (σ × multiplier)":             "spike_factor",
-    "Internal financing mean (%)":             "internal_financing_mean_annual",
-    "Internal financing vol (%)":              "internal_financing_vol_annual",
-    "Internal monthly spike probability":      "internal_spike_prob",
-    "Internal spike size (σ × multiplier)":    "internal_spike_factor",
-    "External PA financing mean (%)":          "ext_pa_financing_mean_annual",
-    "External PA financing vol (%)":           "ext_pa_financing_vol_annual",
-    "External PA monthly spike probability":   "ext_pa_spike_prob",
-    "External PA spike size (σ × multiplier)": "ext_pa_spike_factor",
-    "Active Extension financing mean (%)":     "act_ext_financing_mean_annual",
-    "Active Extension financing vol (%)":      "act_ext_financing_vol_annual",
-    "Active Extension monthly spike probability":"act_ext_spike_prob",
-    "Active Extension spike size (σ × multiplier)":"act_ext_spike_factor",
-    # Fallback alpha stream defaults
-    "In-House annual return (%)":              "mu_H",
-    "In-House annual vol (%)":                 "sigma_H",
-    "Alpha-Extension annual return (%)":       "mu_E",
-    "Alpha-Extension annual vol (%)":          "sigma_E",
-    "External annual return (%)":              "mu_M",
-    "External annual vol (%)":                 "sigma_M",
-    # Correlations
-    "Corr index–In-House":                     "rho_idx_H",
-    "Corr index–Alpha-Extension":              "rho_idx_E",
-    "Corr index–External":                     "rho_idx_M",
-    "Corr In-House–Alpha-Extension":           "rho_H_E",
-    "Corr In-House–External":                  "rho_H_M",
-    "Corr Alpha-Extension–External":            "rho_E_M",
-    # Other risk controls
-    "Buffer multiple":                         "buffer_multiple",
-    "Total fund capital (mm)":                 "total_fund_capital",
-    # Visualization toggles
-    "Plot heatmap":                            "plot_heatmap",
-    "Plot line":                               "plot_line",
-    "Plot boxplot":                            "plot_boxplot",
-    "Plot scatter":                            "plot_scatter",
-    "Plot time series":                        "plot_time_series",
-    "Plot histogram":                          "plot_histogram",
-    "Plot surface":                            "plot_surface",
-}
-
-# =============================================================================
-# 2. FILE‐PICKER FOR CSV SELECTION
-# =============================================================================
-
-def select_csv_file():
-    """
-    Pop up a file‐picker dialog so the user can choose a CSV file.
-    Returns a pathlib.Path to the selected file.
-    Raises FileNotFoundError if the user cancels.
-    """
-    root = tk.Tk()
-    root.withdraw()
-    file_path = filedialog.askopenfilename(
-        title="Select CSV File",
-        filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
-    )
-    root.destroy()
-    if not file_path:
-        raise FileNotFoundError("No file selected.")
-    return Path(file_path)
-
-# =============================================================================
-# 3. LOAD PARAMETERS USING MAPPING
-# =============================================================================
-
-def load_parameters(csv_filepath, label_map):
-    """
-    Read a CSV that may have leading instruction rows, then a header row "Parameter,Value".
-    Skip all rows until the header, then parse friendly labels → internal names via label_map.
-    Returns a dict {internal_var_name: parsed_value}.
-    """
-    params = {}
-    lines = Path(csv_filepath).read_text(encoding="utf-8").splitlines()
-    header_idx = None
-    for i, line in enumerate(lines):
-        if line.strip().startswith("Parameter,"):
-            header_idx = i
-            break
-
-    if header_idx is None:
-        raise ValueError(f"No header row starting with 'Parameter,' found in {csv_filepath}")
-
-    header_and_data = lines[header_idx:]
-    reader = csv.DictReader(header_and_data)
-
-    for row in reader:
-        friendly_key = row.get("Parameter", "").strip()
-        if not friendly_key or friendly_key not in label_map:
-            continue
-
-        internal_key = label_map[friendly_key]
-        raw_val = row.get("Value", "").strip()
-
-        # If semicolon is present, parse as a list (legacy fallback)
-        if ";" in raw_val:
-            parts = [p.strip() for p in raw_val.split(";") if p.strip() != ""]
-            parsed_list = []
-            for p in parts:
-                try:
-                    if "." in p:
-                        parsed_list.append(float(p))
-                    else:
-                        parsed_list.append(int(p))
-                except ValueError:
-                    parsed_list.append(p)
-            params[internal_key] = parsed_list
-        else:
-            # Try int → float → string
-            try:
-                params[internal_key] = int(raw_val)
-            except ValueError:
-                try:
-                    params[internal_key] = float(raw_val)
-                except ValueError:
-                    # Could be blank string; store as-is
-                    params[internal_key] = raw_val
-
-    return params
-
-# =============================================================================
-# 4. UTILITY: “SAFE GET” FOR NUMERIC PARAMETERS
-# =============================================================================
-
-def get_num(raw_params, key, default):
-    """
-    Return raw_params[key] if it's already int or float; otherwise default.
-    """
-    v = raw_params.get(key, None)
-    if isinstance(v, (int, float)):
-        return v
-    return default
-
-# =============================================================================
-# 5. HELPER FUNCTIONS TO BUILD RANGES OR FALLBACK TO MIDPOINT
-# =============================================================================
-
-def build_range(key_base, default_midpoint):
-    """
-    If raw_params contains key_base_min & key_base_max (and optionally key_base_step),
-    return a list of decimals from min→max (in steps).
-    Otherwise, if key_base_list exists (legacy semicolon list), return that.
-    Else, return [default_midpoint].
-    We divide by 100 because these are “percent” inputs.
-    """
-    k_min  = get_num(raw_params, f"{key_base}_min", None)
-    k_max  = get_num(raw_params, f"{key_base}_max", None)
-    k_step = get_num(raw_params, f"{key_base}_step", None)
-
-    if (k_min is not None) and (k_max is not None):
-        step = k_step if (k_step is not None) else (k_max - k_min)
-        if step <= 0:
-            raise RuntimeError(f"Step for '{key_base}' must be positive.")
-        start = k_min / 100.0
-        stop  = k_max / 100.0
-        stepd = step / 100.0
-        arr = np.arange(start, stop + 1e-9, stepd)
-        return list(arr)
-
-    # Legacy semicolon‐list fallback
-    flat_list = raw_params.get(f"{key_base}_list", None)
-    if isinstance(flat_list, list):
-        return flat_list
-
-    return [default_midpoint]
-
-def build_range_int(key_base, default_midpoint):
-    """
-    Like build_range but for integer inputs (e.g. SD multiple).
-    If key_base_min & key_base_max exist, return list(range(min, max+1, step)).
-    Else if key_base_list exists, return it. Else [default_midpoint].
-    """
-    k_min  = get_num(raw_params, f"{key_base}_min", None)
-    k_max  = get_num(raw_params, f"{key_base}_max", None)
-    k_step = get_num(raw_params, f"{key_base}_step", None)
-
-    if (k_min is not None) and (k_max is not None):
-        step = k_step if (k_step is not None) else (k_max - k_min)
-        if step <= 0:
-            raise RuntimeError(f"Step for '{key_base}' must be positive.")
-        return list(range(k_min, k_max + 1, step))
-
-    flat_list = raw_params.get(f"{key_base}_list", None)
-    if isinstance(flat_list, list):
-        return flat_list
-
-    return [default_midpoint]
-
-# =============================================================================
-# 6. HELPER TO LOAD INDEX RETURNS
-# =============================================================================
-
-def load_index_returns(csv_path):
-    """
-    Load a CSV of monthly index returns into a pandas Series.
-    Expects columns: "Date" and either "Monthly_TR" or "Return".
-    Returns a pd.Series indexed by Date (datetime).
-    """
-    csv_path = Path(csv_path)
-    if not csv_path.exists() or not csv_path.is_file():
-        raise FileNotFoundError(f"Index CSV not found at {csv_path}")
-    df = pd.read_csv(csv_path, parse_dates=["Date"])
-    if "Date" not in df.columns:
-        raise ValueError(f"'Date' column is missing from {csv_path}")
-    if "Monthly_TR" in df.columns:
-        col = "Monthly_TR"
-    elif "Return" in df.columns:
-        col = "Return"
-    else:
-        raise ValueError(f"CSV must contain 'Monthly_TR' or 'Return'; found: {df.columns.tolist()}")
-
-    df = df.sort_values("Date").reset_index(drop=True)
-    df.set_index("Date", inplace=True)
-    series = df[col].dropna().copy()
-    series.index = pd.to_datetime(series.index)
-    return series
-
-# =============================================================================
-# 7. SIMULATION + UTILITY FUNCTIONS
-# =============================================================================
-
-def simulate_financing(T, financing_mean, financing_sigma, spike_prob, spike_factor):
-    """
-    Simulate a series of financing spreads f_t for T months,
-    using a Normal + occasional jump model.
-    """
-    f = np.zeros(T)
-    for t in range(T):
-        base = financing_mean + np.random.normal(0, financing_sigma)
-        jump = 0.0
-        if np.random.rand() < spike_prob:
-            jump = spike_factor * financing_sigma
-        f[t] = max(base + jump, 0.0)
-    return f
-
-def build_cov_matrix(rho_idx_H, rho_idx_E, rho_idx_M,
-                     rho_H_E, rho_H_M, rho_E_M,
-                     idx_sigma, sigma_H, sigma_E, sigma_M):
-    """
-    Build the 4×4 covariance matrix for (Index, H, E, M).
-    """
-    sds = np.array([idx_sigma, sigma_H, sigma_E, sigma_M])
-    rho = np.array([
-        [1.0,       rho_idx_H, rho_idx_E, rho_idx_M],
-        [rho_idx_H, 1.0,       rho_H_E,   rho_H_M],
-        [rho_idx_E, rho_H_E,   1.0,       rho_E_M],
-        [rho_idx_M, rho_H_M,   rho_E_M,   1.0    ]
-    ])
-    return np.outer(sds, sds) * rho
-
-def simulate_alpha_streams(T, cov, mu_idx, mu_H, mu_E, mu_M):
-    """
-    Simulate T joint observations of (Index_return, H, E, M)
-    from a multivariate Normal with given means and covariance.
-    Returns shape (T, 4).
-    """
-    means = np.array([mu_idx, mu_H, mu_E, mu_M])
-    return np.random.multivariate_normal(means, cov, size=T)
-
-def export_to_excel(inputs_dict, summary_df, raw_returns_dict, filename="Outputs.xlsx"):
-    """
-    Write inputs, summary, and raw returns into an Excel workbook.
-    """
-    with pd.ExcelWriter(filename, engine="openpyxl") as writer:
-        # 1) Inputs sheet
-        df_inputs = pd.DataFrame.from_dict(inputs_dict, orient="index", columns=["Value"])
-        df_inputs.index.name = "Parameter"
-        df_inputs.reset_index(inplace=True)
-        df_inputs.to_excel(writer, sheet_name="Inputs", index=False)
-
-        # 2) Summary sheet
-        summary_df.to_excel(writer, sheet_name="Summary", index=False)
-
-        # 3) Raw Returns sheets
-        for sheet_name, df in raw_returns_dict.items():
-            safe_name = sheet_name if len(sheet_name) <= 31 else sheet_name[:31]
-            df.to_excel(writer, sheet_name=safe_name, index=True)
-
-    print(f"Exported results to {filename}")
-
-# =============================================================================
-# 8. MAIN EXECUTION
-# =============================================================================
-
-if __name__ == "__main__":
-    # 8.1) Prompt user to select the parameters CSV
-    try:
-        params_csv_path = select_csv_file()
-        print(f"Parameters CSV selected: {params_csv_path}")
-    except FileNotFoundError:
-        raise RuntimeError("No parameter CSV selected; exiting.")
-
-    # 8.2) Load raw parameters
-    raw_params = load_parameters(params_csv_path, LABEL_MAP)
-
-    # 8.3) “Safe get” for numeric scalars and defaults
-    total_fund_capital = get_num(raw_params, "total_fund_capital", 1000)
-
-    financing_mean_annual = get_num(raw_params, "financing_mean_annual", 0.005)
-    financing_vol_annual  = get_num(raw_params, "financing_vol_annual", 0.001)
-    spike_prob            = get_num(raw_params, "spike_prob", 0.02)
-    spike_factor          = get_num(raw_params, "spike_factor", 2.25)
-
-    internal_financing_mean_annual = get_num(raw_params, "internal_financing_mean_annual", financing_mean_annual)
-    internal_financing_vol_annual  = get_num(raw_params, "internal_financing_vol_annual",  financing_vol_annual)
-    internal_spike_prob            = get_num(raw_params, "internal_spike_prob",            spike_prob)
-    internal_spike_factor          = get_num(raw_params, "internal_spike_factor",          spike_factor)
-
-    ext_pa_financing_mean_annual = get_num(raw_params, "ext_pa_financing_mean_annual", financing_mean_annual)
-    ext_pa_financing_vol_annual  = get_num(raw_params, "ext_pa_financing_vol_annual",  financing_vol_annual)
-    ext_pa_spike_prob            = get_num(raw_params, "ext_pa_spike_prob",            spike_prob)
-    ext_pa_spike_factor          = get_num(raw_params, "ext_pa_spike_factor",          spike_factor)
-
-    act_ext_financing_mean_annual = get_num(raw_params, "act_ext_financing_mean_annual", financing_mean_annual)
-    act_ext_financing_vol_annual  = get_num(raw_params, "act_ext_financing_vol_annual",  financing_vol_annual)
-    act_ext_spike_prob            = get_num(raw_params, "act_ext_spike_prob",            spike_prob)
-    act_ext_spike_factor          = get_num(raw_params, "act_ext_spike_factor",          spike_factor)
-
-    mu_H    = get_num(raw_params, "mu_H",    0.04)
-    sigma_H = get_num(raw_params, "sigma_H", 0.01)
-    mu_E    = get_num(raw_params, "mu_E",    0.05)
-    sigma_E = get_num(raw_params, "sigma_E", 0.02)
-    mu_M    = get_num(raw_params, "mu_M",    0.03)
-    sigma_M = get_num(raw_params, "sigma_M", 0.02)
-
-    rho_idx_H = get_num(raw_params, "rho_idx_H", 0.05)
-    rho_idx_E = get_num(raw_params, "rho_idx_E", 0.00)
-    rho_idx_M = get_num(raw_params, "rho_idx_M", 0.00)
-    rho_H_E   = get_num(raw_params, "rho_H_E",   0.10)
-    rho_H_M   = get_num(raw_params, "rho_H_M",   0.10)
-    rho_E_M   = get_num(raw_params, "rho_E_M",   0.00)
-
-    buffer_multiple = get_num(raw_params, "buffer_multiple", 3.0)
-
-    default_mu_H    = mu_H / 12
-    default_sigma_H = sigma_H / 12
-    default_mu_E    = mu_E / 12
-    default_sigma_E = sigma_E / 12
-    default_mu_M    = mu_M / 12
-    default_sigma_M = sigma_M / 12
-
-    default_ext_alpha_frac = get_num(raw_params, "external_pa_alpha_frac", 50) / 100.0
-    default_act_share      = get_num(raw_params, "active_share",            50) / 100.0
-
-    default_sd_mult = get_num(raw_params, "sd_of_vol_mult", 3)
-
-    financing_mean  = financing_mean_annual / 12
-    financing_sigma = financing_vol_annual / 12
-
-    # 8.4) Extract visualization flags (each “Plot X” row)
-    plot_heatmap_flag     = bool(str(raw_params.get("plot_heatmap", "")).strip())
-    plot_line_flag        = bool(str(raw_params.get("plot_line", "")).strip())
-    plot_boxplot_flag     = bool(str(raw_params.get("plot_boxplot", "")).strip())
-    plot_scatter_flag     = bool(str(raw_params.get("plot_scatter", "")).strip())
-    plot_time_series_flag = bool(str(raw_params.get("plot_time_series", "")).strip())
-    plot_histogram_flag   = bool(str(raw_params.get("plot_histogram", "")).strip())
-    plot_surface_flag     = bool(str(raw_params.get("plot_surface", "")).strip())
-
-    # 8.5) Determine analysis_mode
-    analysis_mode = str(raw_params.get("analysis_mode", "")).strip().lower()
-    valid_modes = {"capital", "returns", "alpha_shares", "vol_mult"}
-    if analysis_mode not in valid_modes:
-        raise RuntimeError(f"Analysis mode must be one of {valid_modes}, but got '{analysis_mode}'")
-
-    # 8.6) Prompt user to select the INDEX CSV
-    print("Please select the INDEX CSV (monthly total returns).")
-    try:
-        INDEX_CSV_PATH = select_csv_file()
-        print(f"Index CSV selected: {INDEX_CSV_PATH}")
-    except FileNotFoundError:
-        raise RuntimeError("Index CSV was not selected; exiting.")
-
-    # 8.7) Load idx_series and compute reference stats
-    try:
-        idx_series = load_index_returns(INDEX_CSV_PATH)
-        print(f"Loaded {len(idx_series)} months from the raw index CSV.")
-    except Exception as e:
-        raise RuntimeError(f"Failed to load index returns: {e}")
-
-    mu_idx   = idx_series.mean()
-    idx_sigma = idx_series.std(ddof=1)
-    print(f"Using idx_series from {idx_series.index.min().date()} to {idx_series.index.max().date()} (n={len(idx_series)})")
-    print(f"Analysis-window: μ_idx = {mu_idx:.4f}, σ_idx = {idx_sigma:.4f}")
-
-    # 8.8) Convert bucket financing overrides to monthly decimals
-    internal_financing_mean  = internal_financing_mean_annual / 12
-    internal_financing_sigma = internal_financing_vol_annual / 12
-
-    ext_pa_financing_mean  = ext_pa_financing_mean_annual / 12
-    ext_pa_financing_sigma = ext_pa_financing_vol_annual / 12
-
-    act_ext_financing_mean  = act_ext_financing_mean_annual / 12
-    act_ext_financing_sigma = act_ext_financing_vol_annual / 12
-
-    # -------------------------------------------------------------------
-    # 8.9) Branch on analysis_mode
-    # -------------------------------------------------------------------
-
-    if analysis_mode == "capital":
-        # --------------------------------------
-        # 8.9.a) Capital mode: Sweep ext_pct→act_pct
-        # --------------------------------------
-        max_ext_pct  = get_num(raw_params, "max_external_combined_percent", 50) / 100.0
-        ext_step_pct = get_num(raw_params, "external_step_size_percent",   1) / 100.0
-
-        # Other “sweepable” params collapse to midpoint
-        mu_H_list    = [default_mu_H]
-        sigma_H_list = [default_sigma_H]
-        mu_E_list    = [default_mu_E]
-        sigma_E_list = [default_sigma_E]
-        mu_M_list    = [default_mu_M]
-        sigma_M_list = [default_sigma_M]
-
-        ext_alpha_list = [default_ext_alpha_frac]
-        act_share_list = [default_act_share]
-        sd_list        = [default_sd_mult]
-
-        all_summaries = []
-        all_raw_returns = {}
-
-        ext_range = np.arange(0.0, max_ext_pct + 1e-9, ext_step_pct)
-        for ext_pct in ext_range:
-            act_range = np.arange(0.0, ext_pct + 1e-9, ext_step_pct)
-            for act_pct in act_range:
-                E_pct = ext_pct - act_pct
-                A_pct = act_pct
-                Z_frac = 1.0 - ext_pct
-                E_mm = E_pct * total_fund_capital
-                A_mm = A_pct * total_fund_capital
-                Z_mm = Z_frac * total_fund_capital
-
-                # 1-year financing paths
-                f_internal = simulate_financing(
-                    12,
-                    internal_financing_mean, internal_financing_sigma,
-                    internal_spike_prob, internal_spike_factor
-                )
-                f_ext_pa = simulate_financing(
-                    12,
-                    ext_pa_financing_mean, ext_pa_financing_sigma,
-                    ext_pa_spike_prob, ext_pa_spike_factor
-                )
-                f_act_ext = simulate_financing(
-                    12,
-                    act_ext_financing_mean, act_ext_financing_sigma,
-                    act_ext_spike_prob, act_ext_spike_factor
-                )
-
-                cov_mat = build_cov_matrix(
-                    rho_idx_H, rho_idx_E, rho_idx_M,
-                    rho_H_E, rho_H_M, rho_E_M,
-                    idx_sigma, default_sigma_H, default_sigma_E, default_sigma_M
-                )
-
-                N_SIMULATIONS = get_num(raw_params, "N_SIMULATIONS", 5000)
-                N_MONTHS      = get_num(raw_params, "N_MONTHS",    12)
-
-                sims = np.random.multivariate_normal(
-                    [mu_idx, default_mu_H, default_mu_E, default_mu_M],
-                    cov_mat,
-                    size=(N_SIMULATIONS, N_MONTHS)
-                )
-
-                f_int_matrix    = np.tile(f_internal, (N_SIMULATIONS, 1))
-                f_ext_pa_matrix = np.tile(f_ext_pa,    (N_SIMULATIONS, 1))
-                f_act_ext_matrix= np.tile(f_act_ext,   (N_SIMULATIONS, 1))
-
-                results = {
-                    "Base":       np.zeros(N_SIMULATIONS),
-                    "ExternalPA": np.zeros(N_SIMULATIONS),
-                    "ActiveExt":  np.zeros(N_SIMULATIONS)
-                }
-                dates_sim = pd.date_range(
-                    start=idx_series.index[-1] + pd.DateOffset(months=1),
-                    periods=N_MONTHS, freq="ME"
-                )
-                raw_returns = {
-                    "Base":       pd.DataFrame(index=dates_sim),
-                    "ExternalPA": pd.DataFrame(index=dates_sim),
-                    "ActiveExt":  pd.DataFrame(index=dates_sim),
-                }
-
-                for sim_i in range(N_SIMULATIONS):
-                    r_beta = sims[sim_i, :, 0]
-                    r_H    = sims[sim_i, :, 1]
-                    r_E    = sims[sim_i, :, 2]
-                    r_M    = sims[sim_i, :, 3]
-
-                    # Base (internal)
-                    R_base = (r_beta - f_int_matrix[sim_i]) * Z_frac + r_H * Z_frac
-                    results["Base"][sim_i] = np.prod(1 + R_base) - 1
-
-                    # External PA
-                    R_extpa = (r_beta - f_ext_pa_matrix[sim_i]) * E_pct + r_M * E_pct
-                    results["ExternalPA"][sim_i] = np.prod(1 + R_extpa) - 1
-
-                    # Active Extension
-                    R_actext = (r_beta - f_act_ext_matrix[sim_i]) * A_pct + r_E * A_pct
-                    results["ActiveExt"][sim_i] = np.prod(1 + R_actext) - 1
-
-                    if sim_i == 0:
-                        raw_returns["Base"]       = pd.DataFrame({"Base": R_base}, index=dates_sim)
-                        raw_returns["ExternalPA"] = pd.DataFrame({"ExternalPA": R_extpa}, index=dates_sim)
-                        raw_returns["ActiveExt"]  = pd.DataFrame({"ActiveExt": R_actext}, index=dates_sim)
-
-                df_yearly = pd.DataFrame(results)
-                summary_rows = []
-                for cfg, arr in df_yearly.items():
-                    ann_ret = np.mean(arr)
-                    ann_vol = np.std(arr, ddof=1)
-                    var_95  = np.percentile(arr, 5)
-                    te      = np.nan
-
-                    mr_series = raw_returns[cfg].iloc[:, 0]
-                    threshold = -buffer_multiple * idx_sigma
-                    breach_pct = np.mean(mr_series < threshold) * 100
-
-                    summary_rows.append({
-                        "Config":            cfg,
-                        "Ext %":             ext_pct * 100.0,
-                        "Act %":             act_pct * 100.0,
-                        "Internal PA (mm)":  Z_mm,
-                        "Annual Return":     ann_ret,
-                        "Annual Vol":        ann_vol,
-                        "VaR 95":            var_95,
-                        "TE (est.)":         te,
-                        "Breach %":          breach_pct
-                    })
-
-                summary_df = pd.DataFrame(summary_rows)
-                all_summaries.append(summary_df)
-
-                for key, df_r in raw_returns.items():
-                    sheet_key = f"{key}_E{int(ext_pct*100)}_A{int(act_pct*100)}"
-                    all_raw_returns[sheet_key] = df_r
-
-        final_summary = pd.concat(all_summaries, ignore_index=True)
-
-        inputs_dict = {
-            "Analysis mode":               "capital",
-            "Total fund capital (mm)":     total_fund_capital,
-            "Max external combined (%)":   get_num(raw_params, "max_external_combined_percent", ""),
-            "External step size (%)":      get_num(raw_params, "external_step_size_percent", ""),
-            "Annual financing mean (%)":   financing_mean_annual,
-            "Annual financing vol (%)":    financing_vol_annual,
-            "Monthly spike probability":   spike_prob,
-            "Spike size (σ × multiplier)": spike_factor,
-            "Buffer multiple":             buffer_multiple
-        }
-
-        export_to_excel(inputs_dict, final_summary, all_raw_returns)
-
-        # Convert numeric summary columns to human-friendly format
-        display_df = final_summary.copy()
-        display_df = display_df.rename(columns={
-            "Annual Return": "Annual Return (%)",
-            "Annual Vol":    "Annual Volatility (%)",
-            "VaR 95":        "95%-VaR (%)",
-            "TE (est.)":     "Tracking Error (%)",
-            "Breach %":      "Breach Probability (%)"
-        })
-        # Format percentages
-        for col in ["Annual Return (%)", "Annual Volatility (%)", "95%-VaR (%)", "Tracking Error (%)", "Breach Probability (%)"]:
-            display_df[col] = display_df[col].map("{:.1f}%".format)
-
-        pd.set_option("display.max_rows", None)
-        print("\n=== Summary Table (Capital Mode) ===\n")
-        print(display_df.to_string(index=False))
-        print()
-
-        # ─── PLOTTING DISPATCH ────────────────────────────────────────────────────
-        # Helper to pivot decimals to percentages for axes
-        def perc(x): return x * 100.0
-
-        if plot_heatmap_flag:
-            # Heatmap of Annual Return vs Ext % & Act %
-            pivot = final_summary.pivot(index="Act %", columns="Ext %", values="Annual Return")
-            X = np.array(sorted(final_summary["Ext %"].unique()))
-            Y = np.array(sorted(final_summary["Act %"].unique()))
-            Z = pivot.values
-            fig, ax = plt.subplots(figsize=(6,5))
-            hm = ax.imshow(
-                Z,
-                origin="lower",
-                aspect="auto",
-                cmap="viridis",
-                extent=[X.min(), X.max(), Y.min(), Y.max()]
-            )
-            ax.set_xlabel("Ext %")
-            ax.set_ylabel("Act %")
-            ax.set_title("Heatmap: Annual Return vs Ext% & Act%")
-            fig.colorbar(hm, ax=ax, label="Annual Return (decimal)")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_line_flag:
-            # Line plot: Annual Return vs Ext % for each Act % slice
-            fig, ax = plt.subplots(figsize=(6,4))
-            for act_level in sorted(final_summary["Act %"].unique()):
-                sub = final_summary[final_summary["Act %"] == act_level]
-                x_vals = sub["Ext %"].values
-                y_vals = sub["Annual Return"].values * 100.0
-                ax.plot(x_vals, y_vals, marker="o", label=f"Act % = {act_level:.1f}")
-            ax.set_xlabel("Ext %")
-            ax.set_ylabel("Annual Return (%)")
-            ax.set_title("Line: Return vs Ext % by Active %")
-            ax.legend()
-            plt.tight_layout()
-            plt.show()
-
-        if plot_boxplot_flag:
-            # Boxplot of first-simulation Monthly Returns vs Ext % at Act% = 0%
-            sim_list = []
-            for sheet_key, df_r in all_raw_returns.items():
-                parts = sheet_key.split("_")
-                cfg   = parts[0]
-                try:
-                    ext_pct = float(parts[1].replace("E","")) / 100.0
-                    act_pct = float(parts[2].replace("A","")) / 100.0
-                except:
-                    continue
-                for val in df_r.iloc[:, 0].values:
-                    sim_list.append({
-                        "Config":       cfg,
-                        "Ext %":        ext_pct * 100.0,
-                        "Act %":        act_pct * 100.0,
-                        "Monthly return": val * 100.0
-                    })
-            sim_df = pd.DataFrame(sim_list)
-            subset = sim_df[sim_df["Act %"] == 0.0]
-            groups = [g["Monthly return"].values for _, g in subset.groupby("Ext %")]
-            labels = sorted(subset["Ext %"].unique())
-            fig, ax = plt.subplots(figsize=(6,4))
-            ax.boxplot(groups, labels=[f"{l:.0f}" for l in labels])
-            ax.set_xlabel("Ext %")
-            ax.set_ylabel("Monthly Return (%)")
-            ax.set_title("Boxplot: Monthly Return by Ext % (Act%=0%)")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_scatter_flag:
-            fig, ax = plt.subplots(figsize=(5,4))
-            te_vals     = final_summary["Tracking Error (%)"].astype(float) * 100.0
-            breach_vals = final_summary["Breach %"].astype(float)
-            ax.scatter(te_vals, breach_vals, alpha=0.6)
-            ax.set_xlabel("Tracking Error (%)")
-            ax.set_ylabel("Breach Probability (%)")
-            ax.set_title("Scatter: TE vs Breach Probability")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_time_series_flag:
-            threshold = -buffer_multiple * idx_sigma
-            for sample_key in all_raw_returns.keys():
-                if sample_key.startswith("Base_"):
-                    df_path = all_raw_returns[sample_key]
-                    fig, ax = plt.subplots(figsize=(6,3))
-                    ax.plot(df_path.index, df_path.iloc[:, 0], label=sample_key)
-                    ax.axhline(y=threshold, color="red", linestyle="--", label="Threshold")
-                    ax.set_title(f"Time Series (first-sim) for {sample_key}")
-                    ax.set_xlabel("Month")
-                    ax.set_ylabel("Monthly return")
-                    ax.legend()
-                    plt.tight_layout()
-                    plt.show()
-                    break  # only show one example
-
-        if plot_histogram_flag:
-            # Pick a representative ExternalPA_E25_A25 if exists
-            target = None
-            for key in all_raw_returns:
-                if key.startswith("ExternalPA_E25_A25"):
-                    target = key
-                    break
-            if target:
-                data = all_raw_returns[target].iloc[:, 0].values * 100.0
-                fig, ax = plt.subplots(figsize=(5,4))
-                ax.hist(data, bins=30, alpha=0.7)
-                ax.set_xlabel("Monthly Return (%)")
-                ax.set_ylabel("Frequency")
-                ax.set_title(f"Histogram: {target}")
-                plt.tight_layout()
-                plt.show()
-
-        if plot_surface_flag:
-            xv = sorted(final_summary["Ext %"].unique())
-            yv = sorted(final_summary["Act %"].unique())
-            Z = final_summary.pivot(index="Act %", columns="Ext %", values="Breach %").values
-            X, Y = np.meshgrid(np.array(xv), np.array(yv))
-            fig = plt.figure(figsize=(6,5))
-            ax3 = fig.add_subplot(111, projection="3d")
-            surf = ax3.plot_surface(X, Y, Z, cmap="viridis", edgecolor="none")
-            ax3.set_xlabel("Ext %")
-            ax3.set_ylabel("Act %")
-            ax3.set_zlabel("Breach %")
-            ax3.set_title("Surface: Breach vs Ext & Act")
-            fig.colorbar(surf, shrink=0.5, aspect=5, label="Breach %")
-            plt.tight_layout()
-            plt.show()
-
-    elif analysis_mode == "returns":
-        # ---------------------------------------------------------------------------------------
-        # 8.9.b) Returns mode: Sweep over μ_H, σ_H, μ_E, σ_E, μ_M, σ_M. Other params fixed at midpoint.
-        # ---------------------------------------------------------------------------------------
-
-        E_mm = get_num(raw_params, "external_pa_capital", None)
-        A_mm = get_num(raw_params, "active_ext_capital",  None)
-        Z_mm = get_num(raw_params, "internal_pa_capital", None)
-        if any(v is None for v in [E_mm, A_mm, Z_mm]):
-            raise RuntimeError(
-                "In 'returns' mode, please supply: External PA capital (mm), "
-                "Active Extension capital (mm), Internal PA capital (mm)."
-            )
-
-        mu_H_list    = build_range("mu_H",    default_midpoint=default_mu_H)
-        sigma_H_list = build_range("sigma_H", default_midpoint=default_sigma_H)
-        mu_E_list    = build_range("mu_E",    default_midpoint=default_mu_E)
-        sigma_E_list = build_range("sigma_E", default_midpoint=default_sigma_E)
-        mu_M_list    = build_range("mu_M",    default_midpoint=default_mu_M)
-        sigma_M_list = build_range("sigma_M", default_midpoint=default_sigma_M)
-
-        ext_alpha_list = [default_ext_alpha_frac]
-        act_share_list = [default_act_share]
-        sd_list        = [default_sd_mult]
-
-        all_summaries = []
-        all_raw_returns = {}
-
-        for muH in mu_H_list:
-            for sH in sigma_H_list:
-                for muE in mu_E_list:
-                    for sE in sigma_E_list:
-                        for muM_ in mu_M_list:
-                            for sM in sigma_M_list:
-                                f_internal = simulate_financing(
-                                    12,
-                                    internal_financing_mean_annual/12,
-                                    internal_financing_vol_annual/12,
-                                    internal_spike_prob,
-                                    internal_spike_factor
-                                )
-                                f_ext_pa = simulate_financing(
-                                    12,
-                                    ext_pa_financing_mean_annual/12,
-                                    ext_pa_financing_vol_annual/12,
-                                    ext_pa_spike_prob,
-                                    ext_pa_spike_factor
-                                )
-                                f_act_ext = simulate_financing(
-                                    12,
-                                    act_ext_financing_mean_annual/12,
-                                    act_ext_financing_vol_annual/12,
-                                    act_ext_spike_prob,
-                                    act_ext_spike_factor
-                                )
-
-                                cov_mat = build_cov_matrix(
-                                    rho_idx_H, rho_idx_E, rho_idx_M,
-                                    rho_H_E, rho_H_M, rho_E_M,
-                                    idx_sigma, sH, sE, sM
-                                )
-
-                                N_SIMULATIONS = get_num(raw_params, "N_SIMULATIONS", 5000)
-                                N_MONTHS      = get_num(raw_params, "N_MONTHS",    12)
-
-                                sims = np.random.multivariate_normal(
-                                    [mu_idx, muH, muE, muM_],
-                                    cov_mat,
-                                    size=(N_SIMULATIONS, N_MONTHS)
-                                )
-
-                                f_int_matrix    = np.tile(f_internal, (N_SIMULATIONS, 1))
-                                f_ext_pa_matrix = np.tile(f_ext_pa,    (N_SIMULATIONS, 1))
-                                f_act_ext_matrix= np.tile(f_act_ext,   (N_SIMULATIONS, 1))
-
-                                results = {
-                                    "Base":       np.zeros(N_SIMULATIONS),
-                                    "ExternalPA": np.zeros(N_SIMULATIONS),
-                                    "ActiveExt":  np.zeros(N_SIMULATIONS)
-                                }
-                                dates_sim = pd.date_range(
-                                    start=idx_series.index[-1] + pd.DateOffset(months=1),
-                                    periods=N_MONTHS, freq="ME"
-                                )
-                                raw_returns = {
-                                    "Base":       pd.DataFrame(index=dates_sim),
-                                    "ExternalPA": pd.DataFrame(index=dates_sim),
-                                    "ActiveExt":  pd.DataFrame(index=dates_sim),
-                                }
-
-                                for sim_i in range(N_SIMULATIONS):
-                                    r_beta = sims[sim_i, :, 0]
-                                    r_H    = sims[sim_i, :, 1]
-                                    r_E    = sims[sim_i, :, 2]
-                                    r_M    = sims[sim_i, :, 3]
-
-                                    R_base   = (r_beta - f_int_matrix[sim_i]) + r_H
-                                    R_extpa  = (r_beta - f_ext_pa_matrix[sim_i]) + r_M
-                                    R_actext = (r_beta - f_act_ext_matrix[sim_i]) + r_E
-
-                                    results["Base"][sim_i]       = np.prod(1 + R_base) - 1
-                                    results["ExternalPA"][sim_i] = np.prod(1 + R_extpa) - 1
-                                    results["ActiveExt"][sim_i]  = np.prod(1 + R_actext) - 1
-
-                                    if sim_i == 0:
-                                        raw_returns["Base"]       = pd.DataFrame({"Base": R_base}, index=dates_sim)
-                                        raw_returns["ExternalPA"] = pd.DataFrame({"ExternalPA": R_extpa}, index=dates_sim)
-                                        raw_returns["ActiveExt"]  = pd.DataFrame({"ActiveExt": R_actext}, index=dates_sim)
-
-                                df_yearly = pd.DataFrame(results)
-                                summary_rows = []
-                                for cfg, arr in df_yearly.items():
-                                    ann_ret = np.mean(arr)
-                                    ann_vol = np.std(arr, ddof=1)
-                                    var_95  = np.percentile(arr, 5)
-                                    te      = np.nan
-
-                                    mr_series = raw_returns[cfg].iloc[:, 0]
-                                    threshold = -buffer_multiple * idx_sigma
-                                    breach_pct = np.mean(mr_series < threshold) * 100
-
-                                    summary_rows.append({
-                                        "Config":            cfg,
-                                        "μ_H (%)":           muH * 100.0,
-                                        "σ_H (%)":           sH * 100.0,
-                                        "μ_E (%)":           muE * 100.0,
-                                        "σ_E (%)":           sE * 100.0,
-                                        "μ_M (%)":           muM_ * 100.0,
-                                        "σ_M (%)":           sM * 100.0,
-                                        "Internal PA (mm)":  Z_mm,
-                                        "External PA (mm)":  E_mm,
-                                        "Active Ext (mm)":   A_mm,
-                                        "Annual Return":     ann_ret,
-                                        "Annual Vol":        ann_vol,
-                                        "VaR 95":            var_95,
-                                        "TE (est.)":         te,
-                                        "Breach %":          breach_pct
-                                    })
-
-                                summary_df = pd.DataFrame(summary_rows)
-                                all_summaries.append(summary_df)
-
-                                for key, df_r in raw_returns.items():
-                                    sheet_key = (
-                                        f"{key}_H{int(muH*100)}"
-                                        f"_sH{int(sH*100)}"
-                                        f"_E{int(muE*100)}"
-                                        f"_sE{int(sE*100)}"
-                                        f"_M{int(muM_*100)}"
-                                        f"_sM{int(sM*100)}"
-                                    )
-                                    all_raw_returns[sheet_key] = df_r
-
-        final_summary = pd.concat(all_summaries, ignore_index=True)
-
-        inputs_dict = {
-            "Analysis mode":                    "returns",
-            "In-House return min (%)":          get_num(raw_params, "mu_H_min",    ""),
-            "In-House return max (%)":          get_num(raw_params, "mu_H_max",    ""),
-            "In-House return step (%)":         get_num(raw_params, "mu_H_step",   ""),
-            "In-House vol min (%)":             get_num(raw_params, "sigma_H_min", ""),
-            "In-House vol max (%)":             get_num(raw_params, "sigma_H_max", ""),
-            "In-House vol step (%)":            get_num(raw_params, "sigma_H_step",""),
-            "Alpha-Extension return min (%)":   get_num(raw_params, "mu_E_min",    ""),
-            "Alpha-Extension return max (%)":   get_num(raw_params, "mu_E_max",    ""),
-            "Alpha-Extension return step (%)":  get_num(raw_params, "mu_E_step",   ""),
-            "Alpha-Extension vol min (%)":      get_num(raw_params, "sigma_E_min", ""),
-            "Alpha-Extension vol max (%)":      get_num(raw_params, "sigma_E_max", ""),
-            "Alpha-Extension vol step (%)":     get_num(raw_params, "sigma_E_step",""),
-            "External return min (%)":          get_num(raw_params, "mu_M_min",    ""),
-            "External return max (%)":          get_num(raw_params, "mu_M_max",    ""),
-            "External return step (%)":         get_num(raw_params, "mu_M_step",   ""),
-            "External vol min (%)":             get_num(raw_params, "sigma_M_min", ""),
-            "External vol max (%)":             get_num(raw_params, "sigma_M_max", ""),
-            "External vol step (%)":            get_num(raw_params, "sigma_M_step",""),
-            "External PA capital (mm)":         E_mm,
-            "Active Extension capital (mm)":    A_mm,
-            "Internal PA capital (mm)":         Z_mm,
-            "Buffer multiple":                  buffer_multiple
-        }
-
-        export_to_excel(inputs_dict, final_summary, all_raw_returns)
-
-        display_df = final_summary.copy()
-        display_df = display_df.rename(columns={
-            "Annual Return": "Annual Return (%)",
-            "Annual Vol":    "Annual Volatility (%)",
-            "VaR 95":        "95%-VaR (%)",
-            "TE (est.)":     "Tracking Error (%)",
-            "Breach %":      "Breach Probability (%)"
-        })
-        for col in ["Annual Return (%)", "Annual Volatility (%)", "95%-VaR (%)", "Tracking Error (%)", "Breach Probability (%)"]:
-            display_df[col] = display_df[col].map("{:.1f}%".format)
-
-        pd.set_option("display.max_rows", None)
-        print("\n=== Summary Table (Returns Mode) ===\n")
-        print(display_df.to_string(index=False))
-        print()
-
-        # ─── PLOTTING DISPATCH ────────────────────────────────────────────────────
-
-        if plot_heatmap_flag:
-            # Heatmap: pick two parameters to visualize, e.g. μ_H vs σ_H → Annual Return
-            pivot = final_summary.pivot(index="σ_H (%)", columns="μ_H (%)", values="Annual Return")
-            X = np.array(sorted(final_summary["μ_H (%)"].unique()))
-            Y = np.array(sorted(final_summary["σ_H (%)"].unique()))
-            Z = pivot.values
-            fig, ax = plt.subplots(figsize=(6,5))
-            hm = ax.imshow(
-                Z,
-                origin="lower",
-                aspect="auto",
-                cmap="viridis",
-                extent=[X.min(), X.max(), Y.min(), Y.max()]
-            )
-            ax.set_xlabel("μ_H (%)")
-            ax.set_ylabel("σ_H (%)")
-            ax.set_title("Heatmap: Annual Return vs μ_H & σ_H")
-            fig.colorbar(hm, ax=ax, label="Annual Return (decimal)")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_line_flag:
-            # Line: sweep μ_H for fixed σ_H (take first σ_H level)
-            first_sigma = sorted(final_summary["σ_H (%)"].unique())[0]
-            sub = final_summary[final_summary["σ_H (%)"] == first_sigma]
-            x_vals = sub["μ_H (%)"].values
-            y_vals = sub["Annual Return"].values * 100.0
-            fig, ax = plt.subplots(figsize=(6,4))
-            ax.plot(x_vals, y_vals, marker="o")
-            ax.set_xlabel("μ_H (%)")
-            ax.set_ylabel("Annual Return (%)")
-            ax.set_title(f"Line: μ_H vs Return (σ_H={first_sigma:.1f}%)")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_boxplot_flag:
-            # Boxplot of monthly returns for one parameter combination, e.g. first in grid
-            sample_key = list(all_raw_returns.keys())[0]
-            data = all_raw_returns[sample_key].iloc[:, 0].values * 100.0
-            fig, ax = plt.subplots(figsize=(5,4))
-            ax.boxplot(data, labels=[sample_key])
-            ax.set_ylabel("Monthly Return (%)")
-            ax.set_title(f"Boxplot: {sample_key}")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_scatter_flag:
-            fig, ax = plt.subplots(figsize=(5,4))
-            te_vals     = final_summary["Tracking Error (%)"].astype(float) * 100.0
-            breach_vals = final_summary["Breach %"].astype(float)
-            ax.scatter(te_vals, breach_vals, alpha=0.6)
-            ax.set_xlabel("Tracking Error (%)")
-            ax.set_ylabel("Breach Probability (%)")
-            ax.set_title("Scatter: TE vs Breach Probability")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_time_series_flag:
-            threshold = -buffer_multiple * idx_sigma
-            sample_key = list(all_raw_returns.keys())[0]
-            df_path = all_raw_returns[sample_key]
-            fig, ax = plt.subplots(figsize=(6,3))
-            ax.plot(df_path.index, df_path.iloc[:, 0], label=sample_key)
-            ax.axhline(y=threshold, color="red", linestyle="--", label="Threshold")
-            ax.set_title(f"Time Series (first-sim) for {sample_key}")
-            ax.set_xlabel("Month")
-            ax.set_ylabel("Monthly return")
-            ax.legend()
-            plt.tight_layout()
-            plt.show()
-
-        if plot_histogram_flag:
-            sample_key = list(all_raw_returns.keys())[0]
-            data = all_raw_returns[sample_key].iloc[:, 0].values * 100.0
-            fig, ax = plt.subplots(figsize=(5,4))
-            ax.hist(data, bins=30, alpha=0.7)
-            ax.set_xlabel("Monthly Return (%)")
-            ax.set_ylabel("Frequency")
-            ax.set_title(f"Histogram: {sample_key}")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_surface_flag:
-            xv = sorted(final_summary["μ_H (%)"].unique())
-            yv = sorted(final_summary["σ_H (%)"].unique())
-            Z = final_summary.pivot(index="σ_H (%)", columns="μ_H (%)", values="Breach %").values
-            X, Y = np.meshgrid(np.array(xv), np.array(yv))
-            fig = plt.figure(figsize=(6,5))
-            ax3 = fig.add_subplot(111, projection="3d")
-            surf = ax3.plot_surface(X, Y, Z, cmap="viridis", edgecolor="none")
-            ax3.set_xlabel("μ_H (%)")
-            ax3.set_ylabel("σ_H (%)")
-            ax3.set_zlabel("Breach %")
-            ax3.set_title("Surface: Breach vs μ_H & σ_H")
-            fig.colorbar(surf, shrink=0.5, aspect=5, label="Breach %")
-            plt.tight_layout()
-            plt.show()
-
-    elif analysis_mode == "alpha_shares":
-        # ---------------------------------------------------------------------------------------
-        # 8.9.c) Alpha_Shares mode: Sweep over external_pa_alpha_frac, active_share. Others fixed.
-        # ---------------------------------------------------------------------------------------
-
-        E_mm = get_num(raw_params, "external_pa_capital", None)
-        A_mm = get_num(raw_params, "active_ext_capital",  None)
-        Z_mm = get_num(raw_params, "internal_pa_capital", None)
-        if any(v is None for v in [E_mm, A_mm, Z_mm]):
-            raise RuntimeError(
-                "In 'alpha_shares' mode, supply: External PA capital (mm), "
-                "Active Extension capital (mm), Internal PA capital (mm)."
-            )
-
-        external_pa_alpha_frac_list = build_range("external_pa_alpha_frac", default_midpoint=default_ext_alpha_frac)
-        active_share_list           = build_range("active_share",            default_midpoint=default_act_share)
-
-        mu_H_list    = [default_mu_H]
-        sigma_H_list = [default_sigma_H]
-        mu_E_list    = [default_mu_E]
-        sigma_E_list = [default_sigma_E]
-        mu_M_list    = [default_mu_M]
-        sigma_M_list = [default_sigma_M]
-        sd_list      = [default_sd_mult]
-
-        all_summaries = []
-        all_raw_returns = {}
-
-        for ext_alpha in external_pa_alpha_frac_list:
-            for act_share in active_share_list:
-                f_internal = simulate_financing(
-                    12,
-                    internal_financing_mean_annual/12,
-                    internal_financing_vol_annual/12,
-                    internal_spike_prob,
-                    internal_spike_factor
-                )
-                f_ext_pa = simulate_financing(
-                    12,
-                    ext_pa_financing_mean_annual/12,
-                    ext_pa_financing_vol_annual/12,
-                    ext_pa_spike_prob,
-                    ext_pa_spike_factor
-                )
-                f_act_ext = simulate_financing(
-                    12,
-                    act_ext_financing_mean_annual/12,
-                    act_ext_financing_vol_annual/12,
-                    act_ext_spike_prob,
-                    act_ext_spike_factor
-                )
-
-                cov_mat = build_cov_matrix(
-                    rho_idx_H, rho_idx_E, rho_idx_M,
-                    rho_H_E, rho_H_M, rho_E_M,
-                    idx_sigma, default_sigma_H, default_sigma_E, default_sigma_M
-                )
-
-                N_SIMULATIONS = get_num(raw_params, "N_SIMULATIONS", 5000)
-                N_MONTHS      = get_num(raw_params, "N_MONTHS",    12)
-
-                sims = np.random.multivariate_normal(
-                    [mu_idx, default_mu_H, default_mu_E, default_mu_M],
-                    cov_mat,
-                    size=(N_SIMULATIONS, N_MONTHS)
-                )
-
-                f_int_matrix    = np.tile(f_internal, (N_SIMULATIONS, 1))
-                f_ext_pa_matrix = np.tile(f_ext_pa,    (N_SIMULATIONS, 1))
-                f_act_ext_matrix= np.tile(f_act_ext,   (N_SIMULATIONS, 1))
-
-                results = {
-                    "Base":       np.zeros(N_SIMULATIONS),
-                    "ExternalPA": np.zeros(N_SIMULATIONS),
-                    "ActiveExt":  np.zeros(N_SIMULATIONS)
-                }
-                dates_sim = pd.date_range(
-                    start=idx_series.index[-1] + pd.DateOffset(months=1),
-                    periods=N_MONTHS, freq="ME"
-                )
-                raw_returns = {
-                    "Base":       pd.DataFrame(index=dates_sim),
-                    "ExternalPA": pd.DataFrame(index=dates_sim),
-                    "ActiveExt":  pd.DataFrame(index=dates_sim),
-                }
-
-                for sim_i in range(N_SIMULATIONS):
-                    r_beta = sims[sim_i, :, 0]
-                    r_H    = sims[sim_i, :, 1]
-                    r_E    = sims[sim_i, :, 2]
-                    r_M    = sims[sim_i, :, 3]
-
-                    R_base   = (r_beta - f_int_matrix[sim_i]) + r_H
-                    R_extpa  = (r_beta - f_ext_pa_matrix[sim_i]) * ext_alpha + r_M * ext_alpha
-                    R_actext = (r_beta - f_act_ext_matrix[sim_i]) * act_share + r_E * act_share
-
-                    results["Base"][sim_i]       = np.prod(1 + R_base) - 1
-                    results["ExternalPA"][sim_i] = np.prod(1 + R_extpa) - 1
-                    results["ActiveExt"][sim_i]  = np.prod(1 + R_actext) - 1
-
-                    if sim_i == 0:
-                        raw_returns["Base"]       = pd.DataFrame({"Base": R_base}, index=dates_sim)
-                        raw_returns["ExternalPA"] = pd.DataFrame({"ExternalPA": R_extpa}, index=dates_sim)
-                        raw_returns["ActiveExt"]  = pd.DataFrame({"ActiveExt": R_actext}, index=dates_sim)
-
-                df_yearly = pd.DataFrame(results)
-                summary_rows = []
-                for cfg, arr in df_yearly.items():
-                    ann_ret = np.mean(arr)
-                    ann_vol = np.std(arr, ddof=1)
-                    var_95  = np.percentile(arr, 5)
-                    te      = np.nan
-
-                    mr_series = raw_returns[cfg].iloc[:, 0]
-                    threshold = -buffer_multiple * idx_sigma
-                    breach_pct = np.mean(mr_series < threshold) * 100
-
-                    summary_rows.append({
-                        "Config":            cfg,
-                        "External PA α (%)": ext_alpha * 100.0,
-                        "Active share (%)":  act_share * 100.0,
-                        "Internal PA (mm)":  Z_mm,
-                        "External PA (mm)":  E_mm,
-                        "Active Ext (mm)":   A_mm,
-                        "Annual Return":     ann_ret,
-                        "Annual Vol":        ann_vol,
-                        "VaR 95":            var_95,
-                        "TE (est.)":         te,
-                        "Breach %":          breach_pct
-                    })
-
-                summary_df = pd.DataFrame(summary_rows)
-                all_summaries.append(summary_df)
-
-                for key, df_r in raw_returns.items():
-                    sheet_key = f"{key}_α{int(ext_alpha*100)}_act{int(act_share*100)}"
-                    all_raw_returns[sheet_key] = df_r
-
-        final_summary = pd.concat(all_summaries, ignore_index=True)
-
-        inputs_dict = {
-            "Analysis mode":                  "alpha_shares",
-            "External PA α fraction min (%)": get_num(raw_params, "external_pa_alpha_frac_min", ""),
-            "External PA α fraction max (%)": get_num(raw_params, "external_pa_alpha_frac_max", ""),
-            "External PA α fraction step (%)":get_num(raw_params, "external_pa_alpha_frac_step", ""),
-            "Active share min (%)":          get_num(raw_params, "active_share_min", ""),
-            "Active share max (%)":          get_num(raw_params, "active_share_max", ""),
-            "Active share step (%)":         get_num(raw_params, "active_share_step", ""),
-            "External PA capital (mm)":      E_mm,
-            "Active Extension capital (mm)": A_mm,
-            "Internal PA capital (mm)":      Z_mm,
-            "Buffer multiple":               buffer_multiple
-        }
-
-        export_to_excel(inputs_dict, final_summary, all_raw_returns)
-
-        display_df = final_summary.copy()
-        display_df = display_df.rename(columns={
-            "Annual Return": "Annual Return (%)",
-            "Annual Vol":    "Annual Volatility (%)",
-            "VaR 95":        "95%-VaR (%)",
-            "TE (est.)":     "Tracking Error (%)",
-            "Breach %":      "Breach Probability (%)"
-        })
-        for col in ["Annual Return (%)", "Annual Volatility (%)", "95%-VaR (%)", "Tracking Error (%)", "Breach Probability (%)"]:
-            display_df[col] = display_df[col].map("{:.1f}%".format)
-
-        pd.set_option("display.max_rows", None)
-        print("\n=== Summary Table (Alpha_Shares Mode) ===\n")
-        print(display_df.to_string(index=False))
-        print()
-
-        # ─── PLOTTING DISPATCH ────────────────────────────────────────────────────
-
-        if plot_heatmap_flag:
-            pivot = final_summary.pivot(index="Active share (%)", columns="External PA α (%)", values="Annual Return")
-            X = np.array(sorted(final_summary["External PA α (%)"].unique()))
-            Y = np.array(sorted(final_summary["Active share (%)"].unique()))
-            Z = pivot.values
-            fig, ax = plt.subplots(figsize=(6,5))
-            hm = ax.imshow(
-                Z,
-                origin="lower",
-                aspect="auto",
-                cmap="viridis",
-                extent=[X.min(), X.max(), Y.min(), Y.max()]
-            )
-            ax.set_xlabel("External PA α (%)")
-            ax.set_ylabel("Active share (%)")
-            ax.set_title("Heatmap: Annual Return vs α & Active share")
-            fig.colorbar(hm, ax=ax, label="Annual Return (decimal)")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_line_flag:
-            first_act = sorted(final_summary["Active share (%)"].unique())[0]
-            sub = final_summary[final_summary["Active share (%)"] == first_act]
-            x_vals = sub["External PA α (%)"].values
-            y_vals = sub["Annual Return"].values * 100.0
-            fig, ax = plt.subplots(figsize=(6,4))
-            ax.plot(x_vals, y_vals, marker="o")
-            ax.set_xlabel("External PA α (%)")
-            ax.set_ylabel("Annual Return (%)")
-            ax.set_title(f"Line: α vs Return (Active share={first_act:.1f}%)")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_boxplot_flag:
-            sample_key = list(all_raw_returns.keys())[0]
-            data = all_raw_returns[sample_key].iloc[:, 0].values * 100.0
-            fig, ax = plt.subplots(figsize=(5,4))
-            ax.boxplot(data, labels=[sample_key])
-            ax.set_ylabel("Monthly Return (%)")
-            ax.set_title(f"Boxplot: {sample_key}")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_scatter_flag:
-            fig, ax = plt.subplots(figsize=(5,4))
-            te_vals     = final_summary["Tracking Error (%)"].astype(float) * 100.0
-            breach_vals = final_summary["Breach %"].astype(float)
-            ax.scatter(te_vals, breach_vals, alpha=0.6)
-            ax.set_xlabel("Tracking Error (%)")
-            ax.set_ylabel("Breach Probability (%)")
-            ax.set_title("Scatter: TE vs Breach Probability")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_time_series_flag:
-            threshold = -buffer_multiple * idx_sigma
-            sample_key = list(all_raw_returns.keys())[0]
-            df_path = all_raw_returns[sample_key]
-            fig, ax = plt.subplots(figsize=(6,3))
-            ax.plot(df_path.index, df_path.iloc[:, 0], label=sample_key)
-            ax.axhline(y=threshold, color="red", linestyle="--", label="Threshold")
-            ax.set_title(f"Time Series (first-sim) for {sample_key}")
-            ax.set_xlabel("Month")
-            ax.set_ylabel("Monthly return")
-            ax.legend()
-            plt.tight_layout()
-            plt.show()
-
-        if plot_histogram_flag:
-            sample_key = list(all_raw_returns.keys())[0]
-            data = all_raw_returns[sample_key].iloc[:, 0].values * 100.0
-            fig, ax = plt.subplots(figsize=(5,4))
-            ax.hist(data, bins=30, alpha=0.7)
-            ax.set_xlabel("Monthly Return (%)")
-            ax.set_ylabel("Frequency")
-            ax.set_title(f"Histogram: {sample_key}")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_surface_flag:
-            xv = sorted(final_summary["External PA α (%)"].unique())
-            yv = sorted(final_summary["Active share (%)"].unique())
-            Z = final_summary.pivot(index="Active share (%)", columns="External PA α (%)", values="Breach %").values
-            X, Y = np.meshgrid(np.array(xv), np.array(yv))
-            fig = plt.figure(figsize=(6,5))
-            ax3 = fig.add_subplot(111, projection="3d")
-            surf = ax3.plot_surface(X, Y, Z, cmap="viridis", edgecolor="none")
-            ax3.set_xlabel("External PA α (%)")
-            ax3.set_ylabel("Active share (%)")
-            ax3.set_zlabel("Breach %")
-            ax3.set_title("Surface: Breach vs α & Active share")
-            fig.colorbar(surf, shrink=0.5, aspect=5, label="Breach %")
-            plt.tight_layout()
-            plt.show()
-
-    elif analysis_mode == "vol_mult":
-        # ---------------------------------------------------------------------------------------
-        # 8.9.d) Vol_Mult mode: Sweep SD multiple; other params fixed at midpoint.
-        # ---------------------------------------------------------------------------------------
-
-        E_mm = get_num(raw_params, "external_pa_capital", None)
-        A_mm = get_num(raw_params, "active_ext_capital",  None)
-        Z_mm = get_num(raw_params, "internal_pa_capital", None)
-        if any(v is None for v in [E_mm, A_mm, Z_mm]):
-            raise RuntimeError(
-                "In 'vol_mult' mode, supply: External PA capital (mm), "
-                "Active Extension capital (mm), Internal PA capital (mm)."
-            )
-
-        sd_list = build_range_int("sd_of_vol_mult", default_midpoint=default_sd_mult)
-
-        mu_H_list    = [default_mu_H]
-        sigma_H_list = [default_sigma_H]
-        mu_E_list    = [default_mu_E]
-        sigma_E_list = [default_sigma_E]
-        mu_M_list    = [default_mu_M]
-        sigma_M_list = [default_sigma_M]
-        ext_alpha_list = [default_ext_alpha_frac]
-        act_share_list = [default_act_share]
-
-        all_summaries = []
-        all_raw_returns = {}
-
-        for sd_mult in sd_list:
-            f_internal = simulate_financing(
-                12,
-                internal_financing_mean_annual/12,
-                internal_financing_vol_annual/12,
-                internal_spike_prob,
-                internal_spike_factor
-            )
-            f_ext_pa = simulate_financing(
-                12,
-                ext_pa_financing_mean_annual/12,
-                ext_pa_financing_vol_annual/12,
-                ext_pa_spike_prob,
-                ext_pa_spike_factor
-            )
-            f_act_ext = simulate_financing(
-                12,
-                act_ext_financing_mean_annual/12,
-                act_ext_financing_vol_annual/12,
-                act_ext_spike_prob,
-                act_ext_spike_factor
-            )
-
-            cov_mat = build_cov_matrix(
-                rho_idx_H, rho_idx_E, rho_idx_M,
-                rho_H_E, rho_H_M, rho_E_M,
-                idx_sigma, default_sigma_H, default_sigma_E, default_sigma_M
-            )
-
-            N_SIMULATIONS = get_num(raw_params, "N_SIMULATIONS", 5000)
-            N_MONTHS      = get_num(raw_params, "N_MONTHS",    12)
-
-            sims = np.random.multivariate_normal(
-                [mu_idx, default_mu_H, default_mu_E, default_mu_M],
-                cov_mat,
-                size=(N_SIMULATIONS, N_MONTHS)
-            )
-
-            f_int_matrix    = np.tile(f_internal, (N_SIMULATIONS, 1))
-            f_ext_pa_matrix = np.tile(f_ext_pa,    (N_SIMULATIONS, 1))
-            f_act_ext_matrix= np.tile(f_act_ext,   (N_SIMULATIONS, 1))
-
-            results = {
-                "Base":       np.zeros(N_SIMULATIONS),
-                "ExternalPA": np.zeros(N_SIMULATIONS),
-                "ActiveExt":  np.zeros(N_SIMULATIONS)
-            }
-            dates_sim = pd.date_range(
-                start=idx_series.index[-1] + pd.DateOffset(months=1),
-                periods=N_MONTHS, freq="ME"
-            )
-            raw_returns = {
-                "Base":       pd.DataFrame(index=dates_sim),
-                "ExternalPA": pd.DataFrame(index=dates_sim),
-                "ActiveExt":  pd.DataFrame(index=dates_sim),
-            }
-
-            for sim_i in range(N_SIMULATIONS):
-                r_beta = sims[sim_i, :, 0]
-                r_H    = sims[sim_i, :, 1]
-                r_E    = sims[sim_i, :, 2]
-                r_M    = sims[sim_i, :, 3]
-
-                R_base   = (r_beta - f_int_matrix[sim_i]) + r_H
-                R_extpa  = (r_beta - f_ext_pa_matrix[sim_i]) * default_ext_alpha_frac + r_M * default_ext_alpha_frac
-                R_actext = (r_beta - f_act_ext_matrix[sim_i]) * default_act_share + r_E * default_act_share
-
-                results["Base"][sim_i]       = np.prod(1 + R_base) - 1
-                results["ExternalPA"][sim_i] = np.prod(1 + R_extpa) - 1
-                results["ActiveExt"][sim_i]  = np.prod(1 + R_actext) - 1
-
-                if sim_i == 0:
-                    raw_returns["Base"]       = pd.DataFrame({"Base": R_base}, index=dates_sim)
-                    raw_returns["ExternalPA"] = pd.DataFrame({"ExternalPA": R_extpa}, index=dates_sim)
-                    raw_returns["ActiveExt"]  = pd.DataFrame({"ActiveExt": R_actext}, index=dates_sim)
-
-            df_yearly = pd.DataFrame(results)
-            summary_rows = []
-            for cfg, arr in df_yearly.items():
-                ann_ret = np.mean(arr)
-                ann_vol = np.std(arr, ddof=1)
-                var_95  = np.percentile(arr, 5)
-                te      = np.nan
-
-                mr_series = raw_returns[cfg].iloc[:, 0]
-                threshold = - (sd_mult * idx_sigma)
-                breach_pct = np.mean(mr_series < threshold) * 100
-
-                summary_rows.append({
-                    "Config":        cfg,
-                    "SD mult":       sd_mult,
-                    "Internal PA (mm)": Z_mm,
-                    "External PA (mm)": E_mm,
-                    "Active Ext (mm)":  A_mm,
-                    "Annual Return":      ann_ret,
-                    "Annual Vol":         ann_vol,
-                    "VaR 95":             var_95,
-                    "TE (est.)":          te,
-                    "Breach %":           breach_pct
-                })
-
-            summary_df = pd.DataFrame(summary_rows)
-            all_summaries.append(summary_df)
-
-            for key, df_r in raw_returns.items():
-                sheet_key = f"{key}_SD{sd_mult}"
-                all_raw_returns[sheet_key] = df_r
-
-        final_summary = pd.concat(all_summaries, ignore_index=True)
-
-        inputs_dict = {
-            "Analysis mode":        "vol_mult",
-            "SD multiple min":      get_num(raw_params, "sd_of_vol_mult_min", ""),
-            "SD multiple max":      get_num(raw_params, "sd_of_vol_mult_max", ""),
-            "SD multiple step":     get_num(raw_params, "sd_of_vol_mult_step", ""),
-            "External PA capital (mm)":     E_mm,
-            "Active Extension capital (mm)":A_mm,
-            "Internal PA capital (mm)":     Z_mm,
-            "Buffer multiple":      buffer_multiple
-        }
-
-        export_to_excel(inputs_dict, final_summary, all_raw_returns)
-
-        display_df = final_summary.copy()
-        display_df = display_df.rename(columns={
-            "Annual Return": "Annual Return (%)",
-            "Annual Vol":    "Annual Volatility (%)",
-            "VaR 95":        "95%-VaR (%)",
-            "TE (est.)":     "Tracking Error (%)",
-            "Breach %":      "Breach Probability (%)"
-        })
-        for col in ["Annual Return (%)", "Annual Volatility (%)", "95%-VaR (%)", "Tracking Error (%)", "Breach Probability (%)"]:
-            display_df[col] = display_df[col].map("{:.1f}%".format)
-
-        pd.set_option("display.max_rows", None)
-        print("\n=== Summary Table (Vol_Mult Mode) ===\n")
-        print(display_df.to_string(index=False))
-        print()
-
-        # ─── PLOTTING DISPATCH ────────────────────────────────────────────────────
-
-        if plot_heatmap_flag:
-            pivot = final_summary.pivot(index="SD mult", columns="Config", values="Annual Return")
-            # Example: heatmap of SD mult vs Config (Base, ExternalPA, ActiveExt) → annual return
-            X = np.arange(len(pivot.columns))
-            Y = pivot.index.values
-            Z = pivot.values
-            fig, ax = plt.subplots(figsize=(6,5))
-            hm = ax.imshow(
-                Z,
-                origin="lower",
-                aspect="auto",
-                cmap="viridis",
-                extent=[0, len(X)-1, Y.min(), Y.max()]
-            )
-            ax.set_xticks(X)
-            ax.set_xticklabels(pivot.columns, rotation=45, ha="right")
-            ax.set_ylabel("SD mult")
-            ax.set_title("Heatmap: Annual Return vs Config & SD mult")
-            fig.colorbar(hm, ax=ax, label="Annual Return (decimal)")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_line_flag:
-            # Line: For each Config, plot Annual Return vs SD mult
-            fig, ax = plt.subplots(figsize=(6,4))
-            for cfg in final_summary["Config"].unique():
-                sub = final_summary[final_summary["Config"] == cfg]
-                x_vals = sub["SD mult"].values
-                y_vals = sub["Annual Return"].values * 100.0
-                ax.plot(x_vals, y_vals, marker="o", label=cfg)
-            ax.set_xlabel("SD mult")
-            ax.set_ylabel("Annual Return (%)")
-            ax.set_title("Line: Return vs SD mult by Config")
-            ax.legend()
-            plt.tight_layout()
-            plt.show()
-
-        if plot_boxplot_flag:
-            sample_key = list(all_raw_returns.keys())[0]
-            data = all_raw_returns[sample_key].iloc[:, 0].values * 100.0
-            fig, ax = plt.subplots(figsize=(5,4))
-            ax.boxplot(data, labels=[sample_key])
-            ax.set_ylabel("Monthly Return (%)")
-            ax.set_title(f"Boxplot: {sample_key}")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_scatter_flag:
-            fig, ax = plt.subplots(figsize=(5,4))
-            te_vals     = final_summary["Tracking Error (%)"].astype(float) * 100.0
-            breach_vals = final_summary["Breach %"].astype(float)
-            ax.scatter(te_vals, breach_vals, alpha=0.6)
-            ax.set_xlabel("Tracking Error (%)")
-            ax.set_ylabel("Breach Probability (%)")
-            ax.set_title("Scatter: TE vs Breach Probability")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_time_series_flag:
-            threshold = -buffer_multiple * idx_sigma
-            sample_key = list(all_raw_returns.keys())[0]
-            df_path = all_raw_returns[sample_key]
-            fig, ax = plt.subplots(figsize=(6,3))
-            ax.plot(df_path.index, df_path.iloc[:, 0], label=sample_key)
-            ax.axhline(y=threshold, color="red", linestyle="--", label="Threshold")
-            ax.set_title(f"Time Series (first-sim) for {sample_key}")
-            ax.set_xlabel("Month")
-            ax.set_ylabel("Monthly return")
-            ax.legend()
-            plt.tight_layout()
-            plt.show()
-
-        if plot_histogram_flag:
-            sample_key = list(all_raw_returns.keys())[0]
-            data = all_raw_returns[sample_key].iloc[:, 0].values * 100.0
-            fig, ax = plt.subplots(figsize=(5,4))
-            ax.hist(data, bins=30, alpha=0.7)
-            ax.set_xlabel("Monthly Return (%)")
-            ax.set_ylabel("Frequency")
-            ax.set_title(f"Histogram: {sample_key}")
-            plt.tight_layout()
-            plt.show()
-
-        if plot_surface_flag:
-            xv = sorted(final_summary["SD mult"].unique())
-            configs = final_summary["Config"].unique()
-            Z = final_summary.pivot(index="SD mult", columns="Config", values="Breach %").values
-            X, Y = np.meshgrid(np.array(range(len(configs))), np.array(xv))
-            fig = plt.figure(figsize=(6,5))
-            ax3 = fig.add_subplot(111, projection="3d")
-            surf = ax3.plot_surface(X, Y, Z, cmap="viridis", edgecolor="none")
-            ax3.set_xticks(range(len(configs)))
-            ax3.set_xticklabels(configs, rotation=45, ha="right")
-            ax3.set_ylabel("SD mult")
-            ax3.set_zlabel("Breach %")
-            ax3.set_title("Surface: Breach vs Config & SD mult")
-            fig.colorbar(surf, shrink=0.5, aspect=5, label="Breach %")
-            plt.tight_layout()
-            plt.show()
-
-    else:
-        raise RuntimeError(f"Unexpected analysis mode: '{analysis_mode}'")
-
-
-# In[1]:
-
-
-import pandas as pd
-from pathlib import Path
-import openpyxl
-
-def export_everything_to_excel(
-    inputs_dict: dict,
-    summary_df: pd.DataFrame,
-    raw_returns_dict: dict,
-    index_csv_path: Path,
-    python_code_path: Path,
-    documentation_path: Path,
-    output_filename: str = "Everything.xlsx"
-):
-    """
-    Write a single Excel workbook with multiple tabs:
-      1) Inputs         → inputs_dict + a row for index_csv_path
-      2) Summary        → summary_df
-      3+) Raw Returns   → one sheet per key in raw_returns_dict
-      n-1) Code        → full contents of python_code_path (one line/cell)
-      n  ) Documentation → full contents of documentation_path (one line/cell)
-
-    - inputs_dict:      { parameter_name: value }
-    - summary_df:       pandas DataFrame of human‐friendly summary (no index)
-    - raw_returns_dict: { sheet_name: DataFrame } (each DataFrame indexed by Date)
-    - index_csv_path:   Path to the index CSV file (we’ll dump that path into the Inputs tab)
-    - python_code_path: Path to “portable_alpha_model.py”
-    - documentation_path: Path to “model_documentation.md”
-    - output_filename:  Name of the final Excel file to write
-    """
-    # 1) Build a DataFrame for Inputs, inserting “Index CSV (full path)” at the top
-    df_inputs = pd.DataFrame.from_dict(inputs_dict, orient="index", columns=["Value"])
-    df_inputs.index.name = "Parameter"
-    df_inputs.reset_index(inplace=True)
-
-    # Insert the index‐CSV row at the very top
-    df_inputs.loc[-1] = ["Index CSV (full path)", str(index_csv_path)]
-    df_inputs.index = df_inputs.index + 1
-    df_inputs.sort_index(inplace=True)
-
-    # 2) Prepare to write everything into one Excel file
-    with pd.ExcelWriter(output_filename, engine="openpyxl") as writer:
-        # --- Inputs tab ---
-        df_inputs.to_excel(writer, sheet_name="Inputs", index=False)
-
-        # --- Summary tab ---
-        summary_df.to_excel(writer, sheet_name="Summary", index=False)
-
-        # --- Raw Returns tabs ---
-        # Excel limits sheet names to 31 characters; truncate if needed.
-        for sheet_name, df_rr in raw_returns_dict.items():
-            safe_name = sheet_name if len(sheet_name) <= 31 else sheet_name[:28] + "..."
-            df_rr.to_excel(writer, sheet_name=safe_name, index=True)
-
-        # --- Code tab ---
-        # Read the .py file line by line and dump into “Code” sheet, column A
-        code_lines = Path(python_code_path).read_text(encoding="utf-8").splitlines()
-        wb = writer.book
-        ws_code = wb.create_sheet(title="Code")
-        for row_idx, line in enumerate(code_lines, start=1):
-            ws_code.cell(row=row_idx, column=1, value=line)
-        # Widen column A so code is readable
-        ws_code.column_dimensions["A"].width = 100
-        ws_code.sheet_view.showGridLines = False
-
-        # --- Documentation tab ---
-        # Read the Markdown (or plain‐text) file and dump into “Documentation” sheet
-        doc_lines = Path(documentation_path).read_text(encoding="utf-8").splitlines()
-        ws_doc = wb.create_sheet(title="Documentation")
-        for row_idx, line in enumerate(doc_lines, start=1):
-            ws_doc.cell(row=row_idx, column=1, value=line)
-        ws_doc.column_dimensions["A"].width = 80
-        ws_doc.sheet_view.showGridLines = False
-
-    print(f"All tabs exported to {output_filename}.")
-
-
-
-# # Portable Alpha + Active Extension Model Specification
-# 
-# Below is a comprehensive description of the updated portable‐alpha + active‐extension model, ready to paste into a Markdown cell. Every section is clearly labeled, and all equations use LaTeX delimiters.
-# 
-# ---
-# 
-# ## 1. Purpose and High-Level Overview
-# 
-# **Goal:**  
-# Construct a Monte Carlo framework that allocates a fixed pool of capital (e.g. \$1 b) across three “sleeves” (Internal, External Portable-Alpha, and Active Extension), simulates joint returns on Index, In-House α, Extension α, and External PA α, and then reports portfolio metrics (annual return, volatility, VaR, tracking error, breach probability).
-# 
-# Key innovations vs. a simpler portable-alpha model:  
-# 1. **Separate “reference period”** used to compute index volatility σₙ, which in turn determines the cash/margin needed to synthetically hold 1:1 index exposure.  
-# 2. **Three explicit buckets** whose dollar-amounts sum to \$ 1 b, avoiding any double-counting of β + α exposures.  
-# 3. **Active Extension bucket** that can be “150/50” or “170/70” long/short, specified by an “Active share (%)” input. By default, we assume 150/50 (i.e. Active share = 50 %) unless the user overrides.
-# 
-# Everything ultimately flows into a set of formulas—one per bucket—that map monthly draws of
-# \[
-# (r_{\beta},\,r_{H},\,r_{E},\,r_{M}) 
-# \quad\text{and}\quad
-# f_t
-# \]
-# into portfolio returns.
-# 
-# ---
-# 
-# ## 2. Core Assumptions and Variables
-# 
-# 1. **Index (β) returns**  
-#    - We load a historical time series of monthly total returns on the S&P 500 TR (or whichever index) from a CSV.  
-#    - We partition that series into:  
-#      1. A **reference window** (e.g. 2010 – 2014) used to compute “reference volatility” σₙ.  
-#      2. An **analysis window** (e.g. 2015 – 2020) used to compute the actual mean (μₙ) and volatility (σₙ) that drive our Monte Carlo draws.
-# 
-# 2. **Three α-streams** (simulated jointly with β)  
-#    - **In-House α** \($r_H$\):  
-#      - Mean = μ_H/12  
-#      - Vol = σ_H / √12  
-#      - Correlation ρ_{β,H} with β.  
-#    - **Extension α** \($r_E$\):  
-#      - Mean = μ_E/12  
-#      - Vol = σ_E / √12  
-#      - Correlation ρ_{β,E} with β.  
-#    - **External PA α** \($r_M$\):  
-#      - Mean = μ_M/12  
-#      - Vol = σ_M / √12  
-#      - Correlation ρ_{β,M} with β.
-# 
-# 3. **Financing spread** \($f_t$\)  
-#    - A month-by-month random draw around a drift (financing_mean/12) with vol (financing_vol/12) and occasional jumps of size (spike_factor × (financing_vol/12)), happening with probability spike_prob.  
-#    - In each month, any bucket that holds \((r_{\beta} − f_t)\) is charged that financing cost.
-# 
-# 4. **Total fund capital** (in millions, default = 1000)  
-#    - We allocate exactly \$ 1 b across three buckets (plus any residual “cash-leftover” after margin).
-# 
-# 5. **Standard-deviation multiple** (sd_of_vol_mult, default = 3)  
-#    - “To hold \$ 1 b of index exposure, you must keep aside cash = σₙ × (sd_of_vol_mult) × \$ 1 b.”  
-#    - That cash is the **internal beta-backing** or “margin cash,” needed for futures/swaps.
-# 
-# 6. **Three capital buckets** (all in \$ mm, must sum to 1000)  
-#    1. **External PA capital** \($X$\)  
-#       - Manager takes \$ X m; buys \$ X m of index (β) and \((external_pa_alpha_frac × X m)\) of α.  
-#       - Default α fraction = 50 % (\(\theta_{\mathrm{ExtPA}}=0.50\)).  
-#    2. **Active Extension capital** \($Y$\)  
-#       - Manager runs a long/short portfolio with **Active share** \(S\).  
-#       - By default, “150/50” means \(S=0.50\) (i.e. 150 % long, 50 % short → net 100 %).  
-#    3. **Internal PA capital** \($Z$\)  
-#       - Runs in-house α; the remainder of internal cash (beyond margin) is used here.
-# 
-# 7. **Internal beta backing** \($W$\) (computed, not user-entered)  
-#    \[
-#      W = \sigma_{\text{ref}} \times (\mathrm{sd\_of\_vol\_mult}) \times 1000 \quad (\text{\$ mm}).
-#    \]
-#    - That cash sits in reserve to back a \$ 1 b index position via futures/swaps.  
-#    - Because the external PA and active-extension managers each hold index exposure “inside” their \$ X m or \$ Y m, **you do not hold margin for that portion**. You only hold \(W\) for the total \$ 1 b.
-# 
-# ---
-# 
-# ## 3. Capital-Allocation Equations
-# 
-# 1. **Check**:  
-#    \[
-#      X + Y + Z \;=\; 1000 \quad(\text{\$ mm}),
-#    \]  
-#    where  
-#    - \(X = \text{external\_pa\_capital},\)  
-#    - \(Y = \text{active\_ext\_capital},\)  
-#    - \(Z = \text{internal\_pa\_capital}.\)
-# 
-# 2. **Margin (internal beta backing)**:  
-#    \[
-#      W = \sigma_{\text{ref}} \times (\mathrm{sd\_of\_vol\_mult}) \times 1000 \quad (\text{\$ mm}).
-#    \]
-# 
-# 3. **Internal cash leftover (runs In-House PA)**:  
-#    \[
-#      \text{internal\_cash\_leftover} 
-#      = 1000 - W - Z \quad (\text{\$ mm}).
-#    \]
-# 
-#    - If \(W + Z > 1000\), the capital structure is infeasible (you cannot hold margin + in-house PA + external buckets all on \$ 1 b).
-# 
-# ---
-# 
-# ## 4. Return Equations
-# 
-# We simulate, for each month \(t\):
-# 
-# \[
-# (r_{\beta,t},\,r_{H,t},\,r_{E,t},\,r_{M,t}) 
-# \;\sim\;\text{MVN}\bigl([\mu_{\beta},\,\mu_H,\,\mu_E,\,\mu_M],\,\Sigma\bigr),
-# \]
-# with
-# - \(\mu_{\beta} = \mu_{\text{idx}}\) (monthly mean from analysis window),  
-# - \(\mu_H = \frac{\mu_H^{(\text{annual})}}{12}\),  
-# - \(\mu_E = \frac{\mu_E^{(\text{annual})}}{12}\),  
-# - \(\mu_M = \frac{\mu_M^{(\text{annual})}}{12}\).  
-# 
-# Covariance \(\Sigma\) built from:  
-# - \(\sigma_{\beta} = \sigma_{\text{ref}}\) (monthly vol from reference window),  
-# - \(\sigma_H = \sigma_H^{(\text{annual})}/\sqrt{12}\),  
-# - \(\sigma_E = \sigma_E^{(\text{annual})}/\sqrt{12}\),  
-# - \(\sigma_M = \sigma_M^{(\text{annual})}/\sqrt{12}\),  
-# - Pairwise correlations \(\rho_{\beta,H},\,\rho_{\beta,E},\,\rho_{\beta,M},\,\rho_{H,E},\,\dots\).  
-# 
-# Additionally, each month we draw a financing cost:
-# \[
-# f_t = \frac{\text{financing_mean}}{12} + \varepsilon_t,\quad
-# \varepsilon_t \sim \mathcal{N}\bigl(0,\;(\tfrac{\text{financing_vol}}{12})^2\bigr),
-# \]
-# with probability \(\text{spike_prob}\) of a jump \(=\text{spike_factor} \times \frac{\text{financing_vol}}{12}\).
-# 
-# ---
-# 
-# ### 4.1. Base (All In-House) Strategy
-# 
-# \[
-# R_{\text{Base},t}
-# = \; (r_{\beta,t} - f_t)\,\times\,w_{\beta_H}
-# \;+\; r_{H,t}\,\times\,w_{\alpha_H}.
-# \]
-# By default, \(w_{\beta_H} = 0.50\) and \(w_{\alpha_H} = 0.50\).
-# 
-# ---
-# 
-# ### 4.2. External PA Strategy
-# 
-# - Capital allocated: \(X = \text{external_pa_capital}\).  
-# - Manager buys \$ X m of index (β) and allocates \(\theta_{\mathrm{ExtPA}} = \text{external_pa_alpha_frac}\) of that \$ X m to α.  
-# 
-# Return formula:
-# \[
-# R_{\text{ExtPA},t}
-# = \underbrace{\frac{X}{1000}}_{w_{\beta}^{\text{ExtPA}}}\,(r_{\beta,t} - f_t)
-# \;+\;\underbrace{\tfrac{X}{1000} \,\times\,\theta_{\mathrm{ExtPA}}}_{w_{\alpha}^{\text{ExtPA}}}\;(r_{M,t}).
-# \]
-# - If \(\theta_{\mathrm{ExtPA}} = 0.50\), then half of \$ X m is alpha, half is index.
-# 
-# ---
-# 
-# ### 4.3. Active Extension Strategy
-# 
-# - Capital allocated: \(Y = \text{active_ext_capital}\).  
-# - Manager runs a long/short portfolio with **Active share** \(S = \frac{\text{active_share_percent}}{100}\).  
-#   - E.g. 150/50 → \(S = 0.50\).  
-#   - 170/70 → \(S = 0.70\).
-# 
-# Return formula:
-# \[
-# R_{\text{ActExt},t}
-# = \underbrace{\frac{Y}{1000}}_{w_{\beta}^{\text{ActExt}}}\,(r_{\beta,t} - f_t)
-# \;+\;\underbrace{\frac{Y}{1000}\,\times\,S}_{w_{\alpha}^{\text{ActExt}}}\;(r_{E,t}).
-# \]
-# - The manager’s long/short is embedded in \(r_{E,t}\).  
-# 
-# ---
-# 
-# ### 4.4. Internal Margin & Internal PA
-# 
-# Because both external PA and active-extension managers hold their own index exposure, on your books you only need to hold margin for a single \$ 1 b of index. That is:
-# \[
-# W = \sigma_{\text{ref}} \times (\mathrm{sd\_of\_vol\_mult}) \times 1000 \quad (\text{\$ mm}).
-# \]
-# Then you also decide to run \(Z = \text{internal_pa_capital}\) in-house PA:
-# 
-# - **Internal Beta (margin):**  
-#   \[
-#   R_{\text{IntBet},t}
-#   = \Bigl(\tfrac{W}{1000}\Bigr)\,(r_{\beta,t} - f_t).
-#   \]
-# - **Internal PA alpha:**  
-#   \[
-#   R_{\text{IntPA},t}
-#   = \Bigl(\tfrac{Z}{1000}\Bigr)\,(r_{H,t}).
-#   \]
-# - **Internal cash leftover:**  
-#   \[
-#   \text{internal\_cash\_leftover} = 1000 - W - Z \quad (\text{if positive, earns 0}).
-#   \]
-# 
-# ---
-# 
-# ## 5. Putting It All Together in Simulation
-# 
-# 1. **Read user inputs** (via `load_parameters()`):
-#    - Dates: `start_date`, `end_date`, `ref_start_date`, `ref_end_date`
-#    - Vol/risk: `sd_of_vol_mult`
-#    - Returns: `financing_mean`, `financing_vol`, `μ_H`, `σ_H`, `μ_E`, `σ_E`, `μ_M`, `σ_M`
-#    - Correlations: `ρ_{β,H}`, `ρ_{β,E}`, `ρ_{β,M}`, `ρ_{H,E}`, `ρ_{H,M}`, `ρ_{E,M}`
-#    - Capital buckets: `external_pa_capital`, `external_pa_alpha_frac`, `active_ext_capital`, `active_share_percent`, `internal_pa_capital`
-#    - Total fund capital (mm): default = 1000
-# 
-# 2. **Load index CSV** → `idx_full` (monthly total returns).
-# 
-# 3. **Filter**  
-#    - **`idx_series`** = `idx_full[ start_date : end_date ]` → used for μ_β and σ_β.  
-#    - **`idx_ref`** = `idx_full[ ref_start_date : ref_end_date ]` → used for σ_ref.
-# 
-# 4. **Compute**  
-#    \[
-#      \mu_{\beta} = \mathrm{mean}(idx\_series), 
-#      \quad
-#      \sigma_{\beta} = \mathrm{std}(idx\_series),
-#      \quad
-#      \sigma_{\text{ref}} = \mathrm{std}(idx\_ref).
-#    \]
-# 
-# 5. **Margin-backing**  
-#    \[
-#      W = \sigma_{\text{ref}} \times \mathrm{sd\_of\_vol\_mult} \times 1000.
-#    \]
-#    If \(W + Z > 1000\), error. Else compute
-#    \[
-#      \text{internal\_cash\_leftover} = 1000 - W - Z.
-#    \]
-# 
-# 6. **Build covariance matrix** \(\Sigma\) for \((r_{\beta}, r_H, r_E, r_M)\) using  
-#    \(\sigma_{\beta} = \sigma_{\text{ref}},\; \sigma_H = \frac{\sigma_H^{(\text{annual})}}{\sqrt{12}},\; \sigma_E = \frac{\sigma_E^{(\text{annual})}}{\sqrt{12}},\; \sigma_M = \frac{\sigma_M^{(\text{annual})}}{\sqrt{12}},\)  
-#    and correlations.
-# 
-# 7. **Monte Carlo draws**:  
-#    For each of \(N_{\text{SIMULATIONS}}\) trials, simulate a \(T=N_{\text{MONTHS}}\)-month path of \(\,(r_{\beta,t},\,r_{H,t},\,r_{E,t},\,r_{M,t})\) and financing \(f_t\).
-# 
-# 8. **Compute monthly returns** for each bucket:
-#    - **Base**:  
-#      \[
-#        R_{\text{Base},t} 
-#        = (r_{\beta,t} - f_t)\,w_{\beta_H} \;+\; r_{H,t}\,w_{\alpha_H}.
-#      \]
-#    - **External PA**:  
-#      \[
-#        R_{\text{ExtPA},t} 
-#        = \bigl(\tfrac{X}{1000}\bigr)(r_{\beta,t} - f_t) 
-#        \;+\; \bigl(\tfrac{X}{1000}\,\theta_{\mathrm{ExtPA}}\bigr)(r_{M,t}).
-#      \]
-#    - **Active Extension**:  
-#      \[
-#        R_{\text{ActExt},t} 
-#        = \bigl(\tfrac{Y}{1000}\bigr)(r_{\beta,t} - f_t) 
-#        \;+\; \bigl(\tfrac{Y}{1000}\,S\bigr)(r_{E,t}).
-#      \]
-#    - **Internal Beta**:  
-#      \[
-#        R_{\text{IntBet},t} 
-#        = \bigl(\tfrac{W}{1000}\bigr)(r_{\beta,t} - f_t).
-#      \]
-#    - **Internal PA α**:  
-#      \[
-#        R_{\text{IntPA},t} 
-#        = \bigl(\tfrac{Z}{1000}\bigr)(r_{H,t}).
-#      \]
-# 
-#    Note: We only report three portfolios—“Base,” “ExternalPA,” and “ActiveExt.” Each one compounds its own monthly returns for a 12-month horizon:
-#    \[
-#      R_{\text{bucket}}^{\text{(year)}} 
-#      = \prod_{t=1}^{12} (1 + R_{\text{bucket},t}) - 1.
-#    \]
-# 
-# 9. **Compute performance metrics** for each portfolio’s annual returns:
-#    - **Ann Return** = sample mean.  
-#    - **Ann Vol** = sample standard deviation.  
-#    - **VaR 95%** = 5th percentile.  
-#    - **Tracking Error** = std of (bucket_return − index_return).  
-#    - **Breach Probability** = % of months (in the first sim path) where \((r_{\text{bucket},t} < -\,\mathrm{buffer\_multiple}\times\sigma_{\beta})\).
-# 
-# 10. **Export**  
-#     - **Inputs sheet:** all parameters (dates, vol caps, bucket sizes, α fractions, active share, σ_ref, W, internal cash leftover, etc.).  
-#     - **Summary sheet:** metrics for “Base,” “ExternalPA,” and “ActiveExt.”  
-#     - **Raw returns sheets:** monthly paths for each bucket (first simulation) so users can inspect breach months.
-# 
-# ---
-# 
-# ## 6. Input Parameters Summary
-# 
-# Below is a consolidated list of every input variable that must appear in the “friendly” CSV:
-# 
-# 1. **Date ranges**  
-#    - `Start date` → `start_date` (analysis window begin).  
-#    - `End date` → `end_date` (analysis window end).  
-#    - `Reference start date` → `ref_start_date` (for σ_ref).  
-#    - `Reference end date` → `ref_end_date` (for σ_ref).  
-# 
-# 2. **Financing parameters**  
-#    - `Annual financing mean (%)` → `financing_mean_annual` (default = 0.50 %).  
-#    - `Annual financing vol (%)` → `financing_vol_annual` (default = 0.10 %).  
-#    - `Monthly spike probability` → `spike_prob` (default = 2 %).  
-#    - `Spike size (σ × multiplier)` → `spike_factor` (default = 2.25).  
-# 
-# 3. **In-House PA parameters**  
-#    - `In-House annual return (%)` → `mu_H` (default = 4.00 %).  
-#    - `In-House annual vol (%)` → `sigma_H` (default = 1.00 %).  
-#    - `In-House β` → `w_beta_H` (default = 0.50).  
-#    - `In-House α` → `w_alpha_H` (default = 0.50).  
-# 
-# 4. **Extension α parameters**  
-#    - `Alpha-Extension annual return (%)` → `mu_E` (default = 5.00 %).  
-#    - `Alpha-Extension annual vol (%)` → `sigma_E` (default = 2.00 %).  
-#    - `Active Extension capital (mm)` → `active_ext_capital` (default = 0).  
-#    - `Active share (%)` → `active_share_percent` (default = 50 % ⇒ a 150/50 program).  
-# 
-# 5. **External PA α parameters**  
-#    - `External annual return (%)` → `mu_M` (default = 3.00 %).  
-#    - `External annual vol (%)` → `sigma_M` (default = 2.00 %).  
-#    - `External PA capital (mm)` → `external_pa_capital` (default = 0).  
-#    - `External PA α fraction (%)` → `external_pa_alpha_frac` (default = 50 %).  
-# 
-# 6. **Correlations**  
-#    - `Corr index–In-House` → `rho_idx_H` (default = 0.05).  
-#    - `Corr index–Alpha-Extension` → `rho_idx_E` (default = 0.00).  
-#    - `Corr index–External` → `rho_idx_M` (default = 0.00).  
-#    - `Corr In-House–Alpha-Extension` → `rho_H_E` (default = 0.10).  
-#    - `Corr In-House–External` → `rho_H_M` (default = 0.10).  
-#    - `Corr Alpha-Extension–External` → `rho_E_M` (default = 0.00).  
-# 
-# 7. **Capital & risk backing**  
-#    - `Total fund capital (mm)` → `total_fund_capital` (default = 1000).  
-#    - `Standard deviation multiple` → `sd_of_vol_mult` (default = 3).  
-#    - `Internal PA capital (mm)` → `internal_pa_capital` (default = 0).  
-#    - `Buffer multiple` → `buffer_multiple` (default = 3).  
-# 
-# 8. **Legacy/Optional**  
-#    - `X grid (mm)` → `X_grid_list` (list of X values).  
-#    - `External manager α fractions` → `EM_thetas_list`.
-# 
-# ---
-# 
-# ## 7. Output Considerations
-# 
-# 1. **Inputs sheet (Excel):**  
-#    List every single parameter, including:  
-#    - Date windows (analysis and reference),  
-#    - Financing parameters,  
-#    - α-stream parameters,  
-#    - Correlations,  
-#    - Capital buckets (X, Y, Z),  
-#    - SD multiple, margin backing \(W\), internal cash leftover,  
-#    - Active share, etc.
-# 
-# 2. **Summary sheet (Excel):**  
-#    For each portfolio (“Base,” “ExternalPA,” “ActiveExt”), show:  
-#    - Annual Return (%),  
-#    - Annual Volatility (%),  
-#    - 95 % VaR (%),  
-#    - Tracking Error (%),  
-#    - Breach Probability (%).
-# 
-# 3. **Raw returns sheets (Excel):**  
-#    Monthly paths for each bucket (first simulation), so users can inspect “breach” months where \(R_{t} < -(\text{buffer_multiple} × σ_{\beta})\).
-# 
-# 4. **Console output:**  
-#    A “human‐friendly” summary, e.g.:  
-#    > For “ExternalPA (X = 300, 50 % α)”:  
-#    > • Expected annual return: 10.2 %  
-#    > • Annual volatility: 12.3 %  
-#    > • 95 % VaR: −3.4 %  
-#    > • Tracking error: 8.7 %  
-#    > • Breach probability: 2.0 %.
-# 
-# ---
-# 
-# ## 8. Intuition Behind Key Pieces
-# 
-# 1. **Why a separate reference period?**  
-#    - If you measure index volatility over the same window you analyze (e.g. 2015–2020), you capture “current regime” vol. Often, managers prefer a longer/different window (e.g. 2010–2014) to gauge typical funding volatility. That reference σₙ, times a multiple (e.g. 3×), tells you how much cash to set aside to back \$ 1 b of index exposure.
-# 
-# 2. **Why Active share as a percentage?**  
-#    - A “150/50” program has 150 % long and 50 % short = net 100 %. Its “active share” is reported as 50 %.  
-#    - If you want “170/70,” then active share = 70 %.  
-#    - The code converts “Active share (%)” to decimal \(S\). For a 150/50 program, the default is 50 % (\(S = 0.50\)).
-# 
-# 3. **Why each bucket’s formula ensures no double-counting**  
-#    - Whenever you give \$ X m to External PA, that manager holds the index exposure on your behalf. You do not hold margin for that portion. Similarly, the Active Extension manager holds their own index.  
-#    - On your books, you only need to hold margin for a single \$ 1 b index. That is \(W\).  
-#    - Once you hand \$ X m to external PA and \$ Y m to active ext, **both managers** hold \((X + Y)\) of index on your behalf. So your margin \(W\) backs the *entire* \$ 1 b, not just the “leftover” portion.
-# 
-# ---
-# 
-# ## 9. Step-by-Step Implementation Checklist
-# 
-# 1. **Read and parse user parameters** (dates, vols, α fractions, active share, capital buckets, etc.).  
-# 2. **Load index CSV** → `idx_full`.  
-# 3. **Filter** → `idx_ref` for σ_ref; `idx_series` for μ_β and σ_β.  
-# 4. **Compute**:  
-#    \[
-#      μ_β = \mathrm{mean}(idx\_series), 
-#      \quad
-#      σ_β = \mathrm{std}(idx\_series), 
-#      \quad
-#      σ_{\text{ref}} = \mathrm{std}(idx\_ref).
-#    \]
-# 5. **Margin-backing**:  
-#    \[
-#      W = σ_{\text{ref}} × (\mathrm{sd\_of\_vol\_mult}) × 1000.
-#    \]
-#    Check \(W + Z ≤ 1000\). Compute leftover internal cash = \(1000 - W - Z\).
-# 
-# 6. **Build covariance matrix** using \((σ_{\text{ref}},\,σ_H/√{12},\,σ_E/√{12},\,σ_M/√{12})\) plus correlations.
-# 
-# 7. **Monte Carlo draws**:  
-#    For each of \(N_{\mathrm{SIM}}\) trials, simulate a path of length \(T = N_{\mathrm{MONTHS}}\) for \((r_{\beta,t},\,r_{H,t},\,r_{E,t},\,r_{M,t})\) and financing \(f_t\).
-# 
-# 8. **Compute monthly returns**:
-#    - **Base**:  
-#      \[
-#        R_{\text{Base},t} = (r_{\beta,t} - f_t)\,w_{\beta_H} + r_{H,t}\,w_{\alpha_H}.
-#      \]
-#    - **External PA**:  
-#      \[
-#        R_{\text{ExtPA},t}
-#        = \Bigl(\tfrac{X}{1000}\Bigr)(r_{\beta,t} - f_t)
-#        \;+\;\Bigl(\tfrac{X}{1000}\,\theta_{\mathrm{ExtPA}}\Bigr)(r_{M,t}).
-#      \]
-#    - **Active Extension**:  
-#      \[
-#        R_{\text{ActExt},t}
-#        = \Bigl(\tfrac{Y}{1000}\Bigr)(r_{\beta,t} - f_t)
-#        \;+\;\Bigl(\tfrac{Y}{1000}\,S\Bigr)(r_{E,t}).
-#      \]
-#    - **Internal Beta**:  
-#      \[
-#        R_{\text{IntBet},t} 
-#        = \Bigl(\tfrac{W}{1000}\Bigr)(r_{\beta,t} - f_t).
-#      \]
-#    - **Internal PA α**:  
-#      \[
-#        R_{\text{IntPA},t} 
-#        = \Bigl(\tfrac{Z}{1000}\Bigr)(r_{H,t}).
-#      \]
-# 
-# 9. **Aggregate monthly → annual returns** for “Base,” “ExternalPA,” “ActiveExt.”  
-# 10. **Compute metrics**:  
-#     - Ann Return, Ann Vol, VaR 95, Tracking Error, Breach Probability.  
-# 11. **Export** Inputs, Summary, Raw returns to Excel + print narrative.
-# 
-# ---
-
-# In[ ]:
-
-
-
-
diff --git a/.ipynb_checkpoints/README-checkpoint.md b/.ipynb_checkpoints/README-checkpoint.md
deleted file mode 100644
index c60285aa5ca738e244c141d9b73c67633b444c38..0000000000000000000000000000000000000000
--- a/.ipynb_checkpoints/README-checkpoint.md
+++ /dev/null
@@ -1,322 +0,0 @@
-# Portable Alpha-Extension Model
-
-Portable Alpha + Active Extension Model Specification
-Below is a comprehensive description of the updated portable‐alpha + active‐extension model, ready to paste into a Markdown cell. Every section is clearly labeled, and all equations use LaTeX delimiters.
-
-1. Purpose and High-Level Overview
-Goal:
-Construct a Monte Carlo framework that allocates a fixed pool of capital (e.g. $1 b) across three “sleeves” (Internal, External Portable-Alpha, and Active Extension), simulates joint returns on Index, In-House α, Extension α, and External PA α, and then reports portfolio metrics (annual return, volatility, VaR, tracking error, breach probability).
-
-Key innovations vs. a simpler portable-alpha model:
-
-Separate “reference period” used to compute index volatility σₙ, which in turn determines the cash/margin needed to synthetically hold 1:1 index exposure.
-Three explicit buckets whose dollar-amounts sum to $ 1 b, avoiding any double-counting of β + α exposures.
-Active Extension bucket that can be “150/50” or “170/70” long/short, specified by an “Active share (%)” input. By default, we assume 150/50 (i.e. Active share = 50 %) unless the user overrides.
-Everything ultimately flows into a set of formulas—one per bucket—that map monthly draws of [ (r_{\beta},,r_{H},,r_{E},,r_{M}) \quad\text{and}\quad f_t ] into portfolio returns.
-
-2. Core Assumptions and Variables
-Index (β) returns
-
-We load a historical time series of monthly total returns on the S&P 500 TR (or whichever index) from a CSV.
-We partition that series into:
-A reference window (e.g. 2010 – 2014) used to compute “reference volatility” σₙ.
-An analysis window (e.g. 2015 – 2020) used to compute the actual mean (μₙ) and volatility (σₙ) that drive our Monte Carlo draws.
-Three α-streams (simulated jointly with β)
-
-In-House α (
-):
-Mean = μ_H/12
-Vol = σ_H / √12
-Correlation ρ_{β,H} with β.
-Extension α (
-):
-Mean = μ_E/12
-Vol = σ_E / √12
-Correlation ρ_{β,E} with β.
-External PA α (
-):
-Mean = μ_M/12
-Vol = σ_M / √12
-Correlation ρ_{β,M} with β.
-Financing spread (
-)
-
-A month-by-month random draw around a drift (financing_mean/12) with vol (financing_vol/12) and occasional jumps of size (spike_factor × (financing_vol/12)), happening with probability spike_prob.
-In each month, any bucket that holds ((r_{\beta} − f_t)) is charged that financing cost.
-Total fund capital (in millions, default = 1000)
-
-We allocate exactly $ 1 b across three buckets (plus any residual “cash-leftover” after margin).
-Standard-deviation multiple (sd_of_vol_mult, default = 3)
-
-“To hold ₙ
- 1 b.”
-That cash is the internal beta-backing or “margin cash,” needed for futures/swaps.
-Three capital buckets (all in $ mm, must sum to 1000)
-
-External PA capital (
-)
-Manager takes 
- X m of index (β) and ((external_pa_alpha_frac × X m)) of α.
-Default α fraction = 50 % ((\theta_{\mathrm{ExtPA}}=0.50)).
-Active Extension capital (
-)
-Manager runs a long/short portfolio with Active share (S).
-By default, “150/50” means (S=0.50) (i.e. 150 % long, 50 % short → net 100 %).
-Internal PA capital (
-)
-Runs in-house α; the remainder of internal cash (beyond margin) is used here.
-Internal beta backing (
-) (computed, not user-entered)
-[ W = \sigma_{\text{ref}} \times (\mathrm{sd_of_vol_mult}) \times 1000 \quad (\text{$ mm}). ]
-
-That cash sits in reserve to back a $ 1 b index position via futures/swaps.
-Because the external PA and active-extension managers each hold index exposure “inside” their 
- Y m, you do not hold margin for that portion. You only hold (W) for the total $ 1 b.
-3. Capital-Allocation Equations
-Check:
-[ X + Y + Z ;=; 1000 \quad(\text{$ mm}), ]
-where
-
-(X = \text{external_pa_capital},)
-(Y = \text{active_ext_capital},)
-(Z = \text{internal_pa_capital}.)
-Margin (internal beta backing):
-[ W = \sigma_{\text{ref}} \times (\mathrm{sd_of_vol_mult}) \times 1000 \quad (\text{$ mm}). ]
-
-Internal cash leftover (runs In-House PA):
-[ \text{internal_cash_leftover} = 1000 - W - Z \quad (\text{$ mm}). ]
-
-If (W + Z > 1000), the capital structure is infeasible (you cannot hold margin + in-house PA + external buckets all on $ 1 b).
-4. Return Equations
-We simulate, for each month (t):
-
-[ (r_{\beta,t},,r_{H,t},,r_{E,t},,r_{M,t}) ;\sim;\text{MVN}\bigl([\mu_{\beta},,\mu_H,,\mu_E,,\mu_M],,\Sigma\bigr), ] with
-
-(\mu_{\beta} = \mu_{\text{idx}}) (monthly mean from analysis window),
-(\mu_H = \frac{\mu_H^{(\text{annual})}}{12}),
-(\mu_E = \frac{\mu_E^{(\text{annual})}}{12}),
-(\mu_M = \frac{\mu_M^{(\text{annual})}}{12}).
-Covariance (\Sigma) built from:
-
-(\sigma_{\beta} = \sigma_{\text{ref}}) (monthly vol from reference window),
-(\sigma_H = \sigma_H^{(\text{annual})}/\sqrt{12}),
-(\sigma_E = \sigma_E^{(\text{annual})}/\sqrt{12}),
-(\sigma_M = \sigma_M^{(\text{annual})}/\sqrt{12}),
-Pairwise correlations (\rho_{\beta,H},,\rho_{\beta,E},,\rho_{\beta,M},,\rho_{H,E},,\dots).
-Additionally, each month we draw a financing cost: [ f_t = \frac{\text{financing_mean}}{12} + \varepsilon_t,\quad \varepsilon_t \sim \mathcal{N}\bigl(0,;(\tfrac{\text{financing_vol}}{12})^2\bigr), ] with probability (\text{spike_prob}) of a jump (=\text{spike_factor} \times \frac{\text{financing_vol}}{12}).
-
-4.1. Base (All In-House) Strategy
-[ R_{\text{Base},t} = ; (r_{\beta,t} - f_t),\times,w_{\beta_H} ;+; r_{H,t},\times,w_{\alpha_H}. ] By default, (w_{\beta_H} = 0.50) and (w_{\alpha_H} = 0.50).
-
-4.2. External PA Strategy
-Capital allocated: (X = \text{external_pa_capital}).
-Manager buys X m of index (β) and allocates (\theta_{\mathrm{ExtPA}} = \text{external_pa_alpha_frac}) of that
- X m to α.
-Return formula: [ R_{\text{ExtPA},t} = \underbrace{\frac{X}{1000}}{w{\beta}^{\text{ExtPA}}},(r_{\beta,t} - f_t) ;+;\underbrace{\tfrac{X}{1000} ,\times,\theta_{\mathrm{ExtPA}}}{w{\alpha}^{\text{ExtPA}}};(r_{M,t}). ]
-
-If (\theta_{\mathrm{ExtPA}} = 0.50), then half of $ X m is alpha, half is index.
-4.3. Active Extension Strategy
-Capital allocated: (Y = \text{active_ext_capital}).
-Manager runs a long/short portfolio with Active share (S = \frac{\text{active_share_percent}}{100}).
-E.g. 150/50 → (S = 0.50).
-170/70 → (S = 0.70).
-Return formula: [ R_{\text{ActExt},t} = \underbrace{\frac{Y}{1000}}{w{\beta}^{\text{ActExt}}},(r_{\beta,t} - f_t) ;+;\underbrace{\frac{Y}{1000},\times,S}{w{\alpha}^{\text{ActExt}}};(r_{E,t}). ]
-
-The manager’s long/short is embedded in (r_{E,t}).
-4.4. Internal Margin & Internal PA
-Because both external PA and active-extension managers hold their own index exposure, on your books you only need to hold margin for a single $ 1 b of index. That is: [ W = \sigma_{\text{ref}} \times (\mathrm{sd_of_vol_mult}) \times 1000 \quad (\text{$ mm}). ] Then you also decide to run (Z = \text{internal_pa_capital}) in-house PA:
-
-Internal Beta (margin):
-[ R_{\text{IntBet},t} = \Bigl(\tfrac{W}{1000}\Bigr),(r_{\beta,t} - f_t). ]
-Internal PA alpha:
-[ R_{\text{IntPA},t} = \Bigl(\tfrac{Z}{1000}\Bigr),(r_{H,t}). ]
-Internal cash leftover:
-[ \text{internal_cash_leftover} = 1000 - W - Z \quad (\text{if positive, earns 0}). ]
-5. Putting It All Together in Simulation
-Read user inputs (via load_parameters()):
-
-Dates: start_date, end_date, ref_start_date, ref_end_date
-Vol/risk: sd_of_vol_mult
-Returns: financing_mean, financing_vol, μ_H, σ_H, μ_E, σ_E, μ_M, σ_M
-Correlations: ρ_{β,H}, ρ_{β,E}, ρ_{β,M}, ρ_{H,E}, ρ_{H,M}, ρ_{E,M}
-Capital buckets: external_pa_capital, external_pa_alpha_frac, active_ext_capital, active_share_percent, internal_pa_capital
-Total fund capital (mm): default = 1000
-Load index CSV → idx_full (monthly total returns).
-
-Filter
-
-idx_series = idx_full[ start_date : end_date ] → used for μ_β and σ_β.
-idx_ref = idx_full[ ref_start_date : ref_end_date ] → used for σ_ref.
-Compute
-[ \mu_{\beta} = \mathrm{mean}(idx_series), \quad \sigma_{\beta} = \mathrm{std}(idx_series), \quad \sigma_{\text{ref}} = \mathrm{std}(idx_ref). ]
-
-Margin-backing
-[ W = \sigma_{\text{ref}} \times \mathrm{sd_of_vol_mult} \times 1000. ] If (W + Z > 1000), error. Else compute [ \text{internal_cash_leftover} = 1000 - W - Z. ]
-
-Build covariance matrix (\Sigma) for ((r_{\beta}, r_H, r_E, r_M)) using
-(\sigma_{\beta} = \sigma_{\text{ref}},; \sigma_H = \frac{\sigma_H^{(\text{annual})}}{\sqrt{12}},; \sigma_E = \frac{\sigma_E^{(\text{annual})}}{\sqrt{12}},; \sigma_M = \frac{\sigma_M^{(\text{annual})}}{\sqrt{12}},)
-and correlations.
-
-Monte Carlo draws:
-For each of (N_{\text{SIMULATIONS}}) trials, simulate a (T=N_{\text{MONTHS}})-month path of (,(r_{\beta,t},,r_{H,t},,r_{E,t},,r_{M,t})) and financing (f_t).
-
-Compute monthly returns for each bucket:
-
-Base:
-[ R_{\text{Base},t} = (r_{\beta,t} - f_t),w_{\beta_H} ;+; r_{H,t},w_{\alpha_H}. ]
-External PA:
-[ R_{\text{ExtPA},t} = \bigl(\tfrac{X}{1000}\bigr)(r_{\beta,t} - f_t) ;+; \bigl(\tfrac{X}{1000},\theta_{\mathrm{ExtPA}}\bigr)(r_{M,t}). ]
-Active Extension:
-[ R_{\text{ActExt},t} = \bigl(\tfrac{Y}{1000}\bigr)(r_{\beta,t} - f_t) ;+; \bigl(\tfrac{Y}{1000},S\bigr)(r_{E,t}). ]
-Internal Beta:
-[ R_{\text{IntBet},t} = \bigl(\tfrac{W}{1000}\bigr)(r_{\beta,t} - f_t). ]
-Internal PA α:
-[ R_{\text{IntPA},t} = \bigl(\tfrac{Z}{1000}\bigr)(r_{H,t}). ]
-Note: We only report three portfolios—“Base,” “ExternalPA,” and “ActiveExt.” Each one compounds its own monthly returns for a 12-month horizon: [ R_{\text{bucket}}^{\text{(year)}} = \prod_{t=1}^{12} (1 + R_{\text{bucket},t}) - 1. ]
-
-Compute performance metrics for each portfolio’s annual returns:
-
-Ann Return = sample mean.
-Ann Vol = sample standard deviation.
-VaR 95% = 5th percentile.
-Tracking Error = std of (bucket_return − index_return).
-Breach Probability = % of months (in the first sim path) where ((r_{\text{bucket},t} < -,\mathrm{buffer_multiple}\times\sigma_{\beta})).
-Export
-
-Inputs sheet: all parameters (dates, vol caps, bucket sizes, α fractions, active share, σ_ref, W, internal cash leftover, etc.).
-Summary sheet: metrics for “Base,” “ExternalPA,” and “ActiveExt.”
-Raw returns sheets: monthly paths for each bucket (first simulation) so users can inspect breach months.
-6. Input Parameters Summary
-Below is a consolidated list of every input variable that must appear in the “friendly” CSV:
-
-Date ranges
-
-Start date → start_date (analysis window begin).
-End date → end_date (analysis window end).
-Reference start date → ref_start_date (for σ_ref).
-Reference end date → ref_end_date (for σ_ref).
-Financing parameters
-
-Annual financing mean (%) → financing_mean_annual (default = 0.50 %).
-Annual financing vol (%) → financing_vol_annual (default = 0.10 %).
-Monthly spike probability → spike_prob (default = 2 %).
-Spike size (σ × multiplier) → spike_factor (default = 2.25).
-In-House PA parameters
-
-In-House annual return (%) → mu_H (default = 4.00 %).
-In-House annual vol (%) → sigma_H (default = 1.00 %).
-In-House β → w_beta_H (default = 0.50).
-In-House α → w_alpha_H (default = 0.50).
-Extension α parameters
-
-Alpha-Extension annual return (%) → mu_E (default = 5.00 %).
-Alpha-Extension annual vol (%) → sigma_E (default = 2.00 %).
-Active Extension capital (mm) → active_ext_capital (default = 0).
-Active share (%) → active_share_percent (default = 50 % ⇒ a 150/50 program).
-External PA α parameters
-
-External annual return (%) → mu_M (default = 3.00 %).
-External annual vol (%) → sigma_M (default = 2.00 %).
-External PA capital (mm) → external_pa_capital (default = 0).
-External PA α fraction (%) → external_pa_alpha_frac (default = 50 %).
-Correlations
-
-Corr index–In-House → rho_idx_H (default = 0.05).
-Corr index–Alpha-Extension → rho_idx_E (default = 0.00).
-Corr index–External → rho_idx_M (default = 0.00).
-Corr In-House–Alpha-Extension → rho_H_E (default = 0.10).
-Corr In-House–External → rho_H_M (default = 0.10).
-Corr Alpha-Extension–External → rho_E_M (default = 0.00).
-Capital & risk backing
-
-Total fund capital (mm) → total_fund_capital (default = 1000).
-Standard deviation multiple → sd_of_vol_mult (default = 3).
-Internal PA capital (mm) → internal_pa_capital (default = 0).
-Buffer multiple → buffer_multiple (default = 3).
-Legacy/Optional
-
-X grid (mm) → X_grid_list (list of X values).
-External manager α fractions → EM_thetas_list.
-7. Output Considerations
-Inputs sheet (Excel):
-List every single parameter, including:
-
-Date windows (analysis and reference),
-Financing parameters,
-α-stream parameters,
-Correlations,
-Capital buckets (X, Y, Z),
-SD multiple, margin backing (W), internal cash leftover,
-Active share, etc.
-Summary sheet (Excel):
-For each portfolio (“Base,” “ExternalPA,” “ActiveExt”), show:
-
-Annual Return (%),
-Annual Volatility (%),
-95 % VaR (%),
-Tracking Error (%),
-Breach Probability (%).
-Raw returns sheets (Excel):
-Monthly paths for each bucket (first simulation), so users can inspect “breach” months where (R_{t} < -(\text{buffer_multiple} × σ_{\beta})).
-
-Console output:
-A “human‐friendly” summary, e.g.:
-
-For “ExternalPA (X = 300, 50 % α)”:
-• Expected annual return: 10.2 %
-• Annual volatility: 12.3 %
-• 95 % VaR: −3.4 %
-• Tracking error: 8.7 %
-• Breach probability: 2.0 %.
-
-8. Intuition Behind Key Pieces
-Why a separate reference period?
-
-If you measure index volatility over the same window you analyze (e.g. 2015–2020), you capture “current regime” vol. Often, managers prefer a longer/different window (e.g. 2010–2014) to gauge typical funding volatility. That reference σₙ, times a multiple (e.g. 3×), tells you how much cash to set aside to back $ 1 b of index exposure.
-Why Active share as a percentage?
-
-A “150/50” program has 150 % long and 50 % short = net 100 %. Its “active share” is reported as 50 %.
-If you want “170/70,” then active share = 70 %.
-The code converts “Active share (%)” to decimal (S). For a 150/50 program, the default is 50 % ((S = 0.50)).
-Why each bucket’s formula ensures no double-counting
-
-Whenever you give $ X m to External PA, that manager holds the index exposure on your behalf. You do not hold margin for that portion. Similarly, the Active Extension manager holds their own index.
-On your books, you only need to hold margin for a single $ 1 b index. That is (W).
-Once you hand 
- Y m to active ext, both managers hold ((X + Y)) of index on your behalf. So your margin (W) backs the entire $ 1 b, not just the “leftover” portion.
-9. Step-by-Step Implementation Checklist
-Read and parse user parameters (dates, vols, α fractions, active share, capital buckets, etc.).
-
-Load index CSV → idx_full.
-
-Filter → idx_ref for σ_ref; idx_series for μ_β and σ_β.
-
-Compute:
-[ μ_β = \mathrm{mean}(idx_series), \quad σ_β = \mathrm{std}(idx_series), \quad σ_{\text{ref}} = \mathrm{std}(idx_ref). ]
-
-Margin-backing:
-[ W = σ_{\text{ref}} × (\mathrm{sd_of_vol_mult}) × 1000. ] Check (W + Z ≤ 1000). Compute leftover internal cash = (1000 - W - Z).
-
-Build covariance matrix using ((σ_{\text{ref}},,σ_H/√{12},,σ_E/√{12},,σ_M/√{12})) plus correlations.
-
-Monte Carlo draws:
-For each of (N_{\mathrm{SIM}}) trials, simulate a path of length (T = N_{\mathrm{MONTHS}}) for ((r_{\beta,t},,r_{H,t},,r_{E,t},,r_{M,t})) and financing (f_t).
-
-Compute monthly returns:
-
-Base:
-[ R_{\text{Base},t} = (r_{\beta,t} - f_t),w_{\beta_H} + r_{H,t},w_{\alpha_H}. ]
-External PA:
-[ R_{\text{ExtPA},t} = \Bigl(\tfrac{X}{1000}\Bigr)(r_{\beta,t} - f_t) ;+;\Bigl(\tfrac{X}{1000},\theta_{\mathrm{ExtPA}}\Bigr)(r_{M,t}). ]
-Active Extension:
-[ R_{\text{ActExt},t} = \Bigl(\tfrac{Y}{1000}\Bigr)(r_{\beta,t} - f_t) ;+;\Bigl(\tfrac{Y}{1000},S\Bigr)(r_{E,t}). ]
-Internal Beta:
-[ R_{\text{IntBet},t} = \Bigl(\tfrac{W}{1000}\Bigr)(r_{\beta,t} - f_t). ]
-Internal PA α:
-[ R_{\text{IntPA},t} = \Bigl(\tfrac{Z}{1000}\Bigr)(r_{H,t}). ]
-Aggregate monthly → annual returns for “Base,” “ExternalPA,” “ActiveExt.”
-
-Compute metrics:
-
-Ann Return, Ann Vol, VaR 95, Tracking Error, Breach Probability.
-Export Inputs, Summary, Raw returns to Excel + print narrative.
diff --git a/.ipynb_checkpoints/VolAdjTrend_Refactor_Inst-checkpoint.ipynb b/.ipynb_checkpoints/VolAdjTrend_Refactor_Inst-checkpoint.ipynb
deleted file mode 100644
index 363fcab7ed6e9634e198cf5555ceb88932c9a245..0000000000000000000000000000000000000000
--- a/.ipynb_checkpoints/VolAdjTrend_Refactor_Inst-checkpoint.ipynb
+++ /dev/null
@@ -1,6 +0,0 @@
-{
- "cells": [],
- "metadata": {},
- "nbformat": 4,
- "nbformat_minor": 5
-}
 
EOF
)