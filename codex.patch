 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/Portable_Alpha_Vectors.ipynb b/Portable_Alpha_Vectors.ipynb
index 3a9f2c6b2a5d0dd33a487a1cb58d619cae94d56e..b92e8aec43613352fb0224f2bd6ad08a5f4a8a01 100644
--- a/Portable_Alpha_Vectors.ipynb
+++ b/Portable_Alpha_Vectors.ipynb
@@ -88,50 +88,51 @@
     "# Build DataFrame and save\n",
     "df_template = pd.DataFrame(rows, columns=[\"Parameter\", \"Value\", \"Notes\"])\n",
     "file_path = \"/mnt/data/parameters_template.xlsx\"\n",
     "df_template.to_excel(file_path, index=False)\n",
     "print(f\"Created template: {file_path}\")\n"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 1,
    "id": "50896230-6c8e-4547-ad48-efab630dbba4",
    "metadata": {},
    "outputs": [],
    "source": [
     "# portable_alpha_model.py\n",
     "\n",
     "import sys\n",
     "import csv\n",
     "import numpy as np\n",
     "import pandas as pd\n",
     "from pathlib import Path\n",
     "import tkinter as tk\n",
     "from tkinter import filedialog\n",
     "import openpyxl\n",
     "import os\n",
+    "import argparse\n",
     "from __future__ import annotations\n",
     "from typing import Optional, Union, Any\n",
     "from numpy.typing import NDArray\n",
     "\n",
     "# =============================================================================\n",
     "# 1. MAPPING: User-friendly labels \u2192 Internal variable names\n",
     "# =============================================================================\n",
     "\n",
     "LABEL_MAP = {\n",
     "    \"Analysis mode\": \"analysis_mode\",\n",
     "    \"Number of simulations\": \"N_SIMULATIONS\",\n",
     "    \"Number of months\": \"N_MONTHS\",\n",
     "    # Capital mode inputs\n",
     "    \"Max external combined (%)\":            \"max_external_combined_percent\",\n",
     "    \"External step size (%)\":               \"external_step_size_percent\",\n",
     "    # Fixed-capital (for non-capital modes)\n",
     "    \"External PA capital (mm)\":             \"external_pa_capital\",\n",
     "    \"Active Extension capital (mm)\":        \"active_ext_capital\",\n",
     "    \"Internal PA capital (mm)\":             \"internal_pa_capital\",\n",
     "    # Returns mode ranges\n",
     "    \"In-House return min (%)\":              \"mu_H_min\",\n",
     "    \"In-House return max (%)\":              \"mu_H_max\",\n",
     "    \"In-House return step (%)\":             \"mu_H_step\",\n",
     "    \"In-House vol min (%)\":                 \"sigma_H_min\",\n",
     "    \"In-House vol max (%)\":                 \"sigma_H_max\",\n",
@@ -6300,56 +6301,64 @@
       "ExternalPA 30.0% 28.0%            2800.0              0.7%                  0.2%        0.4%               nan%                   0.0%\n",
       " ActiveExt 30.0% 28.0%            2800.0              0.3%                  0.1%        0.2%               nan%                   0.0%\n",
       "      Base 30.0% 28.5%            2800.0              2.7%                  0.9%        1.3%               nan%                   0.0%\n",
       "ExternalPA 30.0% 28.5%            2800.0              0.7%                  0.2%        0.5%               nan%                   0.0%\n",
       " ActiveExt 30.0% 28.5%            2800.0              0.3%                  0.1%        0.2%               nan%                   0.0%\n",
       "      Base 30.0% 29.0%            2800.0              2.6%                  0.9%        1.3%               nan%                   0.0%\n",
       "ExternalPA 30.0% 29.0%            2800.0              0.7%                  0.2%        0.4%               nan%                   0.0%\n",
       " ActiveExt 30.0% 29.0%            2800.0              0.3%                  0.1%        0.2%               nan%                   0.0%\n",
       "      Base 30.0% 29.5%            2800.0              2.7%                  0.9%        1.4%               nan%                   0.0%\n",
       "ExternalPA 30.0% 29.5%            2800.0              0.7%                  0.2%        0.5%               nan%                   0.0%\n",
       " ActiveExt 30.0% 29.5%            2800.0              0.3%                  0.1%        0.2%               nan%                   0.0%\n",
       "      Base 30.0% 30.0%            2800.0              2.6%                  0.9%        1.3%               nan%                   0.0%\n",
       "ExternalPA 30.0% 30.0%            2800.0              0.7%                  0.2%        0.4%               nan%                   0.0%\n",
       " ActiveExt 30.0% 30.0%            2800.0              0.3%                  0.1%        0.2%               nan%                   0.0%\n",
       "\n"
      ]
     }
    ],
    "source": [
     "\n",
     "# =============================================================================\n",
     "# 8. MAIN EXECUTION\n",
     "# =============================================================================\n",
     "\n",
     "if __name__ == \"__main__\":\n",
-    "    # 8.1) Prompt user to select the parameters CSV\n",
-    "    try:\n",
-    "        params_csv_path = select_csv_file()\n",
-    "        print(f\"Parameters CSV selected: {params_csv_path}\")\n",
-    "    except FileNotFoundError:\n",
-    "        raise RuntimeError(\"No parameter CSV selected; exiting.\")\n",
+    "    parser = argparse.ArgumentParser(description=\"Portable Alpha model\")\n",
+    "    parser.add_argument('--params', help='Path to parameters CSV')\n",
+    "    parser.add_argument('--index', dest='index_path', help='Path to index CSV')\n",
+    "    args, _ = parser.parse_known_args()\n",
+    "\n",
+    "    if args.params:\n",
+    "        params_csv_path = Path(args.params)\n",
+    "    else:\n",
+    "        # 8.1) Prompt user to select the parameters CSV\n",
+    "        try:\n",
+    "            params_csv_path = select_csv_file()\n",
+    "            print(f'Parameters CSV selected: {params_csv_path}')\n",
+    "        except FileNotFoundError:\n",
+    "            raise RuntimeError('No parameter CSV selected; exiting.')\n",
     "\n",
     "    # 8.2) Load raw parameters\n",
     "    raw_params = load_parameters(params_csv_path, LABEL_MAP)\n",
     "\n",
     "    # 8.3) \u201cSafe get\u201d for numeric scalars and defaults\n",
     "    total_fund_capital = get_num(raw_params, \"total_fund_capital\", 1000)\n",
     "\n",
     "    financing_mean_annual = get_num(raw_params, \"financing_mean_annual\", 0.005)\n",
     "    financing_vol_annual  = get_num(raw_params, \"financing_vol_annual\", 0.001)\n",
     "    spike_prob            = get_num(raw_params, \"spike_prob\", 0.02)\n",
     "    spike_factor          = get_num(raw_params, \"spike_factor\", 2.25)\n",
     "\n",
     "    internal_financing_mean_annual = get_num(raw_params, \"internal_financing_mean_annual\", financing_mean_annual)\n",
     "    internal_financing_vol_annual  = get_num(raw_params, \"internal_financing_vol_annual\",  financing_vol_annual)\n",
     "    internal_spike_prob            = get_num(raw_params, \"internal_spike_prob\",            spike_prob)\n",
     "    internal_spike_factor          = get_num(raw_params, \"internal_spike_factor\",          spike_factor)\n",
     "\n",
     "    ext_pa_financing_mean_annual = get_num(raw_params, \"ext_pa_financing_mean_annual\", financing_mean_annual)\n",
     "    ext_pa_financing_vol_annual  = get_num(raw_params, \"ext_pa_financing_vol_annual\",  financing_vol_annual)\n",
     "    ext_pa_spike_prob            = get_num(raw_params, \"ext_pa_spike_prob\",            spike_prob)\n",
     "    ext_pa_spike_factor          = get_num(raw_params, \"ext_pa_spike_factor\",          spike_factor)\n",
     "\n",
     "    act_ext_financing_mean_annual = get_num(raw_params, \"act_ext_financing_mean_annual\", financing_mean_annual)\n",
     "    act_ext_financing_vol_annual  = get_num(raw_params, \"act_ext_financing_vol_annual\",  financing_vol_annual)\n",
     "    act_ext_spike_prob            = get_num(raw_params, \"act_ext_spike_prob\",            spike_prob)\n",
@@ -6380,56 +6389,59 @@
     "    default_sigma_M = sigma_M / 12\n",
     "\n",
     "    default_ext_alpha_frac = get_num(raw_params, \"external_pa_alpha_frac\", 50) / 100.0\n",
     "    default_act_share      = get_num(raw_params, \"active_share\",            50) / 100.0\n",
     "\n",
     "    default_sd_mult = get_num(raw_params, \"sd_of_vol_mult\", 3)\n",
     "\n",
     "    financing_mean  = financing_mean_annual / 12\n",
     "    financing_sigma = financing_vol_annual / 12\n",
     "\n",
     "    internal_pa_capital = get_num(raw_params, \"internal_pa_capital\", 0)   # Z-sleeve\n",
     "    external_pa_capital = get_num(raw_params, \"external_pa_capital\", 0)   # passive \u03b1-ext\n",
     "    active_ext_capital  = get_num(raw_params, \"active_ext_capital\", 0)    # active \u03b1-ext\n",
     "    \n",
     "    Z_frac = internal_pa_capital / total_fund_capital\n",
     "    E_pct  = external_pa_capital / total_fund_capital\n",
     "    A_pct  = active_ext_capital  / total_fund_capital\n",
     "\n",
     "    # 8.4) Determine analysis_mode\n",
     "    analysis_mode = str(raw_params.get(\"analysis_mode\", \"\")).strip().lower()\n",
     "    valid_modes = {\"capital\", \"returns\", \"alpha_shares\", \"vol_mult\"}\n",
     "    if analysis_mode not in valid_modes:\n",
     "        raise RuntimeError(f\"Analysis mode must be one of {valid_modes}, but got '{analysis_mode}'\")\n",
     "\n",
     "    # 8.5) Prompt user to select the INDEX CSV\n",
-    "    print(\"Please select the INDEX CSV (monthly total returns).\")\n",
-    "    try:\n",
-    "        INDEX_CSV_PATH = select_csv_file()\n",
-    "        print(f\"Index CSV selected: {INDEX_CSV_PATH}\")\n",
-    "    except FileNotFoundError:\n",
-    "        raise RuntimeError(\"Index CSV was not selected; exiting.\")\n",
+    "    if args.index_path:\n",
+    "        INDEX_CSV_PATH = Path(args.index_path)\n",
+    "    else:\n",
+    "        print(\"Please select the INDEX CSV (monthly total returns).\")\n",
+    "        try:\n",
+    "            INDEX_CSV_PATH = select_csv_file()\n",
+    "            print(f\"Index CSV selected: {INDEX_CSV_PATH}\")\n",
+    "        except FileNotFoundError:\n",
+    "            raise RuntimeError(\"Index CSV was not selected; exiting.\")\n",
     "\n",
     "    # 8.6) Load idx_series and compute reference stats\n",
     "    try:\n",
     "        idx_series = load_index_returns(INDEX_CSV_PATH)\n",
     "        print(f\"Loaded {len(idx_series)} months from the raw index CSV.\")\n",
     "    except Exception as e:\n",
     "        raise RuntimeError(f\"Failed to load index returns: {e}\")\n",
     "\n",
     "    mu_idx   = idx_series.mean()\n",
     "    idx_sigma = idx_series.std(ddof=1)\n",
     "    print(f\"Using idx_series from {idx_series.index.min().date()} to {idx_series.index.max().date()} (n={len(idx_series)})\")\n",
     "    print(f\"Analysis-window: \u03bc_idx = {mu_idx:.4f}, \u03c3_idx = {idx_sigma:.4f}\")\n",
     "\n",
     "    # 8.7) Convert bucket financing overrides to monthly decimals\n",
     "    internal_financing_mean  = internal_financing_mean_annual / 12\n",
     "    internal_financing_sigma = internal_financing_vol_annual  / 12\n",
     "\n",
     "    ext_pa_financing_mean  = ext_pa_financing_mean_annual / 12\n",
     "    ext_pa_financing_sigma = ext_pa_financing_vol_annual  / 12\n",
     "\n",
     "    act_ext_financing_mean  = act_ext_financing_mean_annual / 12\n",
     "    act_ext_financing_sigma = act_ext_financing_vol_annual  / 12\n",
     "\n",
     "    # -------------------------------------------------------------\n",
     "    # Unified params-dict for BOTH helper functions\n",
 
EOF
)