name: Streamlined Codex Auto-Debug

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize]
  push:
    branches: [ 'codex/**' ]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number (when dispatched by debug-on-failure)'
        required: false
      target_ref:
        description: 'Git ref to check out (e.g., refs/pull/123/head)'
        required: false
      pr_head_ref:
        description: 'PR head ref (branch name) for logs only'
        required: false
      pr_head_sha:
        description: 'PR head SHA for logs only'
        required: false
      debug_mode:
        description: 'Enable verbose debugging'
        required: false
        default: 'false'

# Least-privilege permissions for what this job actually does
permissions:
  contents: write        # push auto-fixes to same-repo branches
  pull-requests: write   # comment on PRs
  issues: write          # PRs are issues; needed to comment
  actions: read          # required to query workflow runs

concurrency:
  group: codex-auto-debug-${{ github.event.pull_request.number || github.event.inputs.pr_number || github.ref_name || github.run_id }}
  cancel-in-progress: true

jobs:
  streamlined-debug:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read

    # Run on codex branches, PRs to main, or manual dispatch (from Option A router)
    if: >
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.head_ref || '', 'codex/') ||
      startsWith(github.ref_name || '', 'codex/') ||
      github.event_name == 'pull_request'

    env:
      # prefer personal token if present, otherwise fall back
      CODEX_TOKEN: ${{ secrets.CODEX_PAT || secrets.GITHUB_TOKEN }}
      GH_TOKEN: ${{ secrets.CODEX_PAT || secrets.GITHUB_TOKEN }}
      DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}

    steps:
      - name: 🧾 Resolve target checkout ref
        id: resolve
        run: |
          # Priority:
          # 1) workflow_dispatch input target_ref (e.g., refs/pull/123/head)
          # 2) pull_request: use head ref for same-repo branches to allow pushes
          # 3) pull_request merge ref (refs/pull/<num>/merge) for fork support
          # 4) push ref_name
          # 5) repo default branch as absolute last resort
          TARGET_REF="${{ github.event.inputs.target_ref }}"
          if [ -z "$TARGET_REF" ]; then
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              HEAD_REPO="${{ github.event.pull_request.head.repo.full_name }}"
              BASE_REPO="${{ github.repository }}"
              if [ "$HEAD_REPO" = "$BASE_REPO" ] && [ -n "${{ github.head_ref }}" ]; then
                TARGET_REF="${{ github.head_ref }}"
              elif [ -n "${{ github.event.pull_request.number }}" ]; then
                TARGET_REF="refs/pull/${{ github.event.pull_request.number }}/merge"
              elif [ -n "${{ github.head_ref }}" ]; then
                TARGET_REF="${{ github.head_ref }}"
              fi
            elif [ -n "${{ github.ref_name }}" ]; then
              TARGET_REF="${{ github.ref_name }}"
            else
              TARGET_REF="${{ github.event.repository.default_branch || 'main' }}"
            fi
          fi
          echo "target_ref=$TARGET_REF" >> "$GITHUB_OUTPUT"

      - name: 📥 Check out code at target ref
        uses: actions/checkout@v4
        with:
          token: ${{ env.CODEX_TOKEN }}
          ref: ${{ steps.resolve.outputs.target_ref }}
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "requirements.txt not found; installing minimal toolchain"
            pip install --upgrade pip
          fi

      - name: 🧭 Set up Git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: 🔎 Diagnose permissions and branch protection
        id: diag
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repo:  ${{ github.repository }}"
          echo "Base repo: ${{ github.repository }}"
          echo "Head repo: ${{ github.event.pull_request.head.repo.full_name || github.repository }}"
          echo "Head ref:  ${{ github.head_ref || '' }}"
          echo "Ref name:  ${{ github.ref_name }}"
          echo "Resolved target_ref: ${{ steps.resolve.outputs.target_ref }}"

          echo "-- git status --"
          git --no-pager status -sb || true
          echo "-- git remotes --"
          git remote -v || true
          echo "-- current branch --"
          git rev-parse --abbrev-ref HEAD || true

          BRANCH="${{ github.head_ref || github.ref_name }}"
          if [ -z "$BRANCH" ]; then BRANCH="${{ steps.resolve.outputs.target_ref }}"; fi
          # Normalize refs/pull/*/merge to empty to avoid false protection queries
          case "$BRANCH" in
            refs/pull/*) BRANCH="" ;;
          esac
          echo "diag_branch=$BRANCH" >> "$GITHUB_OUTPUT"

          if [ -n "$BRANCH" ]; then
            echo "-- checking branch metadata for '$BRANCH' --"
            curl -sSfL \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/branches/${BRANCH}" \
              | tee branch_meta.json || true
            PROTECTED=$(jq -r '.protected // false' branch_meta.json 2>/dev/null || echo false)
            echo "Protected: $PROTECTED"
            echo "protected=$PROTECTED" >> "$GITHUB_OUTPUT"
          else
            echo "Skipping branch protection check (non-branch ref)."
            echo "protected=unknown" >> "$GITHUB_OUTPUT"
          fi

          echo "-- token scoped repos (sanity) --"
          curl -sS -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/user" | jq '{login, type}' || true

      - name: ⚙️ Initialize debug status
        run: |
          echo "streamlined_code=0" >> $GITHUB_ENV
          echo "detailed_code=0" >> $GITHUB_ENV

      - name: 🚀 Run Streamlined Debug
        id: streamlined_debug
        run: |
          echo "Running streamlined debugging workflow..."
          exit_code=0
          if [ -f scripts/streamlined_debug.py ]; then
            python scripts/streamlined_debug.py
            exit_code=$?
            if [ $exit_code -ne 0 ]; then
              echo "ERROR: streamlined_debug.py failed with exit code $exit_code" >&2
            fi
          else
            echo "ERROR: scripts/streamlined_debug.py not found!" >&2
            exit_code=2
          fi
          echo "streamlined_exit_code=$exit_code" >> $GITHUB_OUTPUT
          echo "streamlined_code=$exit_code" >> $GITHUB_ENV

      - name: 📊 Upload Streamlined Debug Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: streamlined-debug-report-${{ github.run_id }}
          path: |
            streamlined_debug_report.md
          if-no-files-found: ignore

      - name: 🤖 Auto-commit fixes if any
        env:
          CODEX_PAT: ${{ secrets.CODEX_PAT }}
        run: |
          # Use CODEX_PAT for authentication
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          REPO_FULL="${{ github.repository }}"
          PUSH_BRANCH="${{ github.ref_name }}"
          if [ -z "$PUSH_BRANCH" ]; then
            PUSH_BRANCH="${{ github.ref_name }}"
          fi
          # If the target is a PR merge ref or other non-branch ref, bail out gracefully
          case "$PUSH_BRANCH" in
            refs/pull/*) echo "Skipping push: non-branch ref '$PUSH_BRANCH'"; exit 0 ;;
          esac
          # Double-check same-repo push safety
          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected, committing fixes..."
            git add -A
            git commit -m "🤖 Auto-fix: Codex debugging workflow applied minor fixes"
            git remote set-url origin https://x-access-token:${CODEX_PAT}@github.com/${REPO_FULL}.git
            echo "Pushing to $REPO_FULL:$PUSH_BRANCH with CODEX_PAT"
            if git push origin HEAD:"$PUSH_BRANCH"; then
              echo "✅ Successfully pushed auto-fixes"
            else
              echo "❌ Failed to push auto-fixes; check branch protections/permissions"
              echo "   Branch: $PUSH_BRANCH | Repo: $REPO_FULL"
              echo "   Hint: Ensure PAT is valid and has repo/workflow scopes."
              exit 1
            fi
          else
            echo "✅ No changes to commit"
          fi

      - name: 📊 Upload Detailed Debug Report
        if: steps.detailed_debug.outcome != 'skipped'
        uses: actions/upload-artifact@v4
        with:
          name: detailed-debug-report-${{ github.run_id }}
          path: |
            detailed_debug_report.md
          if-no-files-found: ignore

      - name: 💬 Comment results on PR
        if: >
          github.event_name == 'pull_request' ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.pr_number)
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.CODEX_TOKEN }}
          script: |
            const fs = require('fs');
            const streamlinedExit = '${{ steps.streamlined_debug.outputs.streamlined_exit_code }}';
            const detailedRan = '${{ steps.detailed_debug.outcome }}' !== 'skipped';
            const prNumber = context.payload.pull_request?.number || Number('${{ github.event.inputs.pr_number || '' }}');

            let streamlinedReport = '';
            try { streamlinedReport = fs.readFileSync('streamlined_debug_report.md','utf8'); }
            catch { streamlinedReport = '❌ Streamlined debug report not generated.'; }

            let detailedReport = '';
            try { detailedReport = fs.readFileSync('detailed_debug_report.md','utf8'); }
            catch {}

            const streamlinedPassed = String(streamlinedExit) === '0';
            const statusEmoji = streamlinedPassed ? '🎉' : '⚠️';
            const statusText  = streamlinedPassed ? 'All Checks Passed' : 'Issues Found';

            let comment = `## ${statusEmoji} Automated Codex Debugging Results - ${statusText}

            ### 🚀 Streamlined Debug Results
            ${streamlinedReport}
            `;

            if (detailedRan && detailedReport) {
              comment += `\n### 🔍 Detailed Debug Results\n${detailedReport}\n`;
            }

            comment += `\n---\n*Debug workflow: Streamlined → ${streamlinedPassed ? 'Passed ✅' : 'Failed ❌'}${detailedRan ? ' → Detailed Analysis 🔍' : ''}*`;

            if (prNumber) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            } else {
              core.info('No PR number available; skipping PR comment.');
            }

      - name: 🤖 Auto-commit fixes if any
        if: >
          (steps.streamlined_debug.outputs.streamlined_exit_code == '0' ||
           steps.detailed_debug.outputs.detailed_exit_code == '0') &&
          github.event_name != 'workflow_dispatch' &&
          (github.event_name != 'pull_request' ||
           github.event.pull_request.head.repo.full_name == github.repository)
        run: |
          # Determine push branch
          PUSH_BRANCH="${{ github.head_ref || github.ref_name }}"
          if [ -z "$PUSH_BRANCH" ]; then
            PUSH_BRANCH="${{ steps.resolve.outputs.target_ref }}"
          fi
          # If the target is a PR merge ref or other non-branch ref, bail out gracefully
          case "$PUSH_BRANCH" in
            refs/pull/*) echo "Skipping push: non-branch ref '$PUSH_BRANCH'"; exit 0 ;;
          esac

          # Double-check same-repo push safety
          REPO_FULL="${{ github.repository }}"
          HEAD_REPO_FULL="${{ github.event.pull_request.head.repo.full_name || github.repository }}"
          if [ "$REPO_FULL" != "$HEAD_REPO_FULL" ]; then
            echo "ℹ️ Skipping auto-push for fork PR ($HEAD_REPO_FULL). Maintainer action required."
            exit 0
          fi

          if [ -n "$(git status --porcelain)" ]; then
            echo "Changes detected, committing fixes..."
            git add -A
            git commit -m "🤖 Auto-fix: Codex debugging workflow applied minor fixes"

            # Use explicit token-authenticated URL to avoid credential/remote issues
            PUSH_URL="https://x-access-token:${{ env.CODEX_TOKEN || secrets.GITHUB_TOKEN }}@github.com/${REPO_FULL}"
            echo "Pushing to $REPO_FULL:$PUSH_BRANCH"
            if git push "$PUSH_URL" HEAD:"$PUSH_BRANCH"; then
              echo "✅ Successfully pushed auto-fixes"
            else
              echo "❌ Failed to push auto-fixes; check branch protections/permissions"
              echo "   Branch: $PUSH_BRANCH | Repo: $REPO_FULL"
              echo "   Hint: Ensure 'Allow GitHub Actions to bypass branch protections' is enabled if using protected branches."
              exit 1
            fi
          else
            echo "✅ No changes to commit"
          fi

      - name: 📋 Set final status
        if: always()
        run: |
          : "${streamlined_code:=1}"
          : "${detailed_code:=1}"
          if [ "$streamlined_code" = "0" ]; then
            echo "✅ Streamlined debug passed - all good!"
            exit 0
          elif [ "$detailed_code" = "0" ]; then
            echo "✅ Detailed debug resolved issues - all good!"
            exit 0
          else
            echo "⚠️ Issues remain that need manual attention"
            exit 1
          fi
