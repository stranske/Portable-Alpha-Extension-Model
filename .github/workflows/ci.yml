name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.12'

jobs:
  # existing jobs unchanged
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install Chrome for Kaleido
        run: |
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
      - name: Run Ruff (linting)
        run: ruff check pa_core --output-format=github
      - name: Run Ruff (formatting check)
        run: ruff format pa_core --check
      - name: Run Black (formatting check)
        run: black --check pa_core tests
      - name: Check import sorting
        run: isort --check-only pa_core tests

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install Chrome for Kaleido
        run: |
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
      - name: Run Pyright
        run: pyright
      - name: Run MyPy (additional type checking)
        run: mypy pa_core --ignore-missing-imports

  security:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]
      - name: Run Bandit security check
        run: bandit -r pa_core -f json -o bandit-report.json
        continue-on-error: true
      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: bandit-report.json

  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install Chrome for Kaleido
        run: |
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=pa_core --cov-report=xml --cov-report=html --cov-report=term
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            htmlcov/
            coverage.xml

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, test]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install Chrome for Kaleido
        run: |
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
      - name: Test CLI with sample data
        run: |
          if [ -f "parameters.csv" ] && [ -f "sp500tr_fred_divyield.csv" ]; then
            python -m pa_core.cli --params parameters.csv --index sp500tr_fred_divyield.csv
            echo "✅ CLI integration test passed"
          else
            echo "⚠️ Sample data not found, skipping CLI test"
          fi
      - name: Test development scripts
        run: |
          chmod +x dev.sh || true
          ./dev.sh --help || true
          echo "✅ Development scripts work"

  build-docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
      - name: Build documentation
        run: make docs
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/

  codespace-validation:
    name: Validate Codespace Config
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate devcontainer.json
        run: |
          python -m json.tool .devcontainer/devcontainer.json > /dev/null
          echo "✅ devcontainer.json is valid"
      - name: Test setup script
        run: |
          chmod +x .devcontainer/setup.sh || true
          bash -n .devcontainer/setup.sh || true
          echo "✅ Codespace setup script syntax is valid"

    gate:
      name: Gate
      runs-on: ubuntu-latest
      needs:
        - lint-and-format
        - type-check
        - security
        - test
        - integration-test
        - codespace-validation
      if: ${{ always() }}     # <— schedule Gate even if upstream jobs reported neutral/failed
      steps:
        - run: |
            echo "lint-and-format: ${{ needs['lint-and-format'].result }}"
            echo "type-check:     ${{ needs['type-check'].result }}"
            echo "security:       ${{ needs['security'].result }}"
            echo "test:           ${{ needs['test'].result }}"
            echo "integration:    ${{ needs['integration-test'].result }}"
            echo "codespace:      ${{ needs['codespace-validation'].result }}"
            # fail if any upstream failed or cancelled
            if [ "${{ needs['lint-and-format'].result }}" = "failure" ] || \
               [ "${{ needs['type-check'].result }}"     = "failure" ] || \
               [ "${{ needs['security'].result }}"       = "failure" ] || \
               [ "${{ needs['test'].result }}"           = "failure" ] || \
               [ "${{ needs['integration-test'].result }}" = "failure" ] || \
               [ "${{ needs['codespace-validation'].result }}" = "failure" ] || \
               [ "${{ needs['lint-and-format'].result }}" = "cancelled" ] || \
               [ "${{ needs['type-check'].result }}"     = "cancelled" ] || \
               [ "${{ needs['security'].result }}"       = "cancelled" ] || \
               [ "${{ needs['test'].result }}"           = "cancelled" ] || \
               [ "${{ needs['integration-test'].result }}" = "cancelled" ] || \
               [ "${{ needs['codespace-validation'].result }}" = "cancelled" ]; then
                 echo "::error::Upstream job failed or cancelled"
                 exit 1
            fi
            echo "All required jobs passed."


