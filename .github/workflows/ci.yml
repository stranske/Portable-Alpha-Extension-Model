name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  push:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.12'

jobs:
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
      - run: ruff check pa_core tests
        name: Ruff (lint)
      - run: black --check pa_core tests
        name: Black (format check)
      - run: isort --check-only pa_core tests
        name: isort (import order)

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
      - run: pyright
        name: Pyright
      - run: mypy pa_core --ignore-missing-imports
        name: MyPy (additional)

  security:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Install bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]
      # Informational by default. To gate on Bandit, add 'security' to Gate.needs and make this step fail on findings.
      - name: Bandit (report)
        run: bandit -r pa_core -f json -o bandit-report.json || true
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: bandit-report.json

  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
      - name: Pytest with coverage floor
        run: |
          pytest tests/ -v --cov=pa_core --cov-report=xml --cov-report=term --cov-fail-under=60
      - uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: coverage.xml

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, test]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
      - name: Prepare sample inputs
        run: |
          test -f parameters.csv
          test -f sp500tr_fred_divyield.csv
      - name: Run CLI
        run: |
          python -m pa_core.cli --params parameters.csv --index sp500tr_fred_divyield.csv --mode returns
      - name: Assert artifact exists
        run: |
          shopt -s nullglob
          files=(Outputs.xlsx Outputs.parquet Outputs/*.xlsx Outputs/*.parquet)
          echo "Artifacts: ${files[@]}"
          [ ${#files[@]} -gt 0 ] || { echo "::error::No output artifact produced"; exit 1; }

  build-docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
      - name: Build docs
        run: make docs
      - uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/

  codespace-validation:
    name: Validate Codespace Config
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate devcontainer.json
        run: |
          python -m json.tool .devcontainer/devcontainer.json > /dev/null
          echo "✅ devcontainer.json is valid"
      - name: Test setup script
        run: |
          chmod +x .devcontainer/setup.sh || true
          bash -n .devcontainer/setup.sh || true
          echo "✅ Codespace setup script syntax is valid"

  pr-gate:
    name: PR Gate
    runs-on: ubuntu-latest
    needs:
      - lint-and-format
      - type-check
      - test
      - integration-test
      - codespace-validation
      # To enforce security as well, add:
      # - security
    if: ${{ always() }}
    env:
      LINT_RESULT:   ${{ needs.lint-and-format.result }}
      TYPE_RESULT:   ${{ needs.type-check.result }}
      TEST_RESULT:   ${{ needs.test.result }}
      INTEG_RESULT:  ${{ needs.integration-test.result }}
      CSPACE_RESULT: ${{ needs.codespace-validation.result }}
      # SEC_RESULT:  ${{ needs.security.result }}
    steps:
      - name: Enforce upstream results
        run: |
          set -e
          echo "lint-and-format: $LINT_RESULT"
          echo "type-check:     $TYPE_RESULT"
          echo "test:           $TEST_RESULT"
          echo "integration:    $INTEG_RESULT"
          echo "codespace:      $CSPACE_RESULT"
          FAIL=0
          for r in "$LINT_RESULT" "$TYPE_RESULT" "$TEST_RESULT" "$INTEG_RESULT" "$CSPACE_RESULT"; do
            [ "$r" = "success" ] || FAIL=1
          done
          if [ $FAIL -ne 0 ]; then
            echo "::error::One or more upstream jobs failed/cancelled/skipped"
            exit 1
          fi
          echo "All required jobs succeeded."
