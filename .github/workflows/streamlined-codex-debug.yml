name: Streamlined Codex Auto-Debug

on:
  workflow_dispatch:
# Explicit permissions for GitHub Actions
permissions:
  contents: write          # Push commits and access repository
  pull-requests: write     # Comment on PRs
  issues: write           # PR comments (PRs are issues)
  actions: read           # Access workflow artifacts
  checks: write           # Update check status

env:
  GH_TOKEN: ${{ secrets.CODEX_PAT || secrets.GITHUB_TOKEN }}
  
jobs:
  streamlined-debug:
    runs-on: ubuntu-latest
    # Run on Codex branches or when manually triggered
    if: >
      startsWith(github.head_ref, 'codex/') ||
      startsWith(github.ref_name, 'codex/') ||
      github.event_name == 'workflow_dispatch'

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.CODEX_PAT || secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up Git identity
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"

    - name: üöÄ Run Streamlined Debug
      id: streamlined_debug
      run: |
        echo "Running streamlined debugging workflow..."
        exit_code=0
        if [ -f scripts/streamlined_debug.py ]; then
          python scripts/streamlined_debug.py
          exit_code=$?
          if [ $exit_code -ne 0 ]; then
            echo "ERROR: streamlined_debug.py failed with exit code $exit_code" >&2
          fi
        else
          echo "ERROR: scripts/streamlined_debug.py not found!" >&2
          exit_code=2
        fi
        echo "streamlined_exit_code=$exit_code" >> $GITHUB_OUTPUT

    - name: üìä Upload Streamlined Debug Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: streamlined-debug-report-${{ github.run_id }}
        path: streamlined_debug_report.md
        if-no-files-found: ignore

    - name: üîç Run Detailed Debug (if streamlined found issues)
      id: detailed_debug
      if: steps.streamlined_debug.outputs.streamlined_exit_code != '0'
      run: |
        echo "Streamlined debug found issues. Running detailed analysis..."
        python scripts/debug_codex_pr.py --branch=${{ github.head_ref || github.ref_name }} --report=detailed_debug_report.md --max-iterations=3 --commit
        echo "detailed_exit_code=$?" >> $GITHUB_OUTPUT

    - name: üìä Upload Detailed Debug Report
      uses: actions/upload-artifact@v4
      if: steps.detailed_debug.outcome != 'skipped'
      with:
        name: detailed-debug-report-${{ github.run_id }}
        path: detailed_debug_report.md
        if-no-files-found: ignore

    - name: üí¨ Comment Results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.CODEX_PAT || secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');

          // Read streamlined report
          let streamlinedReport = '';
          try {
            streamlinedReport = fs.readFileSync('streamlined_debug_report.md', 'utf8');
          } catch (error) {
            streamlinedReport = '‚ùå Streamlined debug report generation failed';
            console.log('Streamlined report read error:', error);
          }

          // Read detailed report if it exists
          let detailedReport = '';
          try {
            detailedReport = fs.readFileSync('detailed_debug_report.md', 'utf8');
          } catch (error) {
            // Detailed report may not exist if streamlined debug passed
            console.log('No detailed report (this is normal if streamlined debug passed)');
          }

          // Determine overall status
          const streamlinedPassed = '${{ steps.streamlined_debug.outputs.streamlined_exit_code }}' === '0';
          const detailedRan = '${{ steps.detailed_debug.outcome }}' !== 'skipped';

          let statusEmoji = streamlinedPassed ? 'üéâ' : '‚ö†Ô∏è';
          let statusText = streamlinedPassed ? 'All Checks Passed' : 'Issues Found';

          let comment = `## ${statusEmoji} Automated Codex Debugging Results - ${statusText}

          ### üöÄ Streamlined Debug Results
          ${streamlinedReport}
          `;

          if (detailedRan && detailedReport) {
            comment += `
          ### üîç Detailed Debug Results
          ${detailedReport}
          `;
          }

          comment += `
          ---
          *Debug workflow: Streamlined ‚Üí ${streamlinedPassed ? 'Passed ‚úÖ' : 'Failed ‚ùå'}${detailedRan ? ' ‚Üí Detailed Analysis üîç' : ''}*
          `;

          try {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            console.log('Successfully posted PR comment');
          } catch (error) {
            console.log('Failed to post PR comment:', error);
            core.setFailed(`Failed to post PR comment: ${error.message}`);
          }

    - name: ü§ñ Auto-commit fixes if any
      if: >
        (steps.streamlined_debug.outputs.streamlined_exit_code == '0' ||
         steps.detailed_debug.outputs.detailed_exit_code == '0') &&
        github.event_name != 'workflow_dispatch' &&
        (github.event_name != 'pull_request' ||
         github.event.pull_request.head.repo.full_name == github.repository)
      run: |
        # Enhanced loop prevention - check last few commits for automation
        RECENT_AUTHORS=$(git log -3 --format="%an" | head -3)
        if echo "$RECENT_AUTHORS" | grep -q "github-actions\[bot\]"; then
          echo "‚ÑπÔ∏è Recent commit(s) by github-actions[bot] detected, skipping auto-commit to prevent loops"
          echo "Recent authors: $(echo "$RECENT_AUTHORS" | tr '\n' ', ' | sed 's/,$//')"
          exit 0
        fi

        # Check if this workflow run was triggered by a previous auto-commit
        if [ "${{ github.event.head_commit.author.name }}" = "github-actions[bot]" ]; then
          echo "‚ÑπÔ∏è Workflow triggered by auto-commit, skipping to prevent loops"
          exit 0
        fi

        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        
        # Determine push branch and repo details
        REPO_FULL="${{ github.repository }}"
        HEAD_REPO_FULL="${{ github.event.pull_request.head.repo.full_name || github.repository }}"
        PUSH_BRANCH="${{ github.head_ref || github.ref_name }}"
        
        # Skip push for non-branch refs
        case "$PUSH_BRANCH" in
          refs/pull/*) echo "Skipping push: non-branch ref '$PUSH_BRANCH'"; exit 0 ;;
        esac

        # Double-check same-repo push safety
        if [ "$REPO_FULL" != "$HEAD_REPO_FULL" ]; then
          echo "‚ÑπÔ∏è Skipping auto-push for fork PR ($HEAD_REPO_FULL). Maintainer action required."
          exit 0
        fi

        # Check if there are changes to commit
        if [ -n "$(git status --porcelain)" ]; then
          echo "Changes detected, committing fixes..."
          git add .
          git commit -m "ü§ñ Auto-fix: Resolve Codex integration issues

          - Applied automatic formatting fixes
          - Resolved type compatibility issues
          - Cleaned up import statements
          - Fixed common integration patterns

          Generated by streamlined debugging workflow"

          # Configure git authentication securely without token exposure
          git config --local credential.helper '!f() { echo "username=x-access-token"; echo "password=${{ env.GH_TOKEN }}"; }; f'
          
          echo "Pushing to $REPO_FULL:$PUSH_BRANCH"
          if git push origin HEAD:"$PUSH_BRANCH"; then
            echo "‚úÖ Successfully pushed auto-fixes"
          else
            echo "‚ùå Failed to push auto-fixes; check branch protections/permissions"
            echo "   Branch: $PUSH_BRANCH | Repo: $REPO_FULL"
            echo "   Hint: Ensure 'Allow GitHub Actions to bypass branch protections' is enabled if using protected branches."
            exit 1
          fi
        else
          echo "‚úÖ No changes to commit - repository is already in good state"
        fi

    - name: üìã Set final status
      if: always()
      run: |
        streamlined_code="${{ steps.streamlined_debug.outputs.streamlined_exit_code }}"
        detailed_code="${{ steps.detailed_debug.outputs.detailed_exit_code }}"

        if [ "$streamlined_code" = "0" ]; then
          echo "‚úÖ Streamlined debug passed - all good!"
          exit 0
        elif [ "$detailed_code" = "0" ]; then
          echo "‚úÖ Detailed debug resolved issues - all good!"
          exit 0
        else
          echo "‚ö†Ô∏è Issues remain that need manual attention"
          exit 1
        fi
