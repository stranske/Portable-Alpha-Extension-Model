 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/Portable_Alpha_Vectors.ipynb b/Portable_Alpha_Vectors.ipynb
index 745855507fe029a512eb2672c99e3ee4bbb54819..88755d34deaaffabdf2fe078224d32f5501a2949 100644
--- a/Portable_Alpha_Vectors.ipynb
+++ b/Portable_Alpha_Vectors.ipynb
@@ -766,50 +766,54 @@
     "        \"default_sigma_M\":      default_sigma_M,\n",
     "    \n",
     "        # ----- correlations -----\n",
     "        \"rho_idx_H\": rho_idx_H,\n",
     "        \"rho_idx_E\": rho_idx_E,\n",
     "        \"rho_idx_M\": rho_idx_M,\n",
     "        \"rho_H_E\":   rho_H_E,\n",
     "        \"rho_H_M\":   rho_H_M,\n",
     "        \"rho_E_M\":   rho_E_M,\n",
     "    \n",
     "        # ----- financing (monthly) & spike settings -----\n",
     "        \"internal_financing_mean_month\":  internal_financing_mean,\n",
     "        \"internal_financing_sigma_month\": internal_financing_sigma,\n",
     "        \"internal_spike_prob\":            internal_spike_prob,\n",
     "        \"internal_spike_factor\":          internal_spike_factor,\n",
     "    \n",
     "        \"ext_pa_financing_mean_month\":    ext_pa_financing_mean,\n",
     "        \"ext_pa_financing_sigma_month\":   ext_pa_financing_sigma,\n",
     "        \"ext_pa_spike_prob\":              ext_pa_spike_prob,\n",
     "        \"ext_pa_spike_factor\":            ext_pa_spike_factor,\n",
     "    \n",
     "        \"act_ext_financing_mean_month\":   act_ext_financing_mean,\n",
     "        \"act_ext_financing_sigma_month\":  act_ext_financing_sigma,\n",
     "        \"act_ext_spike_prob\":             act_ext_spike_prob,\n",
     "        \"act_ext_spike_factor\":           act_ext_spike_factor,\n",
+    "        \"total_fund_capital\":      total_fund_capital,\n",
+    "        \"internal_pa_capital\":    internal_pa_capital,\n",
+    "        \"external_pa_capital\":    external_pa_capital,\n",
+    "        \"active_ext_capital\":     active_ext_capital,\n",
     "    }\n",
     "\n",
     "    # -------------------------------------------------------------------\n",
     "    # NEW ▸ Build a single Monte‑Carlo universe & RNG (used by every branch)\n",
     "    # -------------------------------------------------------------------\n",
     "    seed_val = int(get_num(raw_params, \"RANDOM_SEED\", 42))\n",
     "    rng = np.random.default_rng(seed_val)  # Or read a seed from raw_params\n",
     "    cov_mat_global = build_cov_matrix(\n",
     "        rho_idx_H, rho_idx_E, rho_idx_M,\n",
     "        rho_H_E,   rho_H_M,   rho_E_M,\n",
     "        idx_sigma, default_sigma_H, default_sigma_E, default_sigma_M,\n",
     "    )\n",
     "\n",
     "    N_SIMULATIONS = get_num(raw_params, \"N_SIMULATIONS\", 20000)\n",
     "    N_MONTHS      = get_num(raw_params, \"N_MONTHS\",      12)\n",
     "\n",
     "    # ------------------------------------------------------------\n",
     "    # Global financing vectors (length = N_MONTHS) reused by all modes\n",
     "    # ------------------------------------------------------------\n",
     "    f_internal_vec = simulate_financing(\n",
     "        N_MONTHS, internal_financing_mean, internal_financing_sigma,\n",
     "        internal_spike_prob, internal_spike_factor,\n",
     "        rng=rng, n_scenarios=1\n",
     "    )[0]\n",
     "    f_ext_pa_vec = simulate_financing(\n",
@@ -1425,51 +1429,51 @@
     "        }\n",
     "\n",
     "        export_to_excel(inputs_dict, final_summary, all_raw_returns)\n",
     "\n",
     "        display_df = final_summary.copy()\n",
     "        display_df = display_df.rename(columns={\n",
     "            \"Annual Return\": \"Annual Return (%)\",\n",
     "            \"Annual Vol\":    \"Annual Volatility (%)\",\n",
     "            \"VaR 95\":        \"95%-VaR (%)\",\n",
     "            \"TE (est.)\":     \"Tracking Error (%)\",\n",
     "            \"Breach %\":      \"Breach Probability (%)\"\n",
     "        })\n",
     "        pct_cols = [\n",
     "            \"Annual Return (%)\", \"Annual Volatility (%)\", \"95%-VaR (%)\",\n",
     "            \"Tracking Error (%)\", \"Breach Probability (%)\"\n",
     "        ]\n",
     "        for col in pct_cols:\n",
     "            display_df[col] = display_df[col].map(\"{:.1f}%\".format)\n",
     "\n",
     "        pd.set_option(\"display.max_rows\", None)\n",
     "        print(\"\\n=== Summary Table (Vol_Mult Mode) ===\\n\")\n",
     "        print(display_df.to_string(index=False))\n",
     "        print()\n",
     "\n",
     "    else:\n",
-    "        raise RuntimeError(f\"Unexpected analysis mode: '{analysis_mode}'\")\n"
+    "        raise RuntimeError(f\"Unexpected analysis mode: '{analysis_mode}'\")"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": null,
    "id": "bb81508f-1ca5-4604-918f-869890401c9e",
    "metadata": {},
    "outputs": [],
    "source": []
   },
   {
    "cell_type": "code",
    "execution_count": null,
    "id": "ff0ff261-33e0-4623-86c6-7c24c1c78c51",
    "metadata": {
     "jp-MarkdownHeadingCollapsed": true
    },
    "outputs": [],
    "source": [
     "export_to_excel(\n",
     "    inputs_dict,\n",
     "    final_summary,\n",
     "    all_raw_returns,\n",
     "    filename=\"/Users/teacher/Library/CloudStorage/Dropbox/Learning/Code/Portable\\ Alpha-Extension\\ Model/Outputs.xlsx\"\n",
     ")\n",
 
EOF
)